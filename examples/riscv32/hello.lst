
C:/Users/miyazaki/wsFreedomStudio/sample/src/debug/hello.elf:     file format elf32-littleriscv
C:/Users/miyazaki/wsFreedomStudio/sample/src/debug/hello.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20010000

Program Header:
    LOAD off    0x00001000 vaddr 0x20010000 paddr 0x20010000 align 2**12
         filesz 0x00004c98 memsz 0x00004c98 flags rwx
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x20014c98 align 2**12
         filesz 0x000010cc memsz 0x000010cc flags rw-
    LOAD off    0x000070cc vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    NULL off    0x00000000 vaddr 0x800010cc paddr 0x800010cc align 2**2
         filesz 0x00000000 memsz 0x00002f34 flags rw-
    NULL off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             00000134  20010000  20010000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00003ffe  20010180  20010180  00001180  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000b0c  20014180  20014180  00005180  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array       0000000c  20014c8c  20014c8c  00005c8c  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .litimalign       00000000  20014c98  20014c98  000070cc  2**0  CONTENTS
  5 .ditimalign       00000000  80000000  80000000  000070cc  2**0  CONTENTS
  6 .lalign           00000000  20014c98  20014c98  000070cc  2**0  CONTENTS
  7 .dalign           00000000  80000000  80000000  000070cc  2**0  CONTENTS
  8 .data             000010cc  80000000  20014c98  00006000  2**3  CONTENTS, ALLOC, LOAD, DATA
  9 .bss              00000038  800010cc  800010cc  00000000  2**2  ALLOC
 10 .stack            00000400  80001104  80001104  00000000  2**0  ALLOC
 11 .heap             00002afc  80001504  80001504  00000000  2**0  ALLOC
 12 .debug_info       0000dbd7  00000000  00000000  000070cc  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev     00002486  00000000  00000000  00014ca3  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges    00000648  00000000  00000000  00017130  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges     000004b0  00000000  00000000  00017778  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_line       000056e6  00000000  00000000  00017c28  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_str        00002d82  00000000  00000000  0001d30e  2**0  CONTENTS, READONLY, DEBUGGING
 18 .comment          00000011  00000000  00000000  00020090  2**0  CONTENTS, READONLY
 19 .riscv.attributes 00000029  00000000  00000000  000200a1  2**0  CONTENTS, READONLY
 20 .debug_frame      000011dc  00000000  00000000  000200cc  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
20010000 l    d  .init	00000000 .init
20010180 l    d  .text	00000000 .text
20014180 l    d  .rodata	00000000 .rodata
20014c8c l    d  .init_array	00000000 .init_array
20014c98 l    d  .litimalign	00000000 .litimalign
80000000 l    d  .ditimalign	00000000 .ditimalign
20014c98 l    d  .lalign	00000000 .lalign
80000000 l    d  .dalign	00000000 .dalign
80000000 l    d  .data	00000000 .data
800010cc l    d  .bss	00000000 .bss
80001104 l    d  .stack	00000000 .stack
80001504 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 libriscv__mmachine___a-entry.o
20011b38 l       .text	00000000 early_trap_vector
00000000 l    df *ABS*	00000000 crt0.o
200141a0 l       .rodata	00000000 argv
200141a4 l       .rodata	00000000 envp
200141a8 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 hello.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
20010272 l     F .text	00000004 __fp_lock
20010276 l     F .text	0000006a std
200102ea l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
8000109c l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 tty.c
20011f04 l     F .text	00000022 metal_tty_init
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 fixed-clock.c
00000000 l    df *ABS*	00000000 riscv,clint0.c
00000000 l    df *ABS*	00000000 riscv,cpu.c
00000000 l    df *ABS*	00000000 riscv,plic0.c
00000000 l    df *ABS*	00000000 sifive,fe310-g000,hfrosc.c
00000000 l    df *ABS*	00000000 sifive,fe310-g000,hfxosc.c
00000000 l    df *ABS*	00000000 sifive,fe310-g000,pll.c
2001440c l     O .rodata	00000880 pll_configs
200135aa l     F .text	0000004e get_pll_config_freq
200135f8 l     F .text	00000028 metal_sifive_fe310_g000_pll_init
20013820 l     F .text	000000a8 find_closest_config
200138c8 l     F .text	00000132 configure_pll
20013b38 l     F .text	00000028 use_hfxosc
00000000 l    df *ABS*	00000000 sifive,fe310-g000,prci.c
00000000 l    df *ABS*	00000000 sifive,gpio0.c
00000000 l    df *ABS*	00000000 sifive,uart0.c
20013ee4 l     F .text	000000d0 pre_rate_change_callback
20013fb4 l     F .text	00000030 post_rate_change_callback
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
20014c98 l       .init_array	00000000 __init_array_end
20014c8c l       .init_array	00000000 __preinit_array_end
20014c8c l       .init_array	00000000 __init_array_start
20014c8c l       .init_array	00000000 __preinit_array_start
20014264  w    O .rodata	0000001c __metal_driver_vtable_sifive_uart0
20011b06 g     F .text	00000030 _isatty_r
200101e2 g     F .text	00000070 _puts_r
2001196a g     F .text	00000034 _lseek_r
20014078 g     F .text	00000026 metal_clock_get_rate_hz
20013e4c g     F .text	00000098 __metal_driver_sifive_uart0_set_baud_rate
2001281e g     F .text	00000038 __metal_valid_interrupt_id
80001890 g       .data	00000000 __global_pointer$
20013098 g     F .text	0000002c __metal_plic0_complete_interrupt
20012a3a g     F .text	00000148 __metal_driver_riscv_cpu_controller_interrupt_register
20011312 g     F .text	00000036 __sseek
2001033c g     F .text	0000004e __sinit
200102ee g     F .text	00000046 __sfmoreglue
20010ed0 g     F .text	00000002 __malloc_unlock
80000fd8  w    O .data	00000030 __metal_dt_serial_10013000
20014210  w    O .rodata	0000001c __metal_driver_vtable_riscv_clint0
80001108 g       .bss	00000000 metal_segment_bss_target_end
20011ff2 g     F .text	00000076 __metal_clint0_mtime_get
20013010 g     F .text	00000028 __metal_driver_cpu_get_instruction_length
20010ddc g     F .text	0000004a memmove
20010334 g     F .text	00000008 _cleanup
20013bb2 g     F .text	00000040 __metal_driver_sifive_gpio0_disable_input
20011cd2 g     F .text	0000000c __errno
20012068 g     F .text	00000058 __metal_clint0_mtime_set
80000000 g       .ditimalign	00000000 metal_segment_itim_target_start
800010cc g       .bss	00000000 metal_segment_bss_target_start
20011ad4 g     F .text	00000032 _fstat_r
20012bd6 g     F .text	00000062 __metal_driver_riscv_cpu_controller_interrupt_enable_vector
80001100 g     O .bss	00000004 errno
200136ca g     F .text	00000156 __metal_driver_sifive_fe310_g000_pll_get_rate_hz
200112c0 g     F .text	00000004 __seofread
00000400 g       *ABS*	00000000 __stack_size
20014102 g     F .text	0000002e metal_clock_register_pre_rate_change_callback
2001422c  w    O .rodata	0000001c __metal_driver_vtable_riscv_plic0
200141d0  w    O .rodata	00000040 __metal_driver_vtable_cpu
20011f82 g     F .text	0000002e metal_uart_set_baud_rate
20013fe4 g     F .text	00000094 __metal_driver_sifive_uart0_init
20010d26 g     F .text	000000b6 memcpy
20014280  w    O .rodata	0000000c __metal_driver_vtable_sifive_fe310_g000_pll
80001504 g       .heap	00000000 metal_segment_heap_target_start
200102e0 g     F .text	0000000a _cleanup_r
8000088c  w    O .data	00000010 __metal_dt_cpu_0
200139fa g     F .text	0000013e __metal_driver_sifive_fe310_g000_pll_set_rate_hz
20010252 g     F .text	0000000e puts
200124d8 g     F .text	00000018 __metal_default_exception_handler
20011b5c g     F .text	00000026 _fstat
200130ee g     F .text	00000048 __metal_plic0_set_priority
2001236e g     F .text	0000002c __metal_driver_cpu_get
200141b4  w    O .rodata	0000001c __metal_driver_vtable_riscv_cpu_intc
800010d4 g     O .bss	00000004 __malloc_top_pad
200123cc g     F .text	00000018 __metal_interrupt_global_disable
20010456 g     F .text	000002dc __sfvwrite_r
2001125c g     F .text	00000032 _sbrk_r
200128f8 g     F .text	0000004e __metal_exception_register
2001347c g     F .text	00000042 __metal_driver_riscv_plic0_disable
20011aa0 g     F .text	00000034 _read_r
20012e10 g     F .text	0000001a __metal_driver_cpu_timer_controller_interrupt
20013c16 g     F .text	0000003a __metal_driver_sifive_gpio0_enable_output
20011490 g     F .text	00000086 _fclose_r
20012c8e g     F .text	00000072 __metal_driver_cpu_timer_get
200116ae g     F .text	00000022 fflush
800010d0 g     O .bss	00000004 __malloc_max_sbrked_mem
20012508 g     F .text	00000064 __metal_default_sw_handler
20014130 g     F .text	0000002e metal_clock_register_post_rate_change_callback
8000084c  w    O .data	0000001c __metal_dt_clock_2
20013d6a g     F .text	00000020 __metal_driver_sifive_uart0_interrupt_controller
20011b82 g     F .text	00000020 _isatty
20013cca g     F .text	0000003a __metal_driver_sifive_gpio0_output_toggle
20012c38 g     F .text	0000003a __metal_driver_riscv_cpu_controller_interrupt_disable_vector
800010a0  w    O .data	00000008 __metal_driver_vtable_fixed_clock
800010c8 g     O .data	00000004 _global_impure_ptr
20010ed2 g     F .text	0000038a _realloc_r
20011d36 g     F .text	0000006e __libc_init_array
20013c50 g     F .text	0000003a __metal_driver_sifive_gpio0_output_set
20013588 g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz
20012b82 g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_enable
20011bf6 g     F .text	00000064 _sbrk
2001042e g     F .text	00000014 __fp_lock_all
20010132 g     F .init	00000002 _init
2001242e g     F .text	0000001a __metal_interrupt_timer_disable
20012ed6 g     F .text	0000006a __metal_driver_cpu_clear_sw_ipi
20014248  w    O .rodata	0000001c __metal_driver_vtable_sifive_gpio0
20013d04 g     F .text	00000066 __metal_driver_sifive_gpio0_enable_io
20011cfc g     F .text	0000003a __libc_fini_array
80001050  w    O .data	00000034 __metal_dt_clock_4
20012e58 g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
80000000 g       .dalign	00000000 metal_segment_data_target_start
20012480 g     F .text	0000002c __metal_interrupt_local_enable
20011eb4 g     F .text	00000050 metal_tty_putc
200131c0 g     F .text	00000018 __metal_plic0_default_handler
80000830  w    O .data	0000001c __metal_dt_clock_0
20010180 g     F .text	00000020 add
00000400 g       *ABS*	00000000 __heap_size
20012464 g     F .text	0000001c __metal_interrupt_external_disable
20013d8a g     F .text	00000024 __metal_driver_sifive_uart0_get_interrupt_id
20012c72 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
20012946 g     F .text	000000f4 __metal_driver_riscv_cpu_controller_interrupt_init
20012fc8 g     F .text	00000048 __metal_driver_cpu_exception_register
200123e4 g     F .text	00000018 __metal_interrupt_software_enable
20010426 g     F .text	00000002 __sfp_lock_acquire
20010d0c g     F .text	0000001a memchr
2001179a g     F .text	000001d0 _free_r
20011e06 g     F .text	000000ae __call_exitprocs
20010054 g     F .init	00000000 _start
80001094 g     O .data	00000004 __malloc_sbrk_base
200134be g     F .text	0000005c __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz
20011ba2 g     F .text	0000002a _lseek
20012fa8 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20013038 g     F .text	0000001e __metal_driver_cpu_get_exception_pc
20012448 g     F .text	0000001c __metal_interrupt_external_enable
20011da4 g     F .text	00000062 __register_exitproc
20013dae g     F .text	00000036 __metal_driver_sifive_uart0_putc
20013262 g     F .text	0000011a __metal_driver_riscv_plic0_init
2001343a g     F .text	00000042 __metal_driver_riscv_plic0_enable
20013bf2 g     F .text	00000024 __metal_driver_sifive_gpio0_output
800010d8 g     O .bss	00000028 __malloc_current_mallinfo
2001239a g     F .text	0000001a __metal_myhart_id
20012bac g     F .text	0000002a __metal_driver_riscv_cpu_controller_interrupt_disable
20011460 g     F .text	00000030 _close_r
20013e2c g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
2001213e g     F .text	00000062 __metal_driver_riscv_clint0_register
80000868  w    O .data	00000024 __metal_dt_clint_2000000
20011384 g     F .text	000000dc __swsetup_r
2001038a g     F .text	0000009c __sfp
80000428 g     O .data	00000408 __malloc_av_
2001042c g     F .text	00000002 __sinit_lock_release
2001409e g     F .text	00000064 metal_clock_set_rate_hz
2001128e g     F .text	00000032 __sread
20010ece g     F .text	00000002 __malloc_lock
2001167e g     F .text	00000030 _fflush_r
20013b60 g     F .text	00000024 __metal_driver_sifive_fe310_g000_prci_get_reg
20012856 g     F .text	000000a2 __metal_local_interrupt_enable
2001224c g     F .text	00000122 __metal_driver_riscv_clint0_command_request
20010e26 g     F .text	000000a8 memset
200101a0 g     F .text	00000042 main
800010cc g     O .bss	00000004 __malloc_max_total_mem
800010cc g       .bss	00000000 metal_segment_data_target_end
800010b0  w    O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfrosc
20012e6c g     F .text	0000006a __metal_driver_cpu_set_sw_ipi
20012f40 g     F .text	00000068 __metal_driver_cpu_get_msip
2001415e g     F .text	0000000e metal_shutdown
80000000 g       .init_array	00000000 metal_segment_itim_target_end
20013056 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
20013076 g     F .text	00000022 __metal_plic0_claim_interrupt
20011348 g     F .text	00000006 __sclose
20011516 g     F .text	0000000e fclose
20010800 g     F .text	0000050c _malloc_r
80001504 g       .stack	00000000 metal_segment_stack_end
20010732 g     F .text	00000062 _fwalk
80001084  w    O .data	0000000c __metal_dt_prci_10008000
20012d00 g     F .text	00000034 __metal_driver_cpu_timebase_get
200116d0 g     F .text	000000ca _malloc_trim_r
20010000 g       .init	00000000 _enter
2001353c g     F .text	0000004c __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz
20014c98 g       .litimalign	00000000 metal_segment_itim_source_start
800010c0  w    O .data	00000004 __metal_cpu_table
20010132 g     F .init	00000002 _fini
200123b4 g     F .text	00000018 __metal_interrupt_global_enable
20011cc8 g     F .text	0000000a atexit
2001134e g     F .text	00000036 _write_r
20012414 g     F .text	0000001a __metal_interrupt_timer_enable
20013de4 g     F .text	00000048 __metal_driver_sifive_uart0_getc
200121f6 g     F .text	00000056 __metal_driver_riscv_clint0_disable
80001090 g     O .data	00000004 _impure_ptr
20012da2 g     F .text	0000006e __metal_driver_cpu_mtimecmp_set
20011524 g     F .text	0000015a __sflush_r
20013620 g     F .text	000000aa __metal_driver_sifive_fe310_g000_pll_init
20010442 g     F .text	00000014 __fp_unlock_all
20013b84 g     F .text	0000002e __metal_driver_sifive_fe310_g000_prci_set_reg
20011fb0 g     F .text	00000020 __metal_driver_fixed_clock_get_rate_hz
200121a0 g     F .text	00000056 __metal_driver_riscv_clint0_enable
20014c98 g       .lalign	00000000 metal_segment_data_source_start
80004000 g       .heap	00000000 metal_segment_heap_target_end
20012778 g     F .text	000000a6 __metal_controller_interrupt_vector
8000102c  w    O .data	00000024 __metal_dt_clock_1
80000c60  w    O .data	00000320 __metal_dt_interrupt_controller_c000000
2001199e g     F .text	00000064 __swhatbuf_r
20013c8a g     F .text	00000040 __metal_driver_sifive_gpio0_output_clear
800008a0  w    O .data	000003c0 __metal_dt_interrupt_controller
2001256c g     F .text	00000066 __metal_default_timer_handler
20011c5a g     F .text	0000006e _write
200131d8 g     F .text	0000008a __metal_plic0_handler
200112c4 g     F .text	0000004e __swrite
80001098 g     O .data	00000004 __malloc_trim_threshold
20011cde g     F .text	0000001e exit
20010794 g     F .text	0000006c _fwalk_reent
20011fd0 g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20010428 g     F .text	00000002 __sfp_lock_release
80000f80  w    O .data	00000058 __metal_dt_gpio_10012000
200124f0 g     F .text	00000018 __metal_default_interrupt_handler
20011f50 g     F .text	00000032 metal_uart_putc
20011bcc g     F .text	0000002a _read
20012600 g     F .text	0000014a __metal_exception_handler
2001416c g     F .text	00000012 _exit
20012d34 g     F .text	0000006e __metal_driver_cpu_mtime_get
20011a02 g     F .text	0000009e __smakebuf_r
20010260 g     F .text	00000012 strlen
800010b8  w    O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_hfxosc
200120c0 g     F .text	0000007e __metal_driver_riscv_clint0_init
20012e2a g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
20013136 g     F .text	0000008a __metal_plic0_enable
2001351a g     F .text	00000022 __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz
20012e3e g     F .text	0000001a __metal_driver_cpu_sw_controller_interrupt
200124ac g     F .text	0000002c __metal_interrupt_local_disable
200123fc g     F .text	00000018 __metal_interrupt_software_disable
20011f26 g     F .text	0000002a metal_uart_init
80001008  w    O .data	00000024 __metal_dt_clock_3
200130c4 g     F .text	0000002a __metal_plic0_set_threshold
20011b3a g     F .text	00000022 _close
800010a8  w    O .data	00000008 __metal_driver_vtable_sifive_fe310_g000_prci
2001042a g     F .text	00000002 __sinit_lock_acquire
2001337c g     F .text	000000be __metal_driver_riscv_plic0_register



Disassembly of section .init:

20010000 <_enter>:
_enter():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20010000:	5fff2197          	auipc	gp,0x5fff2
20010004:	89018193          	addi	gp,gp,-1904 # 80001890 <__global_pointer$>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:29
.option pop

    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20010008:	00002297          	auipc	t0,0x2
2001000c:	b3028293          	addi	t0,t0,-1232 # 20011b38 <early_trap_vector>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:30
    csrw mtvec, t0
20010010:	30529073          	csrw	mtvec,t0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:38
     * C, so here we set up a C environment.  First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
20010014:	dfff0117          	auipc	sp,0xdfff0
20010018:	fec10113          	addi	sp,sp,-20 # 0 <__heap_size-0x400>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:47
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    .weak __metal_before_start
    la ra, __metal_before_start
2001001c:	dfff0097          	auipc	ra,0xdfff0
20010020:	fe408093          	addi	ra,ra,-28 # 0 <__heap_size-0x400>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:48
    beqz ra, 1f
20010024:	00008363          	beqz	ra,2001002a <_enter+0x2a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:49
    jalr ra
20010028:	9082                	jalr	ra
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:55
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
2001002a:	f1402573          	csrr	a0,mhartid
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:56
    li a1, 0
2001002e:	4581                	li	a1,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:57
    li a2, 0
20010030:	4601                	li	a2,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:58
    call _start
20010032:	200d                	jal	20010054 <_start>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:63

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20010034:	dfff0097          	auipc	ra,0xdfff0
20010038:	fcc08093          	addi	ra,ra,-52 # 0 <__heap_size-0x400>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:64
    beqz ra, 1f
2001003c:	00008363          	beqz	ra,20010042 <_enter+0x42>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:65
    jalr ra
20010040:	9082                	jalr	ra
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:70
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
20010042:	00000297          	auipc	t0,0x0
20010046:	00c28293          	addi	t0,t0,12 # 2001004e <_enter+0x4e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:71
     csrw mtvec, t0
2001004a:	30529073          	csrw	mtvec,t0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:73
1:
     lw t1, 0(x0)
2001004e:	00002303          	lw	t1,0(zero) # 0 <__heap_size-0x400>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:74
     j 1b
20010052:	bff5                	j	2001004e <_enter+0x4e>

20010054 <_start>:
_start():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
20010054:	8406                	mv	s0,ra
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20010056:	5fff2197          	auipc	gp,0x5fff2
2001005a:	83a18193          	addi	gp,gp,-1990 # 80001890 <__global_pointer$>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:51

  /* The METAL is designed for a bare-metal environment and therefor is expected
   * to define its own stack pointer.  We also align the stack pointer here
   * because the only RISC-V ABI that's currently defined mandates 16-byte
   * stack alignment. */
  la sp, metal_segment_stack_end
2001005e:	c7418113          	addi	sp,gp,-908 # 80001504 <metal_segment_stack_end>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:52
  andi sp, sp, -16
20010062:	ff017113          	andi	sp,sp,-16
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:57

  /* For now we only run on single-hart systems and assume that we're always on
   * hart 0. */
1:
  bnez a0, 1b
20010066:	e101                	bnez	a0,20010066 <_start+0x12>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:66
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
20010068:	00005297          	auipc	t0,0x5
2001006c:	c3028293          	addi	t0,t0,-976 # 20014c98 <__init_array_end>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:67
  la t1, metal_segment_data_target_start
20010070:	5fff0317          	auipc	t1,0x5fff0
20010074:	f9030313          	addi	t1,t1,-112 # 80000000 <metal_segment_itim_target_end>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:68
  la t2, metal_segment_data_target_end
20010078:	5fff1397          	auipc	t2,0x5fff1
2001007c:	05438393          	addi	t2,t2,84 # 800010cc <__malloc_max_total_mem>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:70

  beq t0, t1, 2f
20010080:	00628c63          	beq	t0,t1,20010098 <_start+0x44>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:71
  bge t1, t2, 2f
20010084:	00735a63          	bge	t1,t2,20010098 <_start+0x44>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:74

1:
  lw   a0, 0(t0)
20010088:	0002a503          	lw	a0,0(t0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:75
  addi t0, t0, 4
2001008c:	0291                	addi	t0,t0,4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:76
  sw   a0, 0(t1)
2001008e:	00a32023          	sw	a0,0(t1)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:77
  addi t1, t1, 4
20010092:	0311                	addi	t1,t1,4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:78
  blt  t1, t2, 1b
20010094:	fe734ae3          	blt	t1,t2,20010088 <_start+0x34>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:82
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
20010098:	00005297          	auipc	t0,0x5
2001009c:	c0028293          	addi	t0,t0,-1024 # 20014c98 <__init_array_end>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:83
  la t1, metal_segment_itim_target_start
200100a0:	5fff0317          	auipc	t1,0x5fff0
200100a4:	f6030313          	addi	t1,t1,-160 # 80000000 <metal_segment_itim_target_end>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:84
  la t2, metal_segment_itim_target_end
200100a8:	5fff0397          	auipc	t2,0x5fff0
200100ac:	f5838393          	addi	t2,t2,-168 # 80000000 <metal_segment_itim_target_end>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:86

  beq t0, t1, 2f
200100b0:	00628c63          	beq	t0,t1,200100c8 <_start+0x74>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:87
  bge t1, t2, 2f
200100b4:	00735a63          	bge	t1,t2,200100c8 <_start+0x74>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:90

1:
  lw   a0, 0(t0)
200100b8:	0002a503          	lw	a0,0(t0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:91
  addi t0, t0, 4
200100bc:	0291                	addi	t0,t0,4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:92
  sw   a0, 0(t1)
200100be:	00a32023          	sw	a0,0(t1)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:93
  addi t1, t1, 4
200100c2:	0311                	addi	t1,t1,4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:94
  blt  t1, t2, 1b
200100c4:	fe734ae3          	blt	t1,t2,200100b8 <_start+0x64>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:98
2:

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
200100c8:	5fff1317          	auipc	t1,0x5fff1
200100cc:	00430313          	addi	t1,t1,4 # 800010cc <__malloc_max_total_mem>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:99
  la t2, metal_segment_bss_target_end
200100d0:	5fff1397          	auipc	t2,0x5fff1
200100d4:	03838393          	addi	t2,t2,56 # 80001108 <metal_segment_bss_target_end>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:101

  bge t1, t2, 2f
200100d8:	00735763          	bge	t1,t2,200100e6 <_start+0x92>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:104

1:
  sw   x0, 0(t1)
200100dc:	00032023          	sw	zero,0(t1)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:105
  addi t1, t1, 4
200100e0:	0311                	addi	t1,t1,4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:106
  blt  t1, t2, 1b
200100e2:	fe734de3          	blt	t1,t2,200100dc <_start+0x88>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:112
2:

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
200100e6:	c211                	beqz	a2,200100ea <_start+0x96>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:113
  jalr a2
200100e8:	9602                	jalr	a2
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:117
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
200100ea:	00002517          	auipc	a0,0x2
200100ee:	c1250513          	addi	a0,a0,-1006 # 20011cfc <__libc_fini_array>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:118
  call atexit
200100f2:	3d7010ef          	jal	ra,20011cc8 <atexit>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:119
  call __libc_init_array
200100f6:	441010ef          	jal	ra,20011d36 <__libc_init_array>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:122

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  csrr a5, misa
200100fa:	301027f3          	csrr	a5,misa
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:123
  li   a4, 0x10028
200100fe:	00010737          	lui	a4,0x10
20010102:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xfc28>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:124
  and  a5, a5, a4
20010106:	8ff9                	and	a5,a5,a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:125
  beqz a5, 1f
20010108:	c799                	beqz	a5,20010116 <_start+0xc2>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:126
  csrr a5, mstatus
2001010a:	300027f3          	csrr	a5,mstatus
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:127
  lui  a4, 0x2
2001010e:	6709                	lui	a4,0x2
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:128
  or   a5, a5, a4
20010110:	8fd9                	or	a5,a5,a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:129
  csrw mstatus, a5
20010112:	30079073          	csrw	mstatus,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:135
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
20010116:	4505                	li	a0,1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:136
  la a1, argv  /* argv = {"libgloss", NULL} */
20010118:	00004597          	auipc	a1,0x4
2001011c:	08858593          	addi	a1,a1,136 # 200141a0 <argv>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:137
  la a2, envp  /* envp = {NULL} */
20010120:	00004617          	auipc	a2,0x4
20010124:	08460613          	addi	a2,a2,132 # 200141a4 <envp>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:138
  call main
20010128:	28a5                	jal	200101a0 <main>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:144

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
2001012a:	3b5010ef          	jal	ra,20011cde <exit>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:149

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
2001012e:	80a2                	mv	ra,s0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:150
  ret
20010130:	8082                	ret

20010132 <_fini>:
_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/crt0.S:162
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
20010132:	8082                	ret

Disassembly of section .text:

20010180 <add>:
add():
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:2
#include <stdio.h>
int add(int a, int b) {
20010180:	1101                	addi	sp,sp,-32
20010182:	ce22                	sw	s0,28(sp)
20010184:	1000                	addi	s0,sp,32
20010186:	fea42623          	sw	a0,-20(s0)
2001018a:	feb42423          	sw	a1,-24(s0)
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:3
    return a + b;
2001018e:	fec42703          	lw	a4,-20(s0)
20010192:	fe842783          	lw	a5,-24(s0)
20010196:	97ba                	add	a5,a5,a4
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:4
}
20010198:	853e                	mv	a0,a5
2001019a:	4472                	lw	s0,28(sp)
2001019c:	6105                	addi	sp,sp,32
2001019e:	8082                	ret

200101a0 <main>:
main():
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:6

int main() {
200101a0:	1101                	addi	sp,sp,-32
200101a2:	ce06                	sw	ra,28(sp)
200101a4:	cc22                	sw	s0,24(sp)
200101a6:	1000                	addi	s0,sp,32
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:7
    int sum = 0;
200101a8:	fe042623          	sw	zero,-20(s0)
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:8
    sum = add(1, 2);
200101ac:	4589                	li	a1,2
200101ae:	4505                	li	a0,1
200101b0:	3fc1                	jal	20010180 <add>
200101b2:	fea42623          	sw	a0,-20(s0)
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:9
    if (sum == 10)
200101b6:	fec42703          	lw	a4,-20(s0)
200101ba:	47a9                	li	a5,10
200101bc:	00f71863          	bne	a4,a5,200101cc <main+0x2c>
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:11
    {
        printf("sum is 10\n");
200101c0:	200147b7          	lui	a5,0x20014
200101c4:	18078513          	addi	a0,a5,384 # 20014180 <_exit+0x14>
200101c8:	2069                	jal	20010252 <puts>
200101ca:	a031                	j	200101d6 <main+0x36>
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:13
    } else {
        printf("sum is not 10\n");
200101cc:	200147b7          	lui	a5,0x20014
200101d0:	18c78513          	addi	a0,a5,396 # 2001418c <_exit+0x20>
200101d4:	28bd                	jal	20010252 <puts>
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:15
    }
    return 0;
200101d6:	4781                	li	a5,0
C:\Users\miyazaki\wsFreedomStudio\sample\src/hello.c:16
}
200101d8:	853e                	mv	a0,a5
200101da:	40f2                	lw	ra,28(sp)
200101dc:	4462                	lw	s0,24(sp)
200101de:	6105                	addi	sp,sp,32
200101e0:	8082                	ret

200101e2 <_puts_r>:
_puts_r():
200101e2:	7139                	addi	sp,sp,-64
200101e4:	dc22                	sw	s0,56(sp)
200101e6:	842a                	mv	s0,a0
200101e8:	852e                	mv	a0,a1
200101ea:	c62e                	sw	a1,12(sp)
200101ec:	de06                	sw	ra,60(sp)
200101ee:	288d                	jal	20010260 <strlen>
200101f0:	00004797          	auipc	a5,0x4
200101f4:	fac78793          	addi	a5,a5,-84 # 2001419c <_exit+0x30>
200101f8:	d43e                	sw	a5,40(sp)
200101fa:	4785                	li	a5,1
200101fc:	d63e                	sw	a5,44(sp)
200101fe:	101c                	addi	a5,sp,32
20010200:	45b2                	lw	a1,12(sp)
20010202:	ca3e                	sw	a5,20(sp)
20010204:	4789                	li	a5,2
20010206:	cc3e                	sw	a5,24(sp)
20010208:	5c1c                	lw	a5,56(s0)
2001020a:	d22a                	sw	a0,36(sp)
2001020c:	0505                	addi	a0,a0,1
2001020e:	d02e                	sw	a1,32(sp)
20010210:	ce2a                	sw	a0,28(sp)
20010212:	440c                	lw	a1,8(s0)
20010214:	e789                	bnez	a5,2001021e <_puts_r+0x3c>
20010216:	8522                	mv	a0,s0
20010218:	c62e                	sw	a1,12(sp)
2001021a:	220d                	jal	2001033c <__sinit>
2001021c:	45b2                	lw	a1,12(sp)
2001021e:	00c59783          	lh	a5,12(a1)
20010222:	01279713          	slli	a4,a5,0x12
20010226:	00074b63          	bltz	a4,2001023c <_puts_r+0x5a>
2001022a:	6689                	lui	a3,0x2
2001022c:	51f8                	lw	a4,100(a1)
2001022e:	8fd5                	or	a5,a5,a3
20010230:	00f59623          	sh	a5,12(a1)
20010234:	77f9                	lui	a5,0xffffe
20010236:	17fd                	addi	a5,a5,-1
20010238:	8ff9                	and	a5,a5,a4
2001023a:	d1fc                	sw	a5,100(a1)
2001023c:	0850                	addi	a2,sp,20
2001023e:	8522                	mv	a0,s0
20010240:	2c19                	jal	20010456 <__sfvwrite_r>
20010242:	57fd                	li	a5,-1
20010244:	e111                	bnez	a0,20010248 <_puts_r+0x66>
20010246:	47a9                	li	a5,10
20010248:	50f2                	lw	ra,60(sp)
2001024a:	5462                	lw	s0,56(sp)
2001024c:	853e                	mv	a0,a5
2001024e:	6121                	addi	sp,sp,64
20010250:	8082                	ret

20010252 <puts>:
puts():
20010252:	5fff1797          	auipc	a5,0x5fff1
20010256:	e3e78793          	addi	a5,a5,-450 # 80001090 <_impure_ptr>
2001025a:	85aa                	mv	a1,a0
2001025c:	4388                	lw	a0,0(a5)
2001025e:	b751                	j	200101e2 <_puts_r>

20010260 <strlen>:
strlen():
20010260:	87aa                	mv	a5,a0
20010262:	0785                	addi	a5,a5,1
20010264:	fff7c703          	lbu	a4,-1(a5)
20010268:	ff6d                	bnez	a4,20010262 <strlen+0x2>
2001026a:	40a78533          	sub	a0,a5,a0
2001026e:	157d                	addi	a0,a0,-1
20010270:	8082                	ret

20010272 <__fp_lock>:
__fp_lock():
20010272:	4501                	li	a0,0
20010274:	8082                	ret

20010276 <std>:
std():
20010276:	1141                	addi	sp,sp,-16
20010278:	c422                	sw	s0,8(sp)
2001027a:	c606                	sw	ra,12(sp)
2001027c:	842a                	mv	s0,a0
2001027e:	00b51623          	sh	a1,12(a0)
20010282:	00c51723          	sh	a2,14(a0)
20010286:	00052023          	sw	zero,0(a0)
2001028a:	00052223          	sw	zero,4(a0)
2001028e:	00052423          	sw	zero,8(a0)
20010292:	06052223          	sw	zero,100(a0)
20010296:	00052823          	sw	zero,16(a0)
2001029a:	00052a23          	sw	zero,20(a0)
2001029e:	00052c23          	sw	zero,24(a0)
200102a2:	4621                	li	a2,8
200102a4:	4581                	li	a1,0
200102a6:	05c50513          	addi	a0,a0,92
200102aa:	37d000ef          	jal	ra,20010e26 <memset>
200102ae:	00001797          	auipc	a5,0x1
200102b2:	fe078793          	addi	a5,a5,-32 # 2001128e <__sread>
200102b6:	d01c                	sw	a5,32(s0)
200102b8:	00001797          	auipc	a5,0x1
200102bc:	00c78793          	addi	a5,a5,12 # 200112c4 <__swrite>
200102c0:	d05c                	sw	a5,36(s0)
200102c2:	00001797          	auipc	a5,0x1
200102c6:	05078793          	addi	a5,a5,80 # 20011312 <__sseek>
200102ca:	d41c                	sw	a5,40(s0)
200102cc:	00001797          	auipc	a5,0x1
200102d0:	07c78793          	addi	a5,a5,124 # 20011348 <__sclose>
200102d4:	cc40                	sw	s0,28(s0)
200102d6:	d45c                	sw	a5,44(s0)
200102d8:	40b2                	lw	ra,12(sp)
200102da:	4422                	lw	s0,8(sp)
200102dc:	0141                	addi	sp,sp,16
200102de:	8082                	ret

200102e0 <_cleanup_r>:
_cleanup_r():
200102e0:	00001597          	auipc	a1,0x1
200102e4:	1b058593          	addi	a1,a1,432 # 20011490 <_fclose_r>
200102e8:	a175                	j	20010794 <_fwalk_reent>

200102ea <__fp_unlock>:
__fp_unlock():
200102ea:	4501                	li	a0,0
200102ec:	8082                	ret

200102ee <__sfmoreglue>:
__sfmoreglue():
200102ee:	1141                	addi	sp,sp,-16
200102f0:	c226                	sw	s1,4(sp)
200102f2:	06800613          	li	a2,104
200102f6:	fff58493          	addi	s1,a1,-1
200102fa:	02c484b3          	mul	s1,s1,a2
200102fe:	c04a                	sw	s2,0(sp)
20010300:	892e                	mv	s2,a1
20010302:	c422                	sw	s0,8(sp)
20010304:	c606                	sw	ra,12(sp)
20010306:	07448593          	addi	a1,s1,116
2001030a:	29dd                	jal	20010800 <_malloc_r>
2001030c:	842a                	mv	s0,a0
2001030e:	cd01                	beqz	a0,20010326 <__sfmoreglue+0x38>
20010310:	00052023          	sw	zero,0(a0)
20010314:	01252223          	sw	s2,4(a0)
20010318:	0531                	addi	a0,a0,12
2001031a:	c408                	sw	a0,8(s0)
2001031c:	06848613          	addi	a2,s1,104
20010320:	4581                	li	a1,0
20010322:	305000ef          	jal	ra,20010e26 <memset>
20010326:	8522                	mv	a0,s0
20010328:	40b2                	lw	ra,12(sp)
2001032a:	4422                	lw	s0,8(sp)
2001032c:	4492                	lw	s1,4(sp)
2001032e:	4902                	lw	s2,0(sp)
20010330:	0141                	addi	sp,sp,16
20010332:	8082                	ret

20010334 <_cleanup>:
_cleanup():
20010334:	83818793          	addi	a5,gp,-1992 # 800010c8 <_global_impure_ptr>
20010338:	4388                	lw	a0,0(a5)
2001033a:	b75d                	j	200102e0 <_cleanup_r>

2001033c <__sinit>:
__sinit():
2001033c:	5d1c                	lw	a5,56(a0)
2001033e:	e7a9                	bnez	a5,20010388 <__sinit+0x4c>
20010340:	1141                	addi	sp,sp,-16
20010342:	c606                	sw	ra,12(sp)
20010344:	c422                	sw	s0,8(sp)
20010346:	00000797          	auipc	a5,0x0
2001034a:	f9a78793          	addi	a5,a5,-102 # 200102e0 <_cleanup_r>
2001034e:	dd5c                	sw	a5,60(a0)
20010350:	478d                	li	a5,3
20010352:	2ef52223          	sw	a5,740(a0)
20010356:	2ec50793          	addi	a5,a0,748
2001035a:	842a                	mv	s0,a0
2001035c:	2ef52423          	sw	a5,744(a0)
20010360:	2e052023          	sw	zero,736(a0)
20010364:	4148                	lw	a0,4(a0)
20010366:	4601                	li	a2,0
20010368:	4591                	li	a1,4
2001036a:	3731                	jal	20010276 <std>
2001036c:	4408                	lw	a0,8(s0)
2001036e:	4605                	li	a2,1
20010370:	45a5                	li	a1,9
20010372:	3711                	jal	20010276 <std>
20010374:	4448                	lw	a0,12(s0)
20010376:	4609                	li	a2,2
20010378:	45c9                	li	a1,18
2001037a:	3df5                	jal	20010276 <std>
2001037c:	4785                	li	a5,1
2001037e:	dc1c                	sw	a5,56(s0)
20010380:	40b2                	lw	ra,12(sp)
20010382:	4422                	lw	s0,8(sp)
20010384:	0141                	addi	sp,sp,16
20010386:	8082                	ret
20010388:	8082                	ret

2001038a <__sfp>:
__sfp():
2001038a:	1141                	addi	sp,sp,-16
2001038c:	83818793          	addi	a5,gp,-1992 # 800010c8 <_global_impure_ptr>
20010390:	c226                	sw	s1,4(sp)
20010392:	4384                	lw	s1,0(a5)
20010394:	c04a                	sw	s2,0(sp)
20010396:	c606                	sw	ra,12(sp)
20010398:	5c9c                	lw	a5,56(s1)
2001039a:	c422                	sw	s0,8(sp)
2001039c:	892a                	mv	s2,a0
2001039e:	e399                	bnez	a5,200103a4 <__sfp+0x1a>
200103a0:	8526                	mv	a0,s1
200103a2:	3f69                	jal	2001033c <__sinit>
200103a4:	2e048493          	addi	s1,s1,736
200103a8:	4480                	lw	s0,8(s1)
200103aa:	40dc                	lw	a5,4(s1)
200103ac:	17fd                	addi	a5,a5,-1
200103ae:	0007d663          	bgez	a5,200103ba <__sfp+0x30>
200103b2:	409c                	lw	a5,0(s1)
200103b4:	cfb9                	beqz	a5,20010412 <__sfp+0x88>
200103b6:	4084                	lw	s1,0(s1)
200103b8:	bfc5                	j	200103a8 <__sfp+0x1e>
200103ba:	00c41703          	lh	a4,12(s0)
200103be:	e739                	bnez	a4,2001040c <__sfp+0x82>
200103c0:	77c1                	lui	a5,0xffff0
200103c2:	0785                	addi	a5,a5,1
200103c4:	06042223          	sw	zero,100(s0)
200103c8:	00042023          	sw	zero,0(s0)
200103cc:	00042223          	sw	zero,4(s0)
200103d0:	00042423          	sw	zero,8(s0)
200103d4:	c45c                	sw	a5,12(s0)
200103d6:	00042823          	sw	zero,16(s0)
200103da:	00042a23          	sw	zero,20(s0)
200103de:	00042c23          	sw	zero,24(s0)
200103e2:	4621                	li	a2,8
200103e4:	4581                	li	a1,0
200103e6:	05c40513          	addi	a0,s0,92
200103ea:	23d000ef          	jal	ra,20010e26 <memset>
200103ee:	02042823          	sw	zero,48(s0)
200103f2:	02042a23          	sw	zero,52(s0)
200103f6:	04042223          	sw	zero,68(s0)
200103fa:	04042423          	sw	zero,72(s0)
200103fe:	8522                	mv	a0,s0
20010400:	40b2                	lw	ra,12(sp)
20010402:	4422                	lw	s0,8(sp)
20010404:	4492                	lw	s1,4(sp)
20010406:	4902                	lw	s2,0(sp)
20010408:	0141                	addi	sp,sp,16
2001040a:	8082                	ret
2001040c:	06840413          	addi	s0,s0,104
20010410:	bf71                	j	200103ac <__sfp+0x22>
20010412:	4591                	li	a1,4
20010414:	854a                	mv	a0,s2
20010416:	3de1                	jal	200102ee <__sfmoreglue>
20010418:	c088                	sw	a0,0(s1)
2001041a:	fd51                	bnez	a0,200103b6 <__sfp+0x2c>
2001041c:	47b1                	li	a5,12
2001041e:	00f92023          	sw	a5,0(s2)
20010422:	4401                	li	s0,0
20010424:	bfe9                	j	200103fe <__sfp+0x74>

20010426 <__sfp_lock_acquire>:
__sfp_lock_acquire():
20010426:	8082                	ret

20010428 <__sfp_lock_release>:
__sfp_lock_release():
20010428:	8082                	ret

2001042a <__sinit_lock_acquire>:
__sinit_lock_acquire():
2001042a:	8082                	ret

2001042c <__sinit_lock_release>:
__sinit_lock_release():
2001042c:	8082                	ret

2001042e <__fp_lock_all>:
__fp_lock_all():
2001042e:	5fff1797          	auipc	a5,0x5fff1
20010432:	c6278793          	addi	a5,a5,-926 # 80001090 <_impure_ptr>
20010436:	4388                	lw	a0,0(a5)
20010438:	00000597          	auipc	a1,0x0
2001043c:	e3a58593          	addi	a1,a1,-454 # 20010272 <__fp_lock>
20010440:	accd                	j	20010732 <_fwalk>

20010442 <__fp_unlock_all>:
__fp_unlock_all():
20010442:	5fff1797          	auipc	a5,0x5fff1
20010446:	c4e78793          	addi	a5,a5,-946 # 80001090 <_impure_ptr>
2001044a:	4388                	lw	a0,0(a5)
2001044c:	00000597          	auipc	a1,0x0
20010450:	e9e58593          	addi	a1,a1,-354 # 200102ea <__fp_unlock>
20010454:	acf9                	j	20010732 <_fwalk>

20010456 <__sfvwrite_r>:
__sfvwrite_r():
20010456:	461c                	lw	a5,8(a2)
20010458:	e781                	bnez	a5,20010460 <__sfvwrite_r+0xa>
2001045a:	4781                	li	a5,0
2001045c:	853e                	mv	a0,a5
2001045e:	8082                	ret
20010460:	00c5d783          	lhu	a5,12(a1)
20010464:	715d                	addi	sp,sp,-80
20010466:	c4a2                	sw	s0,72(sp)
20010468:	c0ca                	sw	s2,64(sp)
2001046a:	da56                	sw	s5,52(sp)
2001046c:	c686                	sw	ra,76(sp)
2001046e:	c2a6                	sw	s1,68(sp)
20010470:	de4e                	sw	s3,60(sp)
20010472:	dc52                	sw	s4,56(sp)
20010474:	d85a                	sw	s6,48(sp)
20010476:	d65e                	sw	s7,44(sp)
20010478:	d462                	sw	s8,40(sp)
2001047a:	d266                	sw	s9,36(sp)
2001047c:	d06a                	sw	s10,32(sp)
2001047e:	ce6e                	sw	s11,28(sp)
20010480:	8ba1                	andi	a5,a5,8
20010482:	8ab2                	mv	s5,a2
20010484:	842e                	mv	s0,a1
20010486:	892a                	mv	s2,a0
20010488:	cfd9                	beqz	a5,20010526 <__sfvwrite_r+0xd0>
2001048a:	499c                	lw	a5,16(a1)
2001048c:	cfc9                	beqz	a5,20010526 <__sfvwrite_r+0xd0>
2001048e:	00c45783          	lhu	a5,12(s0)
20010492:	000aaa03          	lw	s4,0(s5)
20010496:	0027f713          	andi	a4,a5,2
2001049a:	0e071863          	bnez	a4,2001058a <__sfvwrite_r+0x134>
2001049e:	8b85                	andi	a5,a5,1
200104a0:	16078063          	beqz	a5,20010600 <__sfvwrite_r+0x1aa>
200104a4:	4b81                	li	s7,0
200104a6:	4501                	li	a0,0
200104a8:	4b01                	li	s6,0
200104aa:	4981                	li	s3,0
200104ac:	24098563          	beqz	s3,200106f6 <__sfvwrite_r+0x2a0>
200104b0:	ed01                	bnez	a0,200104c8 <__sfvwrite_r+0x72>
200104b2:	864e                	mv	a2,s3
200104b4:	45a9                	li	a1,10
200104b6:	855a                	mv	a0,s6
200104b8:	055000ef          	jal	ra,20010d0c <memchr>
200104bc:	00198b93          	addi	s7,s3,1
200104c0:	c501                	beqz	a0,200104c8 <__sfvwrite_r+0x72>
200104c2:	0505                	addi	a0,a0,1
200104c4:	41650bb3          	sub	s7,a0,s6
200104c8:	8c5e                	mv	s8,s7
200104ca:	0179f363          	bgeu	s3,s7,200104d0 <__sfvwrite_r+0x7a>
200104ce:	8c4e                	mv	s8,s3
200104d0:	4008                	lw	a0,0(s0)
200104d2:	481c                	lw	a5,16(s0)
200104d4:	4854                	lw	a3,20(s0)
200104d6:	22a7f763          	bgeu	a5,a0,20010704 <__sfvwrite_r+0x2ae>
200104da:	4404                	lw	s1,8(s0)
200104dc:	94b6                	add	s1,s1,a3
200104de:	2384d363          	bge	s1,s8,20010704 <__sfvwrite_r+0x2ae>
200104e2:	85da                	mv	a1,s6
200104e4:	8626                	mv	a2,s1
200104e6:	0f7000ef          	jal	ra,20010ddc <memmove>
200104ea:	401c                	lw	a5,0(s0)
200104ec:	85a2                	mv	a1,s0
200104ee:	854a                	mv	a0,s2
200104f0:	97a6                	add	a5,a5,s1
200104f2:	c01c                	sw	a5,0(s0)
200104f4:	18a010ef          	jal	ra,2001167e <_fflush_r>
200104f8:	0e051c63          	bnez	a0,200105f0 <__sfvwrite_r+0x19a>
200104fc:	409b8bb3          	sub	s7,s7,s1
20010500:	4505                	li	a0,1
20010502:	000b9763          	bnez	s7,20010510 <__sfvwrite_r+0xba>
20010506:	85a2                	mv	a1,s0
20010508:	854a                	mv	a0,s2
2001050a:	174010ef          	jal	ra,2001167e <_fflush_r>
2001050e:	e16d                	bnez	a0,200105f0 <__sfvwrite_r+0x19a>
20010510:	008aa783          	lw	a5,8(s5)
20010514:	9b26                	add	s6,s6,s1
20010516:	409989b3          	sub	s3,s3,s1
2001051a:	409784b3          	sub	s1,a5,s1
2001051e:	009aa423          	sw	s1,8(s5)
20010522:	f4c9                	bnez	s1,200104ac <__sfvwrite_r+0x56>
20010524:	a091                	j	20010568 <__sfvwrite_r+0x112>
20010526:	85a2                	mv	a1,s0
20010528:	854a                	mv	a0,s2
2001052a:	65b000ef          	jal	ra,20011384 <__swsetup_r>
2001052e:	57fd                	li	a5,-1
20010530:	dd39                	beqz	a0,2001048e <__sfvwrite_r+0x38>
20010532:	a825                	j	2001056a <__sfvwrite_r+0x114>
20010534:	000a2983          	lw	s3,0(s4)
20010538:	004a2483          	lw	s1,4(s4)
2001053c:	0a21                	addi	s4,s4,8
2001053e:	d8fd                	beqz	s1,20010534 <__sfvwrite_r+0xde>
20010540:	86a6                	mv	a3,s1
20010542:	009b7363          	bgeu	s6,s1,20010548 <__sfvwrite_r+0xf2>
20010546:	86da                	mv	a3,s6
20010548:	505c                	lw	a5,36(s0)
2001054a:	4c4c                	lw	a1,28(s0)
2001054c:	864e                	mv	a2,s3
2001054e:	854a                	mv	a0,s2
20010550:	9782                	jalr	a5
20010552:	08a05f63          	blez	a0,200105f0 <__sfvwrite_r+0x19a>
20010556:	008aa783          	lw	a5,8(s5)
2001055a:	99aa                	add	s3,s3,a0
2001055c:	8c89                	sub	s1,s1,a0
2001055e:	40a78533          	sub	a0,a5,a0
20010562:	00aaa423          	sw	a0,8(s5)
20010566:	fd61                	bnez	a0,2001053e <__sfvwrite_r+0xe8>
20010568:	4781                	li	a5,0
2001056a:	40b6                	lw	ra,76(sp)
2001056c:	4426                	lw	s0,72(sp)
2001056e:	4496                	lw	s1,68(sp)
20010570:	4906                	lw	s2,64(sp)
20010572:	59f2                	lw	s3,60(sp)
20010574:	5a62                	lw	s4,56(sp)
20010576:	5ad2                	lw	s5,52(sp)
20010578:	5b42                	lw	s6,48(sp)
2001057a:	5bb2                	lw	s7,44(sp)
2001057c:	5c22                	lw	s8,40(sp)
2001057e:	5c92                	lw	s9,36(sp)
20010580:	5d02                	lw	s10,32(sp)
20010582:	4df2                	lw	s11,28(sp)
20010584:	853e                	mv	a0,a5
20010586:	6161                	addi	sp,sp,80
20010588:	8082                	ret
2001058a:	80000b37          	lui	s6,0x80000
2001058e:	4981                	li	s3,0
20010590:	4481                	li	s1,0
20010592:	c00b4b13          	xori	s6,s6,-1024
20010596:	b765                	j	2001053e <__sfvwrite_r+0xe8>
20010598:	000a2b03          	lw	s6,0(s4)
2001059c:	004a2483          	lw	s1,4(s4)
200105a0:	0a21                	addi	s4,s4,8
200105a2:	d8fd                	beqz	s1,20010598 <__sfvwrite_r+0x142>
200105a4:	00c45703          	lhu	a4,12(s0)
200105a8:	441c                	lw	a5,8(s0)
200105aa:	4008                	lw	a0,0(s0)
200105ac:	20077693          	andi	a3,a4,512
200105b0:	0e068763          	beqz	a3,2001069e <__sfvwrite_r+0x248>
200105b4:	08f4e863          	bltu	s1,a5,20010644 <__sfvwrite_r+0x1ee>
200105b8:	48077693          	andi	a3,a4,1152
200105bc:	c6c1                	beqz	a3,20010644 <__sfvwrite_r+0x1ee>
200105be:	01442d83          	lw	s11,20(s0)
200105c2:	480c                	lw	a1,16(s0)
200105c4:	03bc8db3          	mul	s11,s9,s11
200105c8:	40b509b3          	sub	s3,a0,a1
200105cc:	00198793          	addi	a5,s3,1
200105d0:	97a6                	add	a5,a5,s1
200105d2:	03adcdb3          	div	s11,s11,s10
200105d6:	00fdf363          	bgeu	s11,a5,200105dc <__sfvwrite_r+0x186>
200105da:	8dbe                	mv	s11,a5
200105dc:	40077713          	andi	a4,a4,1024
200105e0:	cf51                	beqz	a4,2001067c <__sfvwrite_r+0x226>
200105e2:	85ee                	mv	a1,s11
200105e4:	854a                	mv	a0,s2
200105e6:	2c29                	jal	20010800 <_malloc_r>
200105e8:	e51d                	bnez	a0,20010616 <__sfvwrite_r+0x1c0>
200105ea:	47b1                	li	a5,12
200105ec:	00f92023          	sw	a5,0(s2)
200105f0:	00c45783          	lhu	a5,12(s0)
200105f4:	0407e793          	ori	a5,a5,64
200105f8:	00f41623          	sh	a5,12(s0)
200105fc:	57fd                	li	a5,-1
200105fe:	b7b5                	j	2001056a <__sfvwrite_r+0x114>
20010600:	80000bb7          	lui	s7,0x80000
20010604:	ffebcc13          	xori	s8,s7,-2
20010608:	4b01                	li	s6,0
2001060a:	4481                	li	s1,0
2001060c:	fffbcb93          	not	s7,s7
20010610:	4c8d                	li	s9,3
20010612:	4d09                	li	s10,2
20010614:	b779                	j	200105a2 <__sfvwrite_r+0x14c>
20010616:	480c                	lw	a1,16(s0)
20010618:	864e                	mv	a2,s3
2001061a:	c62a                	sw	a0,12(sp)
2001061c:	2729                	jal	20010d26 <memcpy>
2001061e:	00c45703          	lhu	a4,12(s0)
20010622:	47b2                	lw	a5,12(sp)
20010624:	b7f77713          	andi	a4,a4,-1153
20010628:	08076713          	ori	a4,a4,128
2001062c:	00e41623          	sh	a4,12(s0)
20010630:	c81c                	sw	a5,16(s0)
20010632:	01b42a23          	sw	s11,20(s0)
20010636:	97ce                	add	a5,a5,s3
20010638:	413d8db3          	sub	s11,s11,s3
2001063c:	c01c                	sw	a5,0(s0)
2001063e:	01b42423          	sw	s11,8(s0)
20010642:	87a6                	mv	a5,s1
20010644:	89a6                	mv	s3,s1
20010646:	00f4f363          	bgeu	s1,a5,2001064c <__sfvwrite_r+0x1f6>
2001064a:	87a6                	mv	a5,s1
2001064c:	4008                	lw	a0,0(s0)
2001064e:	863e                	mv	a2,a5
20010650:	85da                	mv	a1,s6
20010652:	c63e                	sw	a5,12(sp)
20010654:	2761                	jal	20010ddc <memmove>
20010656:	4418                	lw	a4,8(s0)
20010658:	47b2                	lw	a5,12(sp)
2001065a:	8f1d                	sub	a4,a4,a5
2001065c:	c418                	sw	a4,8(s0)
2001065e:	4018                	lw	a4,0(s0)
20010660:	97ba                	add	a5,a5,a4
20010662:	c01c                	sw	a5,0(s0)
20010664:	008aa783          	lw	a5,8(s5)
20010668:	9b4e                	add	s6,s6,s3
2001066a:	413484b3          	sub	s1,s1,s3
2001066e:	413789b3          	sub	s3,a5,s3
20010672:	013aa423          	sw	s3,8(s5)
20010676:	f20996e3          	bnez	s3,200105a2 <__sfvwrite_r+0x14c>
2001067a:	b5fd                	j	20010568 <__sfvwrite_r+0x112>
2001067c:	866e                	mv	a2,s11
2001067e:	854a                	mv	a0,s2
20010680:	053000ef          	jal	ra,20010ed2 <_realloc_r>
20010684:	87aa                	mv	a5,a0
20010686:	f54d                	bnez	a0,20010630 <__sfvwrite_r+0x1da>
20010688:	480c                	lw	a1,16(s0)
2001068a:	854a                	mv	a0,s2
2001068c:	10e010ef          	jal	ra,2001179a <_free_r>
20010690:	00c45783          	lhu	a5,12(s0)
20010694:	f7f7f793          	andi	a5,a5,-129
20010698:	00f41623          	sh	a5,12(s0)
2001069c:	b7b9                	j	200105ea <__sfvwrite_r+0x194>
2001069e:	4818                	lw	a4,16(s0)
200106a0:	00a76563          	bltu	a4,a0,200106aa <__sfvwrite_r+0x254>
200106a4:	4854                	lw	a3,20(s0)
200106a6:	02d4f763          	bgeu	s1,a3,200106d4 <__sfvwrite_r+0x27e>
200106aa:	89be                	mv	s3,a5
200106ac:	00f4f363          	bgeu	s1,a5,200106b2 <__sfvwrite_r+0x25c>
200106b0:	89a6                	mv	s3,s1
200106b2:	864e                	mv	a2,s3
200106b4:	85da                	mv	a1,s6
200106b6:	271d                	jal	20010ddc <memmove>
200106b8:	441c                	lw	a5,8(s0)
200106ba:	4018                	lw	a4,0(s0)
200106bc:	413787b3          	sub	a5,a5,s3
200106c0:	974e                	add	a4,a4,s3
200106c2:	c41c                	sw	a5,8(s0)
200106c4:	c018                	sw	a4,0(s0)
200106c6:	ffd9                	bnez	a5,20010664 <__sfvwrite_r+0x20e>
200106c8:	85a2                	mv	a1,s0
200106ca:	854a                	mv	a0,s2
200106cc:	7b3000ef          	jal	ra,2001167e <_fflush_r>
200106d0:	d951                	beqz	a0,20010664 <__sfvwrite_r+0x20e>
200106d2:	bf39                	j	200105f0 <__sfvwrite_r+0x19a>
200106d4:	87a6                	mv	a5,s1
200106d6:	009c7363          	bgeu	s8,s1,200106dc <__sfvwrite_r+0x286>
200106da:	87de                	mv	a5,s7
200106dc:	02d7c7b3          	div	a5,a5,a3
200106e0:	5058                	lw	a4,36(s0)
200106e2:	4c4c                	lw	a1,28(s0)
200106e4:	865a                	mv	a2,s6
200106e6:	854a                	mv	a0,s2
200106e8:	02d786b3          	mul	a3,a5,a3
200106ec:	9702                	jalr	a4
200106ee:	89aa                	mv	s3,a0
200106f0:	f6a04ae3          	bgtz	a0,20010664 <__sfvwrite_r+0x20e>
200106f4:	bdf5                	j	200105f0 <__sfvwrite_r+0x19a>
200106f6:	000a2b03          	lw	s6,0(s4)
200106fa:	004a2983          	lw	s3,4(s4)
200106fe:	4501                	li	a0,0
20010700:	0a21                	addi	s4,s4,8
20010702:	b36d                	j	200104ac <__sfvwrite_r+0x56>
20010704:	00dc4b63          	blt	s8,a3,2001071a <__sfvwrite_r+0x2c4>
20010708:	505c                	lw	a5,36(s0)
2001070a:	4c4c                	lw	a1,28(s0)
2001070c:	865a                	mv	a2,s6
2001070e:	854a                	mv	a0,s2
20010710:	9782                	jalr	a5
20010712:	84aa                	mv	s1,a0
20010714:	dea044e3          	bgtz	a0,200104fc <__sfvwrite_r+0xa6>
20010718:	bde1                	j	200105f0 <__sfvwrite_r+0x19a>
2001071a:	8662                	mv	a2,s8
2001071c:	85da                	mv	a1,s6
2001071e:	2d7d                	jal	20010ddc <memmove>
20010720:	441c                	lw	a5,8(s0)
20010722:	84e2                	mv	s1,s8
20010724:	418787b3          	sub	a5,a5,s8
20010728:	c41c                	sw	a5,8(s0)
2001072a:	401c                	lw	a5,0(s0)
2001072c:	97e2                	add	a5,a5,s8
2001072e:	c01c                	sw	a5,0(s0)
20010730:	b3f1                	j	200104fc <__sfvwrite_r+0xa6>

20010732 <_fwalk>:
_fwalk():
20010732:	7179                	addi	sp,sp,-48
20010734:	d422                	sw	s0,40(sp)
20010736:	d04a                	sw	s2,32(sp)
20010738:	cc52                	sw	s4,24(sp)
2001073a:	ca56                	sw	s5,20(sp)
2001073c:	d606                	sw	ra,44(sp)
2001073e:	d226                	sw	s1,36(sp)
20010740:	ce4e                	sw	s3,28(sp)
20010742:	2e050413          	addi	s0,a0,736
20010746:	4901                	li	s2,0
20010748:	4a05                	li	s4,1
2001074a:	5afd                	li	s5,-1
2001074c:	e819                	bnez	s0,20010762 <_fwalk+0x30>
2001074e:	50b2                	lw	ra,44(sp)
20010750:	5422                	lw	s0,40(sp)
20010752:	854a                	mv	a0,s2
20010754:	5492                	lw	s1,36(sp)
20010756:	5902                	lw	s2,32(sp)
20010758:	49f2                	lw	s3,28(sp)
2001075a:	4a62                	lw	s4,24(sp)
2001075c:	4ad2                	lw	s5,20(sp)
2001075e:	6145                	addi	sp,sp,48
20010760:	8082                	ret
20010762:	4404                	lw	s1,8(s0)
20010764:	00442983          	lw	s3,4(s0)
20010768:	19fd                	addi	s3,s3,-1
2001076a:	0009d463          	bgez	s3,20010772 <_fwalk+0x40>
2001076e:	4000                	lw	s0,0(s0)
20010770:	bff1                	j	2001074c <_fwalk+0x1a>
20010772:	00c4d783          	lhu	a5,12(s1)
20010776:	00fa7c63          	bgeu	s4,a5,2001078e <_fwalk+0x5c>
2001077a:	00e49783          	lh	a5,14(s1)
2001077e:	01578863          	beq	a5,s5,2001078e <_fwalk+0x5c>
20010782:	8526                	mv	a0,s1
20010784:	c62e                	sw	a1,12(sp)
20010786:	9582                	jalr	a1
20010788:	45b2                	lw	a1,12(sp)
2001078a:	00a96933          	or	s2,s2,a0
2001078e:	06848493          	addi	s1,s1,104
20010792:	bfd9                	j	20010768 <_fwalk+0x36>

20010794 <_fwalk_reent>:
_fwalk_reent():
20010794:	7179                	addi	sp,sp,-48
20010796:	d422                	sw	s0,40(sp)
20010798:	d04a                	sw	s2,32(sp)
2001079a:	cc52                	sw	s4,24(sp)
2001079c:	ca56                	sw	s5,20(sp)
2001079e:	c85a                	sw	s6,16(sp)
200107a0:	c65e                	sw	s7,12(sp)
200107a2:	d606                	sw	ra,44(sp)
200107a4:	d226                	sw	s1,36(sp)
200107a6:	ce4e                	sw	s3,28(sp)
200107a8:	8a2a                	mv	s4,a0
200107aa:	8aae                	mv	s5,a1
200107ac:	2e050413          	addi	s0,a0,736
200107b0:	4901                	li	s2,0
200107b2:	4b05                	li	s6,1
200107b4:	5bfd                	li	s7,-1
200107b6:	ec09                	bnez	s0,200107d0 <_fwalk_reent+0x3c>
200107b8:	50b2                	lw	ra,44(sp)
200107ba:	5422                	lw	s0,40(sp)
200107bc:	854a                	mv	a0,s2
200107be:	5492                	lw	s1,36(sp)
200107c0:	5902                	lw	s2,32(sp)
200107c2:	49f2                	lw	s3,28(sp)
200107c4:	4a62                	lw	s4,24(sp)
200107c6:	4ad2                	lw	s5,20(sp)
200107c8:	4b42                	lw	s6,16(sp)
200107ca:	4bb2                	lw	s7,12(sp)
200107cc:	6145                	addi	sp,sp,48
200107ce:	8082                	ret
200107d0:	4404                	lw	s1,8(s0)
200107d2:	00442983          	lw	s3,4(s0)
200107d6:	19fd                	addi	s3,s3,-1
200107d8:	0009d463          	bgez	s3,200107e0 <_fwalk_reent+0x4c>
200107dc:	4000                	lw	s0,0(s0)
200107de:	bfe1                	j	200107b6 <_fwalk_reent+0x22>
200107e0:	00c4d783          	lhu	a5,12(s1)
200107e4:	00fb7b63          	bgeu	s6,a5,200107fa <_fwalk_reent+0x66>
200107e8:	00e49783          	lh	a5,14(s1)
200107ec:	01778763          	beq	a5,s7,200107fa <_fwalk_reent+0x66>
200107f0:	85a6                	mv	a1,s1
200107f2:	8552                	mv	a0,s4
200107f4:	9a82                	jalr	s5
200107f6:	00a96933          	or	s2,s2,a0
200107fa:	06848493          	addi	s1,s1,104
200107fe:	bfe1                	j	200107d6 <_fwalk_reent+0x42>

20010800 <_malloc_r>:
_malloc_r():
20010800:	7179                	addi	sp,sp,-48
20010802:	d606                	sw	ra,44(sp)
20010804:	d422                	sw	s0,40(sp)
20010806:	d226                	sw	s1,36(sp)
20010808:	d04a                	sw	s2,32(sp)
2001080a:	ce4e                	sw	s3,28(sp)
2001080c:	cc52                	sw	s4,24(sp)
2001080e:	ca56                	sw	s5,20(sp)
20010810:	c85a                	sw	s6,16(sp)
20010812:	c65e                	sw	s7,12(sp)
20010814:	c462                	sw	s8,8(sp)
20010816:	c266                	sw	s9,4(sp)
20010818:	00b58793          	addi	a5,a1,11
2001081c:	4759                	li	a4,22
2001081e:	02f77663          	bgeu	a4,a5,2001084a <_malloc_r+0x4a>
20010822:	ff87f493          	andi	s1,a5,-8
20010826:	0204d363          	bgez	s1,2001084c <_malloc_r+0x4c>
2001082a:	47b1                	li	a5,12
2001082c:	c11c                	sw	a5,0(a0)
2001082e:	4501                	li	a0,0
20010830:	50b2                	lw	ra,44(sp)
20010832:	5422                	lw	s0,40(sp)
20010834:	5492                	lw	s1,36(sp)
20010836:	5902                	lw	s2,32(sp)
20010838:	49f2                	lw	s3,28(sp)
2001083a:	4a62                	lw	s4,24(sp)
2001083c:	4ad2                	lw	s5,20(sp)
2001083e:	4b42                	lw	s6,16(sp)
20010840:	4bb2                	lw	s7,12(sp)
20010842:	4c22                	lw	s8,8(sp)
20010844:	4c92                	lw	s9,4(sp)
20010846:	6145                	addi	sp,sp,48
20010848:	8082                	ret
2001084a:	44c1                	li	s1,16
2001084c:	fcb4efe3          	bltu	s1,a1,2001082a <_malloc_r+0x2a>
20010850:	892a                	mv	s2,a0
20010852:	2db5                	jal	20010ece <__malloc_lock>
20010854:	1f700793          	li	a5,503
20010858:	5fff0997          	auipc	s3,0x5fff0
2001085c:	bd098993          	addi	s3,s3,-1072 # 80000428 <__malloc_av_>
20010860:	0297ec63          	bltu	a5,s1,20010898 <_malloc_r+0x98>
20010864:	00848713          	addi	a4,s1,8
20010868:	974e                	add	a4,a4,s3
2001086a:	4340                	lw	s0,4(a4)
2001086c:	ff870693          	addi	a3,a4,-8 # 1ff8 <__heap_size+0x1bf8>
20010870:	0034d793          	srli	a5,s1,0x3
20010874:	00d41663          	bne	s0,a3,20010880 <_malloc_r+0x80>
20010878:	4740                	lw	s0,12(a4)
2001087a:	0789                	addi	a5,a5,2
2001087c:	04870c63          	beq	a4,s0,200108d4 <_malloc_r+0xd4>
20010880:	405c                	lw	a5,4(s0)
20010882:	4458                	lw	a4,12(s0)
20010884:	4414                	lw	a3,8(s0)
20010886:	9bf1                	andi	a5,a5,-4
20010888:	97a2                	add	a5,a5,s0
2001088a:	c6d8                	sw	a4,12(a3)
2001088c:	c714                	sw	a3,8(a4)
2001088e:	43d8                	lw	a4,4(a5)
20010890:	00176713          	ori	a4,a4,1
20010894:	c3d8                	sw	a4,4(a5)
20010896:	a051                	j	2001091a <_malloc_r+0x11a>
20010898:	0094d713          	srli	a4,s1,0x9
2001089c:	03f00793          	li	a5,63
200108a0:	cb01                	beqz	a4,200108b0 <_malloc_r+0xb0>
200108a2:	4791                	li	a5,4
200108a4:	08e7e063          	bltu	a5,a4,20010924 <_malloc_r+0x124>
200108a8:	0064d793          	srli	a5,s1,0x6
200108ac:	03878793          	addi	a5,a5,56
200108b0:	00178713          	addi	a4,a5,1
200108b4:	070e                	slli	a4,a4,0x3
200108b6:	974e                	add	a4,a4,s3
200108b8:	4340                	lw	s0,4(a4)
200108ba:	ff870593          	addi	a1,a4,-8
200108be:	453d                	li	a0,15
200108c0:	00b40963          	beq	s0,a1,200108d2 <_malloc_r+0xd2>
200108c4:	4058                	lw	a4,4(s0)
200108c6:	9b71                	andi	a4,a4,-4
200108c8:	40970633          	sub	a2,a4,s1
200108cc:	08c55f63          	bge	a0,a2,2001096a <_malloc_r+0x16a>
200108d0:	17fd                	addi	a5,a5,-1
200108d2:	0785                	addi	a5,a5,1
200108d4:	0109a403          	lw	s0,16(s3)
200108d8:	5fff0597          	auipc	a1,0x5fff0
200108dc:	b5858593          	addi	a1,a1,-1192 # 80000430 <__malloc_av_+0x8>
200108e0:	0eb40c63          	beq	s0,a1,200109d8 <_malloc_r+0x1d8>
200108e4:	4058                	lw	a4,4(s0)
200108e6:	46bd                	li	a3,15
200108e8:	9b71                	andi	a4,a4,-4
200108ea:	40970633          	sub	a2,a4,s1
200108ee:	08c6d963          	bge	a3,a2,20010980 <_malloc_r+0x180>
200108f2:	0014e793          	ori	a5,s1,1
200108f6:	c05c                	sw	a5,4(s0)
200108f8:	009406b3          	add	a3,s0,s1
200108fc:	5fff0797          	auipc	a5,0x5fff0
20010900:	b4d7a023          	sw	a3,-1216(a5) # 8000043c <__malloc_av_+0x14>
20010904:	5fff0797          	auipc	a5,0x5fff0
20010908:	b2d7aa23          	sw	a3,-1228(a5) # 80000438 <__malloc_av_+0x10>
2001090c:	00166793          	ori	a5,a2,1
20010910:	c6cc                	sw	a1,12(a3)
20010912:	c68c                	sw	a1,8(a3)
20010914:	c2dc                	sw	a5,4(a3)
20010916:	9722                	add	a4,a4,s0
20010918:	c310                	sw	a2,0(a4)
2001091a:	854a                	mv	a0,s2
2001091c:	2b55                	jal	20010ed0 <__malloc_unlock>
2001091e:	00840513          	addi	a0,s0,8
20010922:	b739                	j	20010830 <_malloc_r+0x30>
20010924:	47d1                	li	a5,20
20010926:	00e7e563          	bltu	a5,a4,20010930 <_malloc_r+0x130>
2001092a:	05b70793          	addi	a5,a4,91
2001092e:	b749                	j	200108b0 <_malloc_r+0xb0>
20010930:	05400793          	li	a5,84
20010934:	00e7e763          	bltu	a5,a4,20010942 <_malloc_r+0x142>
20010938:	00c4d793          	srli	a5,s1,0xc
2001093c:	06e78793          	addi	a5,a5,110
20010940:	bf85                	j	200108b0 <_malloc_r+0xb0>
20010942:	15400793          	li	a5,340
20010946:	00e7e763          	bltu	a5,a4,20010954 <_malloc_r+0x154>
2001094a:	00f4d793          	srli	a5,s1,0xf
2001094e:	07778793          	addi	a5,a5,119
20010952:	bfb9                	j	200108b0 <_malloc_r+0xb0>
20010954:	55400693          	li	a3,1364
20010958:	07e00793          	li	a5,126
2001095c:	f4e6eae3          	bltu	a3,a4,200108b0 <_malloc_r+0xb0>
20010960:	0124d793          	srli	a5,s1,0x12
20010964:	07c78793          	addi	a5,a5,124
20010968:	b7a1                	j	200108b0 <_malloc_r+0xb0>
2001096a:	4454                	lw	a3,12(s0)
2001096c:	00064863          	bltz	a2,2001097c <_malloc_r+0x17c>
20010970:	441c                	lw	a5,8(s0)
20010972:	c7d4                	sw	a3,12(a5)
20010974:	c69c                	sw	a5,8(a3)
20010976:	00e407b3          	add	a5,s0,a4
2001097a:	bf11                	j	2001088e <_malloc_r+0x8e>
2001097c:	8436                	mv	s0,a3
2001097e:	b789                	j	200108c0 <_malloc_r+0xc0>
20010980:	5fff0697          	auipc	a3,0x5fff0
20010984:	aab6ae23          	sw	a1,-1348(a3) # 8000043c <__malloc_av_+0x14>
20010988:	5fff0697          	auipc	a3,0x5fff0
2001098c:	aab6a823          	sw	a1,-1360(a3) # 80000438 <__malloc_av_+0x10>
20010990:	00064863          	bltz	a2,200109a0 <_malloc_r+0x1a0>
20010994:	9722                	add	a4,a4,s0
20010996:	435c                	lw	a5,4(a4)
20010998:	0017e793          	ori	a5,a5,1
2001099c:	c35c                	sw	a5,4(a4)
2001099e:	bfb5                	j	2001091a <_malloc_r+0x11a>
200109a0:	1ff00693          	li	a3,511
200109a4:	0049a803          	lw	a6,4(s3)
200109a8:	14e6e863          	bltu	a3,a4,20010af8 <_malloc_r+0x2f8>
200109ac:	830d                	srli	a4,a4,0x3
200109ae:	40275613          	srai	a2,a4,0x2
200109b2:	4685                	li	a3,1
200109b4:	0705                	addi	a4,a4,1
200109b6:	00c696b3          	sll	a3,a3,a2
200109ba:	070e                	slli	a4,a4,0x3
200109bc:	974e                	add	a4,a4,s3
200109be:	0106e6b3          	or	a3,a3,a6
200109c2:	5fff0617          	auipc	a2,0x5fff0
200109c6:	a6d62523          	sw	a3,-1430(a2) # 8000042c <__malloc_av_+0x4>
200109ca:	4314                	lw	a3,0(a4)
200109cc:	ff870613          	addi	a2,a4,-8
200109d0:	c450                	sw	a2,12(s0)
200109d2:	c414                	sw	a3,8(s0)
200109d4:	c300                	sw	s0,0(a4)
200109d6:	c6c0                	sw	s0,12(a3)
200109d8:	4027d713          	srai	a4,a5,0x2
200109dc:	4305                	li	t1,1
200109de:	00e31333          	sll	t1,t1,a4
200109e2:	0049a703          	lw	a4,4(s3)
200109e6:	04676e63          	bltu	a4,t1,20010a42 <_malloc_r+0x242>
200109ea:	006776b3          	and	a3,a4,t1
200109ee:	e699                	bnez	a3,200109fc <_malloc_r+0x1fc>
200109f0:	9bf1                	andi	a5,a5,-4
200109f2:	0306                	slli	t1,t1,0x1
200109f4:	006776b3          	and	a3,a4,t1
200109f8:	0791                	addi	a5,a5,4
200109fa:	dee5                	beqz	a3,200109f2 <_malloc_r+0x1f2>
200109fc:	4e3d                	li	t3,15
200109fe:	00379693          	slli	a3,a5,0x3
20010a02:	96ce                	add	a3,a3,s3
20010a04:	8836                	mv	a6,a3
20010a06:	853e                	mv	a0,a5
20010a08:	00c82403          	lw	s0,12(a6)
20010a0c:	19041363          	bne	s0,a6,20010b92 <_malloc_r+0x392>
20010a10:	0505                	addi	a0,a0,1
20010a12:	00357713          	andi	a4,a0,3
20010a16:	0821                	addi	a6,a6,8
20010a18:	fb65                	bnez	a4,20010a08 <_malloc_r+0x208>
20010a1a:	0037f713          	andi	a4,a5,3
20010a1e:	1c071763          	bnez	a4,20010bec <_malloc_r+0x3ec>
20010a22:	0049a703          	lw	a4,4(s3)
20010a26:	fff34793          	not	a5,t1
20010a2a:	8ff9                	and	a5,a5,a4
20010a2c:	5fff0717          	auipc	a4,0x5fff0
20010a30:	a0f72023          	sw	a5,-1536(a4) # 8000042c <__malloc_av_+0x4>
20010a34:	0049a703          	lw	a4,4(s3)
20010a38:	0306                	slli	t1,t1,0x1
20010a3a:	00676463          	bltu	a4,t1,20010a42 <_malloc_r+0x242>
20010a3e:	1c031363          	bnez	t1,20010c04 <_malloc_r+0x404>
20010a42:	0089ab83          	lw	s7,8(s3)
20010a46:	004ba403          	lw	s0,4(s7) # 80000004 <metal_segment_heap_target_end+0xffffc004>
20010a4a:	ffc47a93          	andi	s5,s0,-4
20010a4e:	009ae763          	bltu	s5,s1,20010a5c <_malloc_r+0x25c>
20010a52:	409a8733          	sub	a4,s5,s1
20010a56:	47bd                	li	a5,15
20010a58:	28e7ce63          	blt	a5,a4,20010cf4 <_malloc_r+0x4f4>
20010a5c:	5fff0797          	auipc	a5,0x5fff0
20010a60:	67878793          	addi	a5,a5,1656 # 800010d4 <__malloc_top_pad>
20010a64:	5fff0717          	auipc	a4,0x5fff0
20010a68:	63070713          	addi	a4,a4,1584 # 80001094 <__malloc_sbrk_base>
20010a6c:	4380                	lw	s0,0(a5)
20010a6e:	4314                	lw	a3,0(a4)
20010a70:	57fd                	li	a5,-1
20010a72:	015b8c33          	add	s8,s7,s5
20010a76:	9426                	add	s0,s0,s1
20010a78:	8a3a                	mv	s4,a4
20010a7a:	18f69763          	bne	a3,a5,20010c08 <_malloc_r+0x408>
20010a7e:	0441                	addi	s0,s0,16
20010a80:	85a2                	mv	a1,s0
20010a82:	854a                	mv	a0,s2
20010a84:	7d8000ef          	jal	ra,2001125c <_sbrk_r>
20010a88:	57fd                	li	a5,-1
20010a8a:	8b2a                	mv	s6,a0
20010a8c:	20f50863          	beq	a0,a5,20010c9c <_malloc_r+0x49c>
20010a90:	01857463          	bgeu	a0,s8,20010a98 <_malloc_r+0x298>
20010a94:	213b9463          	bne	s7,s3,20010c9c <_malloc_r+0x49c>
20010a98:	5fff0c97          	auipc	s9,0x5fff0
20010a9c:	640c8c93          	addi	s9,s9,1600 # 800010d8 <__malloc_current_mallinfo>
20010aa0:	000ca703          	lw	a4,0(s9)
20010aa4:	9722                	add	a4,a4,s0
20010aa6:	5fff0797          	auipc	a5,0x5fff0
20010aaa:	62e7a923          	sw	a4,1586(a5) # 800010d8 <__malloc_current_mallinfo>
20010aae:	176c1363          	bne	s8,s6,20010c14 <_malloc_r+0x414>
20010ab2:	014c1793          	slli	a5,s8,0x14
20010ab6:	14079f63          	bnez	a5,20010c14 <_malloc_r+0x414>
20010aba:	0089a783          	lw	a5,8(s3)
20010abe:	9456                	add	s0,s0,s5
20010ac0:	00146413          	ori	s0,s0,1
20010ac4:	c3c0                	sw	s0,4(a5)
20010ac6:	5fff0717          	auipc	a4,0x5fff0
20010aca:	60a70713          	addi	a4,a4,1546 # 800010d0 <__malloc_max_sbrked_mem>
20010ace:	000ca783          	lw	a5,0(s9)
20010ad2:	4318                	lw	a4,0(a4)
20010ad4:	00f77663          	bgeu	a4,a5,20010ae0 <_malloc_r+0x2e0>
20010ad8:	5fff0717          	auipc	a4,0x5fff0
20010adc:	5ef72c23          	sw	a5,1528(a4) # 800010d0 <__malloc_max_sbrked_mem>
20010ae0:	5fff0717          	auipc	a4,0x5fff0
20010ae4:	5ec70713          	addi	a4,a4,1516 # 800010cc <__malloc_max_total_mem>
20010ae8:	4318                	lw	a4,0(a4)
20010aea:	1af77963          	bgeu	a4,a5,20010c9c <_malloc_r+0x49c>
20010aee:	5fff0717          	auipc	a4,0x5fff0
20010af2:	5cf72f23          	sw	a5,1502(a4) # 800010cc <__malloc_max_total_mem>
20010af6:	a25d                	j	20010c9c <_malloc_r+0x49c>
20010af8:	00975613          	srli	a2,a4,0x9
20010afc:	4691                	li	a3,4
20010afe:	02c6ee63          	bltu	a3,a2,20010b3a <_malloc_r+0x33a>
20010b02:	00675693          	srli	a3,a4,0x6
20010b06:	03868693          	addi	a3,a3,56
20010b0a:	00168613          	addi	a2,a3,1
20010b0e:	060e                	slli	a2,a2,0x3
20010b10:	964e                	add	a2,a2,s3
20010b12:	ff860513          	addi	a0,a2,-8
20010b16:	4210                	lw	a2,0(a2)
20010b18:	06c51763          	bne	a0,a2,20010b86 <_malloc_r+0x386>
20010b1c:	4705                	li	a4,1
20010b1e:	8689                	srai	a3,a3,0x2
20010b20:	00d716b3          	sll	a3,a4,a3
20010b24:	0106e6b3          	or	a3,a3,a6
20010b28:	5fff0717          	auipc	a4,0x5fff0
20010b2c:	90d72223          	sw	a3,-1788(a4) # 8000042c <__malloc_av_+0x4>
20010b30:	c448                	sw	a0,12(s0)
20010b32:	c410                	sw	a2,8(s0)
20010b34:	c500                	sw	s0,8(a0)
20010b36:	c640                	sw	s0,12(a2)
20010b38:	b545                	j	200109d8 <_malloc_r+0x1d8>
20010b3a:	46d1                	li	a3,20
20010b3c:	00c6e563          	bltu	a3,a2,20010b46 <_malloc_r+0x346>
20010b40:	05b60693          	addi	a3,a2,91
20010b44:	b7d9                	j	20010b0a <_malloc_r+0x30a>
20010b46:	05400693          	li	a3,84
20010b4a:	00c6e763          	bltu	a3,a2,20010b58 <_malloc_r+0x358>
20010b4e:	00c75693          	srli	a3,a4,0xc
20010b52:	06e68693          	addi	a3,a3,110
20010b56:	bf55                	j	20010b0a <_malloc_r+0x30a>
20010b58:	15400693          	li	a3,340
20010b5c:	00c6e763          	bltu	a3,a2,20010b6a <_malloc_r+0x36a>
20010b60:	00f75693          	srli	a3,a4,0xf
20010b64:	07768693          	addi	a3,a3,119
20010b68:	b74d                	j	20010b0a <_malloc_r+0x30a>
20010b6a:	55400513          	li	a0,1364
20010b6e:	07e00693          	li	a3,126
20010b72:	f8c56ce3          	bltu	a0,a2,20010b0a <_malloc_r+0x30a>
20010b76:	01275693          	srli	a3,a4,0x12
20010b7a:	07c68693          	addi	a3,a3,124
20010b7e:	b771                	j	20010b0a <_malloc_r+0x30a>
20010b80:	4610                	lw	a2,8(a2)
20010b82:	00c50663          	beq	a0,a2,20010b8e <_malloc_r+0x38e>
20010b86:	4254                	lw	a3,4(a2)
20010b88:	9af1                	andi	a3,a3,-4
20010b8a:	fed76be3          	bltu	a4,a3,20010b80 <_malloc_r+0x380>
20010b8e:	4648                	lw	a0,12(a2)
20010b90:	b745                	j	20010b30 <_malloc_r+0x330>
20010b92:	4058                	lw	a4,4(s0)
20010b94:	4450                	lw	a2,12(s0)
20010b96:	9b71                	andi	a4,a4,-4
20010b98:	409708b3          	sub	a7,a4,s1
20010b9c:	031e5b63          	bge	t3,a7,20010bd2 <_malloc_r+0x3d2>
20010ba0:	0014e793          	ori	a5,s1,1
20010ba4:	c05c                	sw	a5,4(s0)
20010ba6:	441c                	lw	a5,8(s0)
20010ba8:	009406b3          	add	a3,s0,s1
20010bac:	9722                	add	a4,a4,s0
20010bae:	c7d0                	sw	a2,12(a5)
20010bb0:	c61c                	sw	a5,8(a2)
20010bb2:	5fff0797          	auipc	a5,0x5fff0
20010bb6:	88d7a523          	sw	a3,-1910(a5) # 8000043c <__malloc_av_+0x14>
20010bba:	5fff0797          	auipc	a5,0x5fff0
20010bbe:	86d7af23          	sw	a3,-1922(a5) # 80000438 <__malloc_av_+0x10>
20010bc2:	0018e793          	ori	a5,a7,1
20010bc6:	c6cc                	sw	a1,12(a3)
20010bc8:	c68c                	sw	a1,8(a3)
20010bca:	c2dc                	sw	a5,4(a3)
20010bcc:	01172023          	sw	a7,0(a4)
20010bd0:	b3a9                	j	2001091a <_malloc_r+0x11a>
20010bd2:	0008cb63          	bltz	a7,20010be8 <_malloc_r+0x3e8>
20010bd6:	9722                	add	a4,a4,s0
20010bd8:	435c                	lw	a5,4(a4)
20010bda:	0017e793          	ori	a5,a5,1
20010bde:	c35c                	sw	a5,4(a4)
20010be0:	441c                	lw	a5,8(s0)
20010be2:	c7d0                	sw	a2,12(a5)
20010be4:	c61c                	sw	a5,8(a2)
20010be6:	bb15                	j	2001091a <_malloc_r+0x11a>
20010be8:	8432                	mv	s0,a2
20010bea:	b50d                	j	20010a0c <_malloc_r+0x20c>
20010bec:	16e1                	addi	a3,a3,-8
20010bee:	4698                	lw	a4,8(a3)
20010bf0:	17fd                	addi	a5,a5,-1
20010bf2:	e2d704e3          	beq	a4,a3,20010a1a <_malloc_r+0x21a>
20010bf6:	bd3d                	j	20010a34 <_malloc_r+0x234>
20010bf8:	0791                	addi	a5,a5,4
20010bfa:	0306                	slli	t1,t1,0x1
20010bfc:	006776b3          	and	a3,a4,t1
20010c00:	dee5                	beqz	a3,20010bf8 <_malloc_r+0x3f8>
20010c02:	bbf5                	j	200109fe <_malloc_r+0x1fe>
20010c04:	87aa                	mv	a5,a0
20010c06:	bfdd                	j	20010bfc <_malloc_r+0x3fc>
20010c08:	6705                	lui	a4,0x1
20010c0a:	073d                	addi	a4,a4,15
20010c0c:	943a                	add	s0,s0,a4
20010c0e:	77fd                	lui	a5,0xfffff
20010c10:	8c7d                	and	s0,s0,a5
20010c12:	b5bd                	j	20010a80 <_malloc_r+0x280>
20010c14:	000a2683          	lw	a3,0(s4)
20010c18:	57fd                	li	a5,-1
20010c1a:	08f69f63          	bne	a3,a5,20010cb8 <_malloc_r+0x4b8>
20010c1e:	5fff0797          	auipc	a5,0x5fff0
20010c22:	4767ab23          	sw	s6,1142(a5) # 80001094 <__malloc_sbrk_base>
20010c26:	007b7c13          	andi	s8,s6,7
20010c2a:	4781                	li	a5,0
20010c2c:	000c0663          	beqz	s8,20010c38 <_malloc_r+0x438>
20010c30:	47a1                	li	a5,8
20010c32:	418787b3          	sub	a5,a5,s8
20010c36:	9b3e                	add	s6,s6,a5
20010c38:	6505                	lui	a0,0x1
20010c3a:	00a78a33          	add	s4,a5,a0
20010c3e:	945a                	add	s0,s0,s6
20010c40:	157d                	addi	a0,a0,-1
20010c42:	00a477b3          	and	a5,s0,a0
20010c46:	40fa0a33          	sub	s4,s4,a5
20010c4a:	00aa7a33          	and	s4,s4,a0
20010c4e:	85d2                	mv	a1,s4
20010c50:	854a                	mv	a0,s2
20010c52:	2529                	jal	2001125c <_sbrk_r>
20010c54:	57fd                	li	a5,-1
20010c56:	00f51963          	bne	a0,a5,20010c68 <_malloc_r+0x468>
20010c5a:	8522                	mv	a0,s0
20010c5c:	000c0563          	beqz	s8,20010c66 <_malloc_r+0x466>
20010c60:	ff8c0513          	addi	a0,s8,-8
20010c64:	9522                	add	a0,a0,s0
20010c66:	4a01                	li	s4,0
20010c68:	000ca783          	lw	a5,0(s9)
20010c6c:	41650533          	sub	a0,a0,s6
20010c70:	97d2                	add	a5,a5,s4
20010c72:	9a2a                	add	s4,s4,a0
20010c74:	5fff0717          	auipc	a4,0x5fff0
20010c78:	46f72223          	sw	a5,1124(a4) # 800010d8 <__malloc_current_mallinfo>
20010c7c:	001a6a13          	ori	s4,s4,1
20010c80:	5ffef797          	auipc	a5,0x5ffef
20010c84:	7b67a823          	sw	s6,1968(a5) # 80000430 <__malloc_av_+0x8>
20010c88:	014b2223          	sw	s4,4(s6) # 80000004 <metal_segment_heap_target_end+0xffffc004>
20010c8c:	e33b8de3          	beq	s7,s3,20010ac6 <_malloc_r+0x2c6>
20010c90:	473d                	li	a4,15
20010c92:	03576b63          	bltu	a4,s5,20010cc8 <_malloc_r+0x4c8>
20010c96:	4785                	li	a5,1
20010c98:	00fb2223          	sw	a5,4(s6)
20010c9c:	0089a783          	lw	a5,8(s3)
20010ca0:	43dc                	lw	a5,4(a5)
20010ca2:	9bf1                	andi	a5,a5,-4
20010ca4:	40978733          	sub	a4,a5,s1
20010ca8:	0097e563          	bltu	a5,s1,20010cb2 <_malloc_r+0x4b2>
20010cac:	47bd                	li	a5,15
20010cae:	04e7c363          	blt	a5,a4,20010cf4 <_malloc_r+0x4f4>
20010cb2:	854a                	mv	a0,s2
20010cb4:	2c31                	jal	20010ed0 <__malloc_unlock>
20010cb6:	bea5                	j	2001082e <_malloc_r+0x2e>
20010cb8:	418b07b3          	sub	a5,s6,s8
20010cbc:	97ba                	add	a5,a5,a4
20010cbe:	5fff0717          	auipc	a4,0x5fff0
20010cc2:	40f72d23          	sw	a5,1050(a4) # 800010d8 <__malloc_current_mallinfo>
20010cc6:	b785                	j	20010c26 <_malloc_r+0x426>
20010cc8:	004ba783          	lw	a5,4(s7)
20010ccc:	ff4a8413          	addi	s0,s5,-12
20010cd0:	9861                	andi	s0,s0,-8
20010cd2:	8b85                	andi	a5,a5,1
20010cd4:	8fc1                	or	a5,a5,s0
20010cd6:	00fba223          	sw	a5,4(s7)
20010cda:	4695                	li	a3,5
20010cdc:	008b87b3          	add	a5,s7,s0
20010ce0:	c3d4                	sw	a3,4(a5)
20010ce2:	c794                	sw	a3,8(a5)
20010ce4:	de8771e3          	bgeu	a4,s0,20010ac6 <_malloc_r+0x2c6>
20010ce8:	008b8593          	addi	a1,s7,8
20010cec:	854a                	mv	a0,s2
20010cee:	2ad000ef          	jal	ra,2001179a <_free_r>
20010cf2:	bbd1                	j	20010ac6 <_malloc_r+0x2c6>
20010cf4:	0089a403          	lw	s0,8(s3)
20010cf8:	0014e793          	ori	a5,s1,1
20010cfc:	c05c                	sw	a5,4(s0)
20010cfe:	009407b3          	add	a5,s0,s1
20010d02:	5ffef697          	auipc	a3,0x5ffef
20010d06:	72f6a723          	sw	a5,1838(a3) # 80000430 <__malloc_av_+0x8>
20010d0a:	b659                	j	20010890 <_malloc_r+0x90>

20010d0c <memchr>:
memchr():
20010d0c:	0ff5f593          	andi	a1,a1,255
20010d10:	962a                	add	a2,a2,a0
20010d12:	00c51463          	bne	a0,a2,20010d1a <memchr+0xe>
20010d16:	4501                	li	a0,0
20010d18:	8082                	ret
20010d1a:	00054783          	lbu	a5,0(a0) # 1000 <__heap_size+0xc00>
20010d1e:	feb78de3          	beq	a5,a1,20010d18 <memchr+0xc>
20010d22:	0505                	addi	a0,a0,1
20010d24:	b7fd                	j	20010d12 <memchr+0x6>

20010d26 <memcpy>:
memcpy():
20010d26:	00a5c7b3          	xor	a5,a1,a0
20010d2a:	8b8d                	andi	a5,a5,3
20010d2c:	00c50733          	add	a4,a0,a2
20010d30:	e781                	bnez	a5,20010d38 <memcpy+0x12>
20010d32:	478d                	li	a5,3
20010d34:	00c7ee63          	bltu	a5,a2,20010d50 <memcpy+0x2a>
20010d38:	87aa                	mv	a5,a0
20010d3a:	0ae57063          	bgeu	a0,a4,20010dda <memcpy+0xb4>
20010d3e:	0005c683          	lbu	a3,0(a1)
20010d42:	0785                	addi	a5,a5,1
20010d44:	0585                	addi	a1,a1,1
20010d46:	fed78fa3          	sb	a3,-1(a5)
20010d4a:	fee7eae3          	bltu	a5,a4,20010d3e <memcpy+0x18>
20010d4e:	8082                	ret
20010d50:	00357693          	andi	a3,a0,3
20010d54:	87aa                	mv	a5,a0
20010d56:	ca91                	beqz	a3,20010d6a <memcpy+0x44>
20010d58:	0005c683          	lbu	a3,0(a1)
20010d5c:	0785                	addi	a5,a5,1
20010d5e:	0585                	addi	a1,a1,1
20010d60:	fed78fa3          	sb	a3,-1(a5)
20010d64:	0037f693          	andi	a3,a5,3
20010d68:	b7fd                	j	20010d56 <memcpy+0x30>
20010d6a:	ffc77693          	andi	a3,a4,-4
20010d6e:	fe068613          	addi	a2,a3,-32
20010d72:	06c7f063          	bgeu	a5,a2,20010dd2 <memcpy+0xac>
20010d76:	0005a383          	lw	t2,0(a1)
20010d7a:	0045a283          	lw	t0,4(a1)
20010d7e:	0085af83          	lw	t6,8(a1)
20010d82:	00c5af03          	lw	t5,12(a1)
20010d86:	0105ae83          	lw	t4,16(a1)
20010d8a:	0145ae03          	lw	t3,20(a1)
20010d8e:	0185a303          	lw	t1,24(a1)
20010d92:	01c5a883          	lw	a7,28(a1)
20010d96:	02458593          	addi	a1,a1,36
20010d9a:	0077a023          	sw	t2,0(a5)
20010d9e:	ffc5a803          	lw	a6,-4(a1)
20010da2:	0057a223          	sw	t0,4(a5)
20010da6:	01f7a423          	sw	t6,8(a5)
20010daa:	01e7a623          	sw	t5,12(a5)
20010dae:	01d7a823          	sw	t4,16(a5)
20010db2:	01c7aa23          	sw	t3,20(a5)
20010db6:	0067ac23          	sw	t1,24(a5)
20010dba:	0117ae23          	sw	a7,28(a5)
20010dbe:	02478793          	addi	a5,a5,36
20010dc2:	ff07ae23          	sw	a6,-4(a5)
20010dc6:	b775                	j	20010d72 <memcpy+0x4c>
20010dc8:	4190                	lw	a2,0(a1)
20010dca:	0791                	addi	a5,a5,4
20010dcc:	0591                	addi	a1,a1,4
20010dce:	fec7ae23          	sw	a2,-4(a5)
20010dd2:	fed7ebe3          	bltu	a5,a3,20010dc8 <memcpy+0xa2>
20010dd6:	f6e7e4e3          	bltu	a5,a4,20010d3e <memcpy+0x18>
20010dda:	8082                	ret

20010ddc <memmove>:
memmove():
20010ddc:	04a5f363          	bgeu	a1,a0,20010e22 <memmove+0x46>
20010de0:	00c586b3          	add	a3,a1,a2
20010de4:	02d57f63          	bgeu	a0,a3,20010e22 <memmove+0x46>
20010de8:	fff64593          	not	a1,a2
20010dec:	4781                	li	a5,0
20010dee:	17fd                	addi	a5,a5,-1
20010df0:	00f59363          	bne	a1,a5,20010df6 <memmove+0x1a>
20010df4:	8082                	ret
20010df6:	00f68733          	add	a4,a3,a5
20010dfa:	00074803          	lbu	a6,0(a4)
20010dfe:	00c78733          	add	a4,a5,a2
20010e02:	972a                	add	a4,a4,a0
20010e04:	01070023          	sb	a6,0(a4)
20010e08:	b7dd                	j	20010dee <memmove+0x12>
20010e0a:	00f58733          	add	a4,a1,a5
20010e0e:	00074683          	lbu	a3,0(a4)
20010e12:	00f50733          	add	a4,a0,a5
20010e16:	0785                	addi	a5,a5,1
20010e18:	00d70023          	sb	a3,0(a4)
20010e1c:	fef617e3          	bne	a2,a5,20010e0a <memmove+0x2e>
20010e20:	8082                	ret
20010e22:	4781                	li	a5,0
20010e24:	bfe5                	j	20010e1c <memmove+0x40>

20010e26 <memset>:
memset():
20010e26:	433d                	li	t1,15
20010e28:	872a                	mv	a4,a0
20010e2a:	02c37363          	bgeu	t1,a2,20010e50 <memset+0x2a>
20010e2e:	00f77793          	andi	a5,a4,15
20010e32:	efbd                	bnez	a5,20010eb0 <memset+0x8a>
20010e34:	e5ad                	bnez	a1,20010e9e <memset+0x78>
20010e36:	ff067693          	andi	a3,a2,-16
20010e3a:	8a3d                	andi	a2,a2,15
20010e3c:	96ba                	add	a3,a3,a4
20010e3e:	c30c                	sw	a1,0(a4)
20010e40:	c34c                	sw	a1,4(a4)
20010e42:	c70c                	sw	a1,8(a4)
20010e44:	c74c                	sw	a1,12(a4)
20010e46:	0741                	addi	a4,a4,16
20010e48:	fed76be3          	bltu	a4,a3,20010e3e <memset+0x18>
20010e4c:	e211                	bnez	a2,20010e50 <memset+0x2a>
20010e4e:	8082                	ret
20010e50:	40c306b3          	sub	a3,t1,a2
20010e54:	068a                	slli	a3,a3,0x2
20010e56:	00000297          	auipc	t0,0x0
20010e5a:	9696                	add	a3,a3,t0
20010e5c:	00a68067          	jr	10(a3)
20010e60:	00b70723          	sb	a1,14(a4)
20010e64:	00b706a3          	sb	a1,13(a4)
20010e68:	00b70623          	sb	a1,12(a4)
20010e6c:	00b705a3          	sb	a1,11(a4)
20010e70:	00b70523          	sb	a1,10(a4)
20010e74:	00b704a3          	sb	a1,9(a4)
20010e78:	00b70423          	sb	a1,8(a4)
20010e7c:	00b703a3          	sb	a1,7(a4)
20010e80:	00b70323          	sb	a1,6(a4)
20010e84:	00b702a3          	sb	a1,5(a4)
20010e88:	00b70223          	sb	a1,4(a4)
20010e8c:	00b701a3          	sb	a1,3(a4)
20010e90:	00b70123          	sb	a1,2(a4)
20010e94:	00b700a3          	sb	a1,1(a4)
20010e98:	00b70023          	sb	a1,0(a4)
20010e9c:	8082                	ret
20010e9e:	0ff5f593          	andi	a1,a1,255
20010ea2:	00859693          	slli	a3,a1,0x8
20010ea6:	8dd5                	or	a1,a1,a3
20010ea8:	01059693          	slli	a3,a1,0x10
20010eac:	8dd5                	or	a1,a1,a3
20010eae:	b761                	j	20010e36 <memset+0x10>
20010eb0:	00279693          	slli	a3,a5,0x2
20010eb4:	00000297          	auipc	t0,0x0
20010eb8:	9696                	add	a3,a3,t0
20010eba:	8286                	mv	t0,ra
20010ebc:	fa8680e7          	jalr	-88(a3)
20010ec0:	8096                	mv	ra,t0
20010ec2:	17c1                	addi	a5,a5,-16
20010ec4:	8f1d                	sub	a4,a4,a5
20010ec6:	963e                	add	a2,a2,a5
20010ec8:	f8c374e3          	bgeu	t1,a2,20010e50 <memset+0x2a>
20010ecc:	b7a5                	j	20010e34 <memset+0xe>

20010ece <__malloc_lock>:
__malloc_lock():
20010ece:	8082                	ret

20010ed0 <__malloc_unlock>:
__malloc_unlock():
20010ed0:	8082                	ret

20010ed2 <_realloc_r>:
_realloc_r():
20010ed2:	7139                	addi	sp,sp,-64
20010ed4:	dc22                	sw	s0,56(sp)
20010ed6:	de06                	sw	ra,60(sp)
20010ed8:	842e                	mv	s0,a1
20010eda:	da26                	sw	s1,52(sp)
20010edc:	d84a                	sw	s2,48(sp)
20010ede:	d64e                	sw	s3,44(sp)
20010ee0:	d452                	sw	s4,40(sp)
20010ee2:	d256                	sw	s5,36(sp)
20010ee4:	d05a                	sw	s6,32(sp)
20010ee6:	ce5e                	sw	s7,28(sp)
20010ee8:	85b2                	mv	a1,a2
20010eea:	ec01                	bnez	s0,20010f02 <_realloc_r+0x30>
20010eec:	5462                	lw	s0,56(sp)
20010eee:	50f2                	lw	ra,60(sp)
20010ef0:	54d2                	lw	s1,52(sp)
20010ef2:	5942                	lw	s2,48(sp)
20010ef4:	59b2                	lw	s3,44(sp)
20010ef6:	5a22                	lw	s4,40(sp)
20010ef8:	5a92                	lw	s5,36(sp)
20010efa:	5b02                	lw	s6,32(sp)
20010efc:	4bf2                	lw	s7,28(sp)
20010efe:	6121                	addi	sp,sp,64
20010f00:	b201                	j	20010800 <_malloc_r>
20010f02:	8aaa                	mv	s5,a0
20010f04:	c632                	sw	a2,12(sp)
20010f06:	37e1                	jal	20010ece <__malloc_lock>
20010f08:	45b2                	lw	a1,12(sp)
20010f0a:	47d9                	li	a5,22
20010f0c:	00b58993          	addi	s3,a1,11
20010f10:	0337f663          	bgeu	a5,s3,20010f3c <_realloc_r+0x6a>
20010f14:	ff89fb13          	andi	s6,s3,-8
20010f18:	020b5363          	bgez	s6,20010f3e <_realloc_r+0x6c>
20010f1c:	47b1                	li	a5,12
20010f1e:	00faa023          	sw	a5,0(s5)
20010f22:	4a01                	li	s4,0
20010f24:	50f2                	lw	ra,60(sp)
20010f26:	5462                	lw	s0,56(sp)
20010f28:	8552                	mv	a0,s4
20010f2a:	54d2                	lw	s1,52(sp)
20010f2c:	5942                	lw	s2,48(sp)
20010f2e:	59b2                	lw	s3,44(sp)
20010f30:	5a22                	lw	s4,40(sp)
20010f32:	5a92                	lw	s5,36(sp)
20010f34:	5b02                	lw	s6,32(sp)
20010f36:	4bf2                	lw	s7,28(sp)
20010f38:	6121                	addi	sp,sp,64
20010f3a:	8082                	ret
20010f3c:	4b41                	li	s6,16
20010f3e:	fcbb6fe3          	bltu	s6,a1,20010f1c <_realloc_r+0x4a>
20010f42:	ffc42683          	lw	a3,-4(s0)
20010f46:	ff840b93          	addi	s7,s0,-8
20010f4a:	ffc6f913          	andi	s2,a3,-4
20010f4e:	2f695c63          	bge	s2,s6,20011246 <_realloc_r+0x374>
20010f52:	5ffef717          	auipc	a4,0x5ffef
20010f56:	4d670713          	addi	a4,a4,1238 # 80000428 <__malloc_av_>
20010f5a:	4710                	lw	a2,8(a4)
20010f5c:	012b87b3          	add	a5,s7,s2
20010f60:	43d8                	lw	a4,4(a5)
20010f62:	00f60863          	beq	a2,a5,20010f72 <_realloc_r+0xa0>
20010f66:	ffe77513          	andi	a0,a4,-2
20010f6a:	953e                	add	a0,a0,a5
20010f6c:	4148                	lw	a0,4(a0)
20010f6e:	8905                	andi	a0,a0,1
20010f70:	e929                	bnez	a0,20010fc2 <_realloc_r+0xf0>
20010f72:	9b71                	andi	a4,a4,-4
20010f74:	00e909b3          	add	s3,s2,a4
20010f78:	02f61d63          	bne	a2,a5,20010fb2 <_realloc_r+0xe0>
20010f7c:	010b0513          	addi	a0,s6,16
20010f80:	04a9c363          	blt	s3,a0,20010fc6 <_realloc_r+0xf4>
20010f84:	9bda                	add	s7,s7,s6
20010f86:	416989b3          	sub	s3,s3,s6
20010f8a:	5ffef797          	auipc	a5,0x5ffef
20010f8e:	4b77a323          	sw	s7,1190(a5) # 80000430 <__malloc_av_+0x8>
20010f92:	0019e993          	ori	s3,s3,1
20010f96:	013ba223          	sw	s3,4(s7)
20010f9a:	ffc42983          	lw	s3,-4(s0)
20010f9e:	8556                	mv	a0,s5
20010fa0:	8a22                	mv	s4,s0
20010fa2:	0019f993          	andi	s3,s3,1
20010fa6:	0169e9b3          	or	s3,s3,s6
20010faa:	ff342e23          	sw	s3,-4(s0)
20010fae:	370d                	jal	20010ed0 <__malloc_unlock>
20010fb0:	bf95                	j	20010f24 <_realloc_r+0x52>
20010fb2:	0169ca63          	blt	s3,s6,20010fc6 <_realloc_r+0xf4>
20010fb6:	47d8                	lw	a4,12(a5)
20010fb8:	479c                	lw	a5,8(a5)
20010fba:	c7d8                	sw	a4,12(a5)
20010fbc:	c71c                	sw	a5,8(a4)
20010fbe:	84de                	mv	s1,s7
20010fc0:	aa11                	j	200110d4 <_realloc_r+0x202>
20010fc2:	4701                	li	a4,0
20010fc4:	4781                	li	a5,0
20010fc6:	8a85                	andi	a3,a3,1
20010fc8:	1e069363          	bnez	a3,200111ae <_realloc_r+0x2dc>
20010fcc:	ff842483          	lw	s1,-8(s0)
20010fd0:	409b84b3          	sub	s1,s7,s1
20010fd4:	0044aa03          	lw	s4,4(s1)
20010fd8:	ffca7a13          	andi	s4,s4,-4
20010fdc:	9a4a                	add	s4,s4,s2
20010fde:	14078f63          	beqz	a5,2001113c <_realloc_r+0x26a>
20010fe2:	014709b3          	add	s3,a4,s4
20010fe6:	0af61263          	bne	a2,a5,2001108a <_realloc_r+0x1b8>
20010fea:	010b0793          	addi	a5,s6,16
20010fee:	14f9c763          	blt	s3,a5,2001113c <_realloc_r+0x26a>
20010ff2:	4498                	lw	a4,8(s1)
20010ff4:	44dc                	lw	a5,12(s1)
20010ff6:	ffc90613          	addi	a2,s2,-4
20010ffa:	00848a13          	addi	s4,s1,8
20010ffe:	c75c                	sw	a5,12(a4)
20011000:	c798                	sw	a4,8(a5)
20011002:	02400713          	li	a4,36
20011006:	06c76e63          	bltu	a4,a2,20011082 <_realloc_r+0x1b0>
2001100a:	46cd                	li	a3,19
2001100c:	87d2                	mv	a5,s4
2001100e:	00c6fc63          	bgeu	a3,a2,20011026 <_realloc_r+0x154>
20011012:	401c                	lw	a5,0(s0)
20011014:	c49c                	sw	a5,8(s1)
20011016:	405c                	lw	a5,4(s0)
20011018:	c4dc                	sw	a5,12(s1)
2001101a:	47ed                	li	a5,27
2001101c:	04c7e063          	bltu	a5,a2,2001105c <_realloc_r+0x18a>
20011020:	0421                	addi	s0,s0,8
20011022:	01048793          	addi	a5,s1,16
20011026:	4018                	lw	a4,0(s0)
20011028:	c398                	sw	a4,0(a5)
2001102a:	4058                	lw	a4,4(s0)
2001102c:	c3d8                	sw	a4,4(a5)
2001102e:	4418                	lw	a4,8(s0)
20011030:	c798                	sw	a4,8(a5)
20011032:	016487b3          	add	a5,s1,s6
20011036:	416989b3          	sub	s3,s3,s6
2001103a:	5ffef717          	auipc	a4,0x5ffef
2001103e:	3ef72b23          	sw	a5,1014(a4) # 80000430 <__malloc_av_+0x8>
20011042:	0019e993          	ori	s3,s3,1
20011046:	0137a223          	sw	s3,4(a5)
2001104a:	40dc                	lw	a5,4(s1)
2001104c:	8b85                	andi	a5,a5,1
2001104e:	0167e9b3          	or	s3,a5,s6
20011052:	0134a223          	sw	s3,4(s1)
20011056:	8556                	mv	a0,s5
20011058:	3da5                	jal	20010ed0 <__malloc_unlock>
2001105a:	b5e9                	j	20010f24 <_realloc_r+0x52>
2001105c:	441c                	lw	a5,8(s0)
2001105e:	c89c                	sw	a5,16(s1)
20011060:	445c                	lw	a5,12(s0)
20011062:	c8dc                	sw	a5,20(s1)
20011064:	00e60663          	beq	a2,a4,20011070 <_realloc_r+0x19e>
20011068:	0441                	addi	s0,s0,16
2001106a:	01848793          	addi	a5,s1,24
2001106e:	bf65                	j	20011026 <_realloc_r+0x154>
20011070:	481c                	lw	a5,16(s0)
20011072:	0461                	addi	s0,s0,24
20011074:	cc9c                	sw	a5,24(s1)
20011076:	ffc42703          	lw	a4,-4(s0)
2001107a:	02048793          	addi	a5,s1,32
2001107e:	ccd8                	sw	a4,28(s1)
20011080:	b75d                	j	20011026 <_realloc_r+0x154>
20011082:	85a2                	mv	a1,s0
20011084:	8552                	mv	a0,s4
20011086:	3b99                	jal	20010ddc <memmove>
20011088:	b76d                	j	20011032 <_realloc_r+0x160>
2001108a:	0b69c963          	blt	s3,s6,2001113c <_realloc_r+0x26a>
2001108e:	47d8                	lw	a4,12(a5)
20011090:	479c                	lw	a5,8(a5)
20011092:	ffc90613          	addi	a2,s2,-4
20011096:	00848513          	addi	a0,s1,8
2001109a:	c7d8                	sw	a4,12(a5)
2001109c:	c71c                	sw	a5,8(a4)
2001109e:	4498                	lw	a4,8(s1)
200110a0:	44dc                	lw	a5,12(s1)
200110a2:	c75c                	sw	a5,12(a4)
200110a4:	c798                	sw	a4,8(a5)
200110a6:	02400793          	li	a5,36
200110aa:	08c7e663          	bltu	a5,a2,20011136 <_realloc_r+0x264>
200110ae:	474d                	li	a4,19
200110b0:	00c77c63          	bgeu	a4,a2,200110c8 <_realloc_r+0x1f6>
200110b4:	4018                	lw	a4,0(s0)
200110b6:	c498                	sw	a4,8(s1)
200110b8:	4058                	lw	a4,4(s0)
200110ba:	c4d8                	sw	a4,12(s1)
200110bc:	476d                	li	a4,27
200110be:	04c76963          	bltu	a4,a2,20011110 <_realloc_r+0x23e>
200110c2:	0421                	addi	s0,s0,8
200110c4:	01048513          	addi	a0,s1,16
200110c8:	401c                	lw	a5,0(s0)
200110ca:	c11c                	sw	a5,0(a0)
200110cc:	405c                	lw	a5,4(s0)
200110ce:	c15c                	sw	a5,4(a0)
200110d0:	441c                	lw	a5,8(s0)
200110d2:	c51c                	sw	a5,8(a0)
200110d4:	40d8                	lw	a4,4(s1)
200110d6:	416986b3          	sub	a3,s3,s6
200110da:	463d                	li	a2,15
200110dc:	8b05                	andi	a4,a4,1
200110de:	013487b3          	add	a5,s1,s3
200110e2:	16d67463          	bgeu	a2,a3,2001124a <_realloc_r+0x378>
200110e6:	00eb69b3          	or	s3,s6,a4
200110ea:	0134a223          	sw	s3,4(s1)
200110ee:	016485b3          	add	a1,s1,s6
200110f2:	0016e693          	ori	a3,a3,1
200110f6:	c1d4                	sw	a3,4(a1)
200110f8:	43d8                	lw	a4,4(a5)
200110fa:	05a1                	addi	a1,a1,8
200110fc:	8556                	mv	a0,s5
200110fe:	00176713          	ori	a4,a4,1
20011102:	c3d8                	sw	a4,4(a5)
20011104:	2d59                	jal	2001179a <_free_r>
20011106:	8556                	mv	a0,s5
20011108:	33e1                	jal	20010ed0 <__malloc_unlock>
2001110a:	00848a13          	addi	s4,s1,8
2001110e:	bd19                	j	20010f24 <_realloc_r+0x52>
20011110:	4418                	lw	a4,8(s0)
20011112:	c898                	sw	a4,16(s1)
20011114:	4458                	lw	a4,12(s0)
20011116:	c8d8                	sw	a4,20(s1)
20011118:	00f60663          	beq	a2,a5,20011124 <_realloc_r+0x252>
2001111c:	0441                	addi	s0,s0,16
2001111e:	01848513          	addi	a0,s1,24
20011122:	b75d                	j	200110c8 <_realloc_r+0x1f6>
20011124:	481c                	lw	a5,16(s0)
20011126:	02048513          	addi	a0,s1,32
2001112a:	0461                	addi	s0,s0,24
2001112c:	cc9c                	sw	a5,24(s1)
2001112e:	ffc42783          	lw	a5,-4(s0)
20011132:	ccdc                	sw	a5,28(s1)
20011134:	bf51                	j	200110c8 <_realloc_r+0x1f6>
20011136:	85a2                	mv	a1,s0
20011138:	3155                	jal	20010ddc <memmove>
2001113a:	bf69                	j	200110d4 <_realloc_r+0x202>
2001113c:	076a4963          	blt	s4,s6,200111ae <_realloc_r+0x2dc>
20011140:	44dc                	lw	a5,12(s1)
20011142:	4498                	lw	a4,8(s1)
20011144:	ffc90613          	addi	a2,s2,-4
20011148:	00848513          	addi	a0,s1,8
2001114c:	c75c                	sw	a5,12(a4)
2001114e:	c798                	sw	a4,8(a5)
20011150:	02400793          	li	a5,36
20011154:	04c7ea63          	bltu	a5,a2,200111a8 <_realloc_r+0x2d6>
20011158:	474d                	li	a4,19
2001115a:	00c77c63          	bgeu	a4,a2,20011172 <_realloc_r+0x2a0>
2001115e:	4018                	lw	a4,0(s0)
20011160:	c498                	sw	a4,8(s1)
20011162:	4058                	lw	a4,4(s0)
20011164:	c4d8                	sw	a4,12(s1)
20011166:	476d                	li	a4,27
20011168:	00c76d63          	bltu	a4,a2,20011182 <_realloc_r+0x2b0>
2001116c:	0421                	addi	s0,s0,8
2001116e:	01048513          	addi	a0,s1,16
20011172:	401c                	lw	a5,0(s0)
20011174:	c11c                	sw	a5,0(a0)
20011176:	405c                	lw	a5,4(s0)
20011178:	c15c                	sw	a5,4(a0)
2001117a:	441c                	lw	a5,8(s0)
2001117c:	c51c                	sw	a5,8(a0)
2001117e:	89d2                	mv	s3,s4
20011180:	bf91                	j	200110d4 <_realloc_r+0x202>
20011182:	4418                	lw	a4,8(s0)
20011184:	c898                	sw	a4,16(s1)
20011186:	4458                	lw	a4,12(s0)
20011188:	c8d8                	sw	a4,20(s1)
2001118a:	00f60663          	beq	a2,a5,20011196 <_realloc_r+0x2c4>
2001118e:	0441                	addi	s0,s0,16
20011190:	01848513          	addi	a0,s1,24
20011194:	bff9                	j	20011172 <_realloc_r+0x2a0>
20011196:	481c                	lw	a5,16(s0)
20011198:	02048513          	addi	a0,s1,32
2001119c:	0461                	addi	s0,s0,24
2001119e:	cc9c                	sw	a5,24(s1)
200111a0:	ffc42783          	lw	a5,-4(s0)
200111a4:	ccdc                	sw	a5,28(s1)
200111a6:	b7f1                	j	20011172 <_realloc_r+0x2a0>
200111a8:	85a2                	mv	a1,s0
200111aa:	390d                	jal	20010ddc <memmove>
200111ac:	bfc9                	j	2001117e <_realloc_r+0x2ac>
200111ae:	8556                	mv	a0,s5
200111b0:	e50ff0ef          	jal	ra,20010800 <_malloc_r>
200111b4:	8a2a                	mv	s4,a0
200111b6:	ea0500e3          	beqz	a0,20011056 <_realloc_r+0x184>
200111ba:	ffc42783          	lw	a5,-4(s0)
200111be:	ff850713          	addi	a4,a0,-8
200111c2:	9bf9                	andi	a5,a5,-2
200111c4:	97de                	add	a5,a5,s7
200111c6:	00e79863          	bne	a5,a4,200111d6 <_realloc_r+0x304>
200111ca:	ffc52983          	lw	s3,-4(a0)
200111ce:	ffc9f993          	andi	s3,s3,-4
200111d2:	99ca                	add	s3,s3,s2
200111d4:	b3ed                	j	20010fbe <_realloc_r+0xec>
200111d6:	ffc90613          	addi	a2,s2,-4
200111da:	02400793          	li	a5,36
200111de:	06c7e163          	bltu	a5,a2,20011240 <_realloc_r+0x36e>
200111e2:	474d                	li	a4,19
200111e4:	04c77b63          	bgeu	a4,a2,2001123a <_realloc_r+0x368>
200111e8:	4018                	lw	a4,0(s0)
200111ea:	c118                	sw	a4,0(a0)
200111ec:	4058                	lw	a4,4(s0)
200111ee:	c158                	sw	a4,4(a0)
200111f0:	476d                	li	a4,27
200111f2:	02c76063          	bltu	a4,a2,20011212 <_realloc_r+0x340>
200111f6:	00840713          	addi	a4,s0,8
200111fa:	00850793          	addi	a5,a0,8
200111fe:	4314                	lw	a3,0(a4)
20011200:	c394                	sw	a3,0(a5)
20011202:	4354                	lw	a3,4(a4)
20011204:	c3d4                	sw	a3,4(a5)
20011206:	4718                	lw	a4,8(a4)
20011208:	c798                	sw	a4,8(a5)
2001120a:	85a2                	mv	a1,s0
2001120c:	8556                	mv	a0,s5
2001120e:	2371                	jal	2001179a <_free_r>
20011210:	b599                	j	20011056 <_realloc_r+0x184>
20011212:	4418                	lw	a4,8(s0)
20011214:	c518                	sw	a4,8(a0)
20011216:	4458                	lw	a4,12(s0)
20011218:	c558                	sw	a4,12(a0)
2001121a:	00f60763          	beq	a2,a5,20011228 <_realloc_r+0x356>
2001121e:	01040713          	addi	a4,s0,16
20011222:	01050793          	addi	a5,a0,16
20011226:	bfe1                	j	200111fe <_realloc_r+0x32c>
20011228:	481c                	lw	a5,16(s0)
2001122a:	01840713          	addi	a4,s0,24
2001122e:	c91c                	sw	a5,16(a0)
20011230:	4854                	lw	a3,20(s0)
20011232:	01850793          	addi	a5,a0,24
20011236:	c954                	sw	a3,20(a0)
20011238:	b7d9                	j	200111fe <_realloc_r+0x32c>
2001123a:	87aa                	mv	a5,a0
2001123c:	8722                	mv	a4,s0
2001123e:	b7c1                	j	200111fe <_realloc_r+0x32c>
20011240:	85a2                	mv	a1,s0
20011242:	3e69                	jal	20010ddc <memmove>
20011244:	b7d9                	j	2001120a <_realloc_r+0x338>
20011246:	89ca                	mv	s3,s2
20011248:	bb9d                	j	20010fbe <_realloc_r+0xec>
2001124a:	00e9e9b3          	or	s3,s3,a4
2001124e:	0134a223          	sw	s3,4(s1)
20011252:	43d8                	lw	a4,4(a5)
20011254:	00176713          	ori	a4,a4,1
20011258:	c3d8                	sw	a4,4(a5)
2001125a:	b575                	j	20011106 <_realloc_r+0x234>

2001125c <_sbrk_r>:
_sbrk_r():
2001125c:	1141                	addi	sp,sp,-16
2001125e:	c422                	sw	s0,8(sp)
20011260:	842a                	mv	s0,a0
20011262:	852e                	mv	a0,a1
20011264:	5fff0797          	auipc	a5,0x5fff0
20011268:	e807ae23          	sw	zero,-356(a5) # 80001100 <errno>
2001126c:	c606                	sw	ra,12(sp)
2001126e:	189000ef          	jal	ra,20011bf6 <_sbrk>
20011272:	57fd                	li	a5,-1
20011274:	00f51963          	bne	a0,a5,20011286 <_sbrk_r+0x2a>
20011278:	5fff0797          	auipc	a5,0x5fff0
2001127c:	e8878793          	addi	a5,a5,-376 # 80001100 <errno>
20011280:	439c                	lw	a5,0(a5)
20011282:	c391                	beqz	a5,20011286 <_sbrk_r+0x2a>
20011284:	c01c                	sw	a5,0(s0)
20011286:	40b2                	lw	ra,12(sp)
20011288:	4422                	lw	s0,8(sp)
2001128a:	0141                	addi	sp,sp,16
2001128c:	8082                	ret

2001128e <__sread>:
__sread():
2001128e:	1141                	addi	sp,sp,-16
20011290:	c422                	sw	s0,8(sp)
20011292:	842e                	mv	s0,a1
20011294:	00e59583          	lh	a1,14(a1)
20011298:	c606                	sw	ra,12(sp)
2001129a:	007000ef          	jal	ra,20011aa0 <_read_r>
2001129e:	00054963          	bltz	a0,200112b0 <__sread+0x22>
200112a2:	483c                	lw	a5,80(s0)
200112a4:	97aa                	add	a5,a5,a0
200112a6:	c83c                	sw	a5,80(s0)
200112a8:	40b2                	lw	ra,12(sp)
200112aa:	4422                	lw	s0,8(sp)
200112ac:	0141                	addi	sp,sp,16
200112ae:	8082                	ret
200112b0:	00c45783          	lhu	a5,12(s0)
200112b4:	777d                	lui	a4,0xfffff
200112b6:	177d                	addi	a4,a4,-1
200112b8:	8ff9                	and	a5,a5,a4
200112ba:	00f41623          	sh	a5,12(s0)
200112be:	b7ed                	j	200112a8 <__sread+0x1a>

200112c0 <__seofread>:
__seofread():
200112c0:	4501                	li	a0,0
200112c2:	8082                	ret

200112c4 <__swrite>:
__swrite():
200112c4:	00c5d783          	lhu	a5,12(a1)
200112c8:	1101                	addi	sp,sp,-32
200112ca:	cc22                	sw	s0,24(sp)
200112cc:	ca26                	sw	s1,20(sp)
200112ce:	c84a                	sw	s2,16(sp)
200112d0:	c64e                	sw	s3,12(sp)
200112d2:	ce06                	sw	ra,28(sp)
200112d4:	1007f793          	andi	a5,a5,256
200112d8:	84aa                	mv	s1,a0
200112da:	842e                	mv	s0,a1
200112dc:	8932                	mv	s2,a2
200112de:	89b6                	mv	s3,a3
200112e0:	c791                	beqz	a5,200112ec <__swrite+0x28>
200112e2:	00e59583          	lh	a1,14(a1)
200112e6:	4689                	li	a3,2
200112e8:	4601                	li	a2,0
200112ea:	2541                	jal	2001196a <_lseek_r>
200112ec:	00c45783          	lhu	a5,12(s0)
200112f0:	777d                	lui	a4,0xfffff
200112f2:	177d                	addi	a4,a4,-1
200112f4:	8ff9                	and	a5,a5,a4
200112f6:	00f41623          	sh	a5,12(s0)
200112fa:	00e41583          	lh	a1,14(s0)
200112fe:	4462                	lw	s0,24(sp)
20011300:	40f2                	lw	ra,28(sp)
20011302:	86ce                	mv	a3,s3
20011304:	864a                	mv	a2,s2
20011306:	49b2                	lw	s3,12(sp)
20011308:	4942                	lw	s2,16(sp)
2001130a:	8526                	mv	a0,s1
2001130c:	44d2                	lw	s1,20(sp)
2001130e:	6105                	addi	sp,sp,32
20011310:	a83d                	j	2001134e <_write_r>

20011312 <__sseek>:
__sseek():
20011312:	1141                	addi	sp,sp,-16
20011314:	c422                	sw	s0,8(sp)
20011316:	842e                	mv	s0,a1
20011318:	00e59583          	lh	a1,14(a1)
2001131c:	c606                	sw	ra,12(sp)
2001131e:	25b1                	jal	2001196a <_lseek_r>
20011320:	57fd                	li	a5,-1
20011322:	00c45703          	lhu	a4,12(s0)
20011326:	00f51b63          	bne	a0,a5,2001133c <__sseek+0x2a>
2001132a:	77fd                	lui	a5,0xfffff
2001132c:	17fd                	addi	a5,a5,-1
2001132e:	8ff9                	and	a5,a5,a4
20011330:	00f41623          	sh	a5,12(s0)
20011334:	40b2                	lw	ra,12(sp)
20011336:	4422                	lw	s0,8(sp)
20011338:	0141                	addi	sp,sp,16
2001133a:	8082                	ret
2001133c:	6785                	lui	a5,0x1
2001133e:	8fd9                	or	a5,a5,a4
20011340:	00f41623          	sh	a5,12(s0)
20011344:	c828                	sw	a0,80(s0)
20011346:	b7fd                	j	20011334 <__sseek+0x22>

20011348 <__sclose>:
__sclose():
20011348:	00e59583          	lh	a1,14(a1)
2001134c:	aa11                	j	20011460 <_close_r>

2001134e <_write_r>:
_write_r():
2001134e:	1141                	addi	sp,sp,-16
20011350:	c422                	sw	s0,8(sp)
20011352:	842a                	mv	s0,a0
20011354:	852e                	mv	a0,a1
20011356:	85b2                	mv	a1,a2
20011358:	8636                	mv	a2,a3
2001135a:	5fff0797          	auipc	a5,0x5fff0
2001135e:	da07a323          	sw	zero,-602(a5) # 80001100 <errno>
20011362:	c606                	sw	ra,12(sp)
20011364:	0f7000ef          	jal	ra,20011c5a <_write>
20011368:	57fd                	li	a5,-1
2001136a:	00f51963          	bne	a0,a5,2001137c <_write_r+0x2e>
2001136e:	5fff0797          	auipc	a5,0x5fff0
20011372:	d9278793          	addi	a5,a5,-622 # 80001100 <errno>
20011376:	439c                	lw	a5,0(a5)
20011378:	c391                	beqz	a5,2001137c <_write_r+0x2e>
2001137a:	c01c                	sw	a5,0(s0)
2001137c:	40b2                	lw	ra,12(sp)
2001137e:	4422                	lw	s0,8(sp)
20011380:	0141                	addi	sp,sp,16
20011382:	8082                	ret

20011384 <__swsetup_r>:
__swsetup_r():
20011384:	1141                	addi	sp,sp,-16
20011386:	5fff0797          	auipc	a5,0x5fff0
2001138a:	d0a78793          	addi	a5,a5,-758 # 80001090 <_impure_ptr>
2001138e:	c226                	sw	s1,4(sp)
20011390:	84aa                	mv	s1,a0
20011392:	4388                	lw	a0,0(a5)
20011394:	c422                	sw	s0,8(sp)
20011396:	c606                	sw	ra,12(sp)
20011398:	842e                	mv	s0,a1
2001139a:	c509                	beqz	a0,200113a4 <__swsetup_r+0x20>
2001139c:	5d1c                	lw	a5,56(a0)
2001139e:	e399                	bnez	a5,200113a4 <__swsetup_r+0x20>
200113a0:	f9dfe0ef          	jal	ra,2001033c <__sinit>
200113a4:	00c41703          	lh	a4,12(s0)
200113a8:	01071793          	slli	a5,a4,0x10
200113ac:	83c1                	srli	a5,a5,0x10
200113ae:	0087f693          	andi	a3,a5,8
200113b2:	eea1                	bnez	a3,2001140a <__swsetup_r+0x86>
200113b4:	0107f693          	andi	a3,a5,16
200113b8:	ee89                	bnez	a3,200113d2 <__swsetup_r+0x4e>
200113ba:	47a5                	li	a5,9
200113bc:	c09c                	sw	a5,0(s1)
200113be:	04076713          	ori	a4,a4,64
200113c2:	00e41623          	sh	a4,12(s0)
200113c6:	557d                	li	a0,-1
200113c8:	40b2                	lw	ra,12(sp)
200113ca:	4422                	lw	s0,8(sp)
200113cc:	4492                	lw	s1,4(sp)
200113ce:	0141                	addi	sp,sp,16
200113d0:	8082                	ret
200113d2:	8b91                	andi	a5,a5,4
200113d4:	c78d                	beqz	a5,200113fe <__swsetup_r+0x7a>
200113d6:	580c                	lw	a1,48(s0)
200113d8:	c989                	beqz	a1,200113ea <__swsetup_r+0x66>
200113da:	04040793          	addi	a5,s0,64
200113de:	00f58463          	beq	a1,a5,200113e6 <__swsetup_r+0x62>
200113e2:	8526                	mv	a0,s1
200113e4:	2e5d                	jal	2001179a <_free_r>
200113e6:	02042823          	sw	zero,48(s0)
200113ea:	00c45783          	lhu	a5,12(s0)
200113ee:	00042223          	sw	zero,4(s0)
200113f2:	fdb7f793          	andi	a5,a5,-37
200113f6:	00f41623          	sh	a5,12(s0)
200113fa:	481c                	lw	a5,16(s0)
200113fc:	c01c                	sw	a5,0(s0)
200113fe:	00c45783          	lhu	a5,12(s0)
20011402:	0087e793          	ori	a5,a5,8
20011406:	00f41623          	sh	a5,12(s0)
2001140a:	481c                	lw	a5,16(s0)
2001140c:	ef81                	bnez	a5,20011424 <__swsetup_r+0xa0>
2001140e:	00c45783          	lhu	a5,12(s0)
20011412:	20000713          	li	a4,512
20011416:	2807f793          	andi	a5,a5,640
2001141a:	00e78563          	beq	a5,a4,20011424 <__swsetup_r+0xa0>
2001141e:	85a2                	mv	a1,s0
20011420:	8526                	mv	a0,s1
20011422:	23c5                	jal	20011a02 <__smakebuf_r>
20011424:	00c45783          	lhu	a5,12(s0)
20011428:	0017f713          	andi	a4,a5,1
2001142c:	c705                	beqz	a4,20011454 <__swsetup_r+0xd0>
2001142e:	485c                	lw	a5,20(s0)
20011430:	00042423          	sw	zero,8(s0)
20011434:	40f007b3          	neg	a5,a5
20011438:	cc1c                	sw	a5,24(s0)
2001143a:	481c                	lw	a5,16(s0)
2001143c:	4501                	li	a0,0
2001143e:	f7c9                	bnez	a5,200113c8 <__swsetup_r+0x44>
20011440:	00c41783          	lh	a5,12(s0)
20011444:	0807f713          	andi	a4,a5,128
20011448:	d341                	beqz	a4,200113c8 <__swsetup_r+0x44>
2001144a:	0407e793          	ori	a5,a5,64
2001144e:	00f41623          	sh	a5,12(s0)
20011452:	bf95                	j	200113c6 <__swsetup_r+0x42>
20011454:	8b89                	andi	a5,a5,2
20011456:	4701                	li	a4,0
20011458:	e391                	bnez	a5,2001145c <__swsetup_r+0xd8>
2001145a:	4858                	lw	a4,20(s0)
2001145c:	c418                	sw	a4,8(s0)
2001145e:	bff1                	j	2001143a <__swsetup_r+0xb6>

20011460 <_close_r>:
_close_r():
20011460:	1141                	addi	sp,sp,-16
20011462:	c422                	sw	s0,8(sp)
20011464:	842a                	mv	s0,a0
20011466:	852e                	mv	a0,a1
20011468:	5fff0797          	auipc	a5,0x5fff0
2001146c:	c807ac23          	sw	zero,-872(a5) # 80001100 <errno>
20011470:	c606                	sw	ra,12(sp)
20011472:	25e1                	jal	20011b3a <_close>
20011474:	57fd                	li	a5,-1
20011476:	00f51963          	bne	a0,a5,20011488 <_close_r+0x28>
2001147a:	5fff0797          	auipc	a5,0x5fff0
2001147e:	c8678793          	addi	a5,a5,-890 # 80001100 <errno>
20011482:	439c                	lw	a5,0(a5)
20011484:	c391                	beqz	a5,20011488 <_close_r+0x28>
20011486:	c01c                	sw	a5,0(s0)
20011488:	40b2                	lw	ra,12(sp)
2001148a:	4422                	lw	s0,8(sp)
2001148c:	0141                	addi	sp,sp,16
2001148e:	8082                	ret

20011490 <_fclose_r>:
_fclose_r():
20011490:	1141                	addi	sp,sp,-16
20011492:	c606                	sw	ra,12(sp)
20011494:	c422                	sw	s0,8(sp)
20011496:	c226                	sw	s1,4(sp)
20011498:	c04a                	sw	s2,0(sp)
2001149a:	e989                	bnez	a1,200114ac <_fclose_r+0x1c>
2001149c:	4901                	li	s2,0
2001149e:	40b2                	lw	ra,12(sp)
200114a0:	4422                	lw	s0,8(sp)
200114a2:	854a                	mv	a0,s2
200114a4:	4492                	lw	s1,4(sp)
200114a6:	4902                	lw	s2,0(sp)
200114a8:	0141                	addi	sp,sp,16
200114aa:	8082                	ret
200114ac:	84aa                	mv	s1,a0
200114ae:	842e                	mv	s0,a1
200114b0:	c509                	beqz	a0,200114ba <_fclose_r+0x2a>
200114b2:	5d1c                	lw	a5,56(a0)
200114b4:	e399                	bnez	a5,200114ba <_fclose_r+0x2a>
200114b6:	e87fe0ef          	jal	ra,2001033c <__sinit>
200114ba:	00c41783          	lh	a5,12(s0)
200114be:	dff9                	beqz	a5,2001149c <_fclose_r+0xc>
200114c0:	85a2                	mv	a1,s0
200114c2:	8526                	mv	a0,s1
200114c4:	2085                	jal	20011524 <__sflush_r>
200114c6:	545c                	lw	a5,44(s0)
200114c8:	892a                	mv	s2,a0
200114ca:	c799                	beqz	a5,200114d8 <_fclose_r+0x48>
200114cc:	4c4c                	lw	a1,28(s0)
200114ce:	8526                	mv	a0,s1
200114d0:	9782                	jalr	a5
200114d2:	00055363          	bgez	a0,200114d8 <_fclose_r+0x48>
200114d6:	597d                	li	s2,-1
200114d8:	00c45783          	lhu	a5,12(s0)
200114dc:	0807f793          	andi	a5,a5,128
200114e0:	c781                	beqz	a5,200114e8 <_fclose_r+0x58>
200114e2:	480c                	lw	a1,16(s0)
200114e4:	8526                	mv	a0,s1
200114e6:	2c55                	jal	2001179a <_free_r>
200114e8:	580c                	lw	a1,48(s0)
200114ea:	c989                	beqz	a1,200114fc <_fclose_r+0x6c>
200114ec:	04040793          	addi	a5,s0,64
200114f0:	00f58463          	beq	a1,a5,200114f8 <_fclose_r+0x68>
200114f4:	8526                	mv	a0,s1
200114f6:	2455                	jal	2001179a <_free_r>
200114f8:	02042823          	sw	zero,48(s0)
200114fc:	406c                	lw	a1,68(s0)
200114fe:	c589                	beqz	a1,20011508 <_fclose_r+0x78>
20011500:	8526                	mv	a0,s1
20011502:	2c61                	jal	2001179a <_free_r>
20011504:	04042223          	sw	zero,68(s0)
20011508:	f1ffe0ef          	jal	ra,20010426 <__sfp_lock_acquire>
2001150c:	00041623          	sh	zero,12(s0)
20011510:	f19fe0ef          	jal	ra,20010428 <__sfp_lock_release>
20011514:	b769                	j	2001149e <_fclose_r+0xe>

20011516 <fclose>:
fclose():
20011516:	5fff0797          	auipc	a5,0x5fff0
2001151a:	b7a78793          	addi	a5,a5,-1158 # 80001090 <_impure_ptr>
2001151e:	85aa                	mv	a1,a0
20011520:	4388                	lw	a0,0(a5)
20011522:	b7bd                	j	20011490 <_fclose_r>

20011524 <__sflush_r>:
__sflush_r():
20011524:	00c59783          	lh	a5,12(a1)
20011528:	1101                	addi	sp,sp,-32
2001152a:	cc22                	sw	s0,24(sp)
2001152c:	01079713          	slli	a4,a5,0x10
20011530:	8341                	srli	a4,a4,0x10
20011532:	ca26                	sw	s1,20(sp)
20011534:	ce06                	sw	ra,28(sp)
20011536:	c84a                	sw	s2,16(sp)
20011538:	c64e                	sw	s3,12(sp)
2001153a:	00877693          	andi	a3,a4,8
2001153e:	84aa                	mv	s1,a0
20011540:	842e                	mv	s0,a1
20011542:	eee5                	bnez	a3,2001163a <__sflush_r+0x116>
20011544:	6705                	lui	a4,0x1
20011546:	80070713          	addi	a4,a4,-2048 # 800 <__heap_size+0x400>
2001154a:	8fd9                	or	a5,a5,a4
2001154c:	41d8                	lw	a4,4(a1)
2001154e:	00f59623          	sh	a5,12(a1)
20011552:	00e04d63          	bgtz	a4,2001156c <__sflush_r+0x48>
20011556:	5dd8                	lw	a4,60(a1)
20011558:	00e04a63          	bgtz	a4,2001156c <__sflush_r+0x48>
2001155c:	4501                	li	a0,0
2001155e:	40f2                	lw	ra,28(sp)
20011560:	4462                	lw	s0,24(sp)
20011562:	44d2                	lw	s1,20(sp)
20011564:	4942                	lw	s2,16(sp)
20011566:	49b2                	lw	s3,12(sp)
20011568:	6105                	addi	sp,sp,32
2001156a:	8082                	ret
2001156c:	5418                	lw	a4,40(s0)
2001156e:	d77d                	beqz	a4,2001155c <__sflush_r+0x38>
20011570:	0004a903          	lw	s2,0(s1)
20011574:	01379693          	slli	a3,a5,0x13
20011578:	0004a023          	sw	zero,0(s1)
2001157c:	0806d563          	bgez	a3,20011606 <__sflush_r+0xe2>
20011580:	4830                	lw	a2,80(s0)
20011582:	00c45783          	lhu	a5,12(s0)
20011586:	8b91                	andi	a5,a5,4
20011588:	c799                	beqz	a5,20011596 <__sflush_r+0x72>
2001158a:	405c                	lw	a5,4(s0)
2001158c:	8e1d                	sub	a2,a2,a5
2001158e:	581c                	lw	a5,48(s0)
20011590:	c399                	beqz	a5,20011596 <__sflush_r+0x72>
20011592:	5c5c                	lw	a5,60(s0)
20011594:	8e1d                	sub	a2,a2,a5
20011596:	541c                	lw	a5,40(s0)
20011598:	4c4c                	lw	a1,28(s0)
2001159a:	4681                	li	a3,0
2001159c:	8526                	mv	a0,s1
2001159e:	9782                	jalr	a5
200115a0:	57fd                	li	a5,-1
200115a2:	00c45683          	lhu	a3,12(s0)
200115a6:	00f51d63          	bne	a0,a5,200115c0 <__sflush_r+0x9c>
200115aa:	409c                	lw	a5,0(s1)
200115ac:	4775                	li	a4,29
200115ae:	08f76063          	bltu	a4,a5,2001162e <__sflush_r+0x10a>
200115b2:	20400737          	lui	a4,0x20400
200115b6:	0705                	addi	a4,a4,1
200115b8:	00f75733          	srl	a4,a4,a5
200115bc:	8b05                	andi	a4,a4,1
200115be:	cb25                	beqz	a4,2001162e <__sflush_r+0x10a>
200115c0:	77fd                	lui	a5,0xfffff
200115c2:	7ff78793          	addi	a5,a5,2047 # fffff7ff <metal_segment_heap_target_end+0x7fffb7ff>
200115c6:	4818                	lw	a4,16(s0)
200115c8:	8ff5                	and	a5,a5,a3
200115ca:	07c2                	slli	a5,a5,0x10
200115cc:	87c1                	srai	a5,a5,0x10
200115ce:	c018                	sw	a4,0(s0)
200115d0:	00f41623          	sh	a5,12(s0)
200115d4:	00042223          	sw	zero,4(s0)
200115d8:	01379713          	slli	a4,a5,0x13
200115dc:	00075863          	bgez	a4,200115ec <__sflush_r+0xc8>
200115e0:	57fd                	li	a5,-1
200115e2:	00f51463          	bne	a0,a5,200115ea <__sflush_r+0xc6>
200115e6:	409c                	lw	a5,0(s1)
200115e8:	e391                	bnez	a5,200115ec <__sflush_r+0xc8>
200115ea:	c828                	sw	a0,80(s0)
200115ec:	580c                	lw	a1,48(s0)
200115ee:	0124a023          	sw	s2,0(s1)
200115f2:	d5ad                	beqz	a1,2001155c <__sflush_r+0x38>
200115f4:	04040793          	addi	a5,s0,64
200115f8:	00f58463          	beq	a1,a5,20011600 <__sflush_r+0xdc>
200115fc:	8526                	mv	a0,s1
200115fe:	2a71                	jal	2001179a <_free_r>
20011600:	02042823          	sw	zero,48(s0)
20011604:	bfa1                	j	2001155c <__sflush_r+0x38>
20011606:	4c4c                	lw	a1,28(s0)
20011608:	4601                	li	a2,0
2001160a:	4685                	li	a3,1
2001160c:	8526                	mv	a0,s1
2001160e:	9702                	jalr	a4
20011610:	57fd                	li	a5,-1
20011612:	862a                	mv	a2,a0
20011614:	f6f517e3          	bne	a0,a5,20011582 <__sflush_r+0x5e>
20011618:	409c                	lw	a5,0(s1)
2001161a:	d7a5                	beqz	a5,20011582 <__sflush_r+0x5e>
2001161c:	4775                	li	a4,29
2001161e:	00e78563          	beq	a5,a4,20011628 <__sflush_r+0x104>
20011622:	4759                	li	a4,22
20011624:	04e79463          	bne	a5,a4,2001166c <__sflush_r+0x148>
20011628:	0124a023          	sw	s2,0(s1)
2001162c:	bf05                	j	2001155c <__sflush_r+0x38>
2001162e:	0406e793          	ori	a5,a3,64
20011632:	00f41623          	sh	a5,12(s0)
20011636:	557d                	li	a0,-1
20011638:	b71d                	j	2001155e <__sflush_r+0x3a>
2001163a:	0105a983          	lw	s3,16(a1)
2001163e:	f0098fe3          	beqz	s3,2001155c <__sflush_r+0x38>
20011642:	0005a903          	lw	s2,0(a1)
20011646:	8b0d                	andi	a4,a4,3
20011648:	0135a023          	sw	s3,0(a1)
2001164c:	41390933          	sub	s2,s2,s3
20011650:	4781                	li	a5,0
20011652:	e311                	bnez	a4,20011656 <__sflush_r+0x132>
20011654:	49dc                	lw	a5,20(a1)
20011656:	c41c                	sw	a5,8(s0)
20011658:	f12052e3          	blez	s2,2001155c <__sflush_r+0x38>
2001165c:	505c                	lw	a5,36(s0)
2001165e:	4c4c                	lw	a1,28(s0)
20011660:	86ca                	mv	a3,s2
20011662:	864e                	mv	a2,s3
20011664:	8526                	mv	a0,s1
20011666:	9782                	jalr	a5
20011668:	00a04763          	bgtz	a0,20011676 <__sflush_r+0x152>
2001166c:	00c45783          	lhu	a5,12(s0)
20011670:	0407e793          	ori	a5,a5,64
20011674:	bf7d                	j	20011632 <__sflush_r+0x10e>
20011676:	99aa                	add	s3,s3,a0
20011678:	40a90933          	sub	s2,s2,a0
2001167c:	bff1                	j	20011658 <__sflush_r+0x134>

2001167e <_fflush_r>:
_fflush_r():
2001167e:	1101                	addi	sp,sp,-32
20011680:	cc22                	sw	s0,24(sp)
20011682:	ce06                	sw	ra,28(sp)
20011684:	842a                	mv	s0,a0
20011686:	c519                	beqz	a0,20011694 <_fflush_r+0x16>
20011688:	5d1c                	lw	a5,56(a0)
2001168a:	e789                	bnez	a5,20011694 <_fflush_r+0x16>
2001168c:	c62e                	sw	a1,12(sp)
2001168e:	caffe0ef          	jal	ra,2001033c <__sinit>
20011692:	45b2                	lw	a1,12(sp)
20011694:	00c59783          	lh	a5,12(a1)
20011698:	c791                	beqz	a5,200116a4 <_fflush_r+0x26>
2001169a:	8522                	mv	a0,s0
2001169c:	4462                	lw	s0,24(sp)
2001169e:	40f2                	lw	ra,28(sp)
200116a0:	6105                	addi	sp,sp,32
200116a2:	b549                	j	20011524 <__sflush_r>
200116a4:	40f2                	lw	ra,28(sp)
200116a6:	4462                	lw	s0,24(sp)
200116a8:	4501                	li	a0,0
200116aa:	6105                	addi	sp,sp,32
200116ac:	8082                	ret

200116ae <fflush>:
fflush():
200116ae:	85aa                	mv	a1,a0
200116b0:	e911                	bnez	a0,200116c4 <fflush+0x16>
200116b2:	83818793          	addi	a5,gp,-1992 # 800010c8 <_global_impure_ptr>
200116b6:	4388                	lw	a0,0(a5)
200116b8:	00000597          	auipc	a1,0x0
200116bc:	fc658593          	addi	a1,a1,-58 # 2001167e <_fflush_r>
200116c0:	8d4ff06f          	j	20010794 <_fwalk_reent>
200116c4:	5fff0797          	auipc	a5,0x5fff0
200116c8:	9cc78793          	addi	a5,a5,-1588 # 80001090 <_impure_ptr>
200116cc:	4388                	lw	a0,0(a5)
200116ce:	bf45                	j	2001167e <_fflush_r>

200116d0 <_malloc_trim_r>:
_malloc_trim_r():
200116d0:	1101                	addi	sp,sp,-32
200116d2:	cc22                	sw	s0,24(sp)
200116d4:	ca26                	sw	s1,20(sp)
200116d6:	c84a                	sw	s2,16(sp)
200116d8:	c64e                	sw	s3,12(sp)
200116da:	842e                	mv	s0,a1
200116dc:	ce06                	sw	ra,28(sp)
200116de:	892a                	mv	s2,a0
200116e0:	5ffef997          	auipc	s3,0x5ffef
200116e4:	d4898993          	addi	s3,s3,-696 # 80000428 <__malloc_av_>
200116e8:	fe6ff0ef          	jal	ra,20010ece <__malloc_lock>
200116ec:	0089a783          	lw	a5,8(s3)
200116f0:	6705                	lui	a4,0x1
200116f2:	43c4                	lw	s1,4(a5)
200116f4:	fef70793          	addi	a5,a4,-17 # fef <__heap_size+0xbef>
200116f8:	40878433          	sub	s0,a5,s0
200116fc:	98f1                	andi	s1,s1,-4
200116fe:	9426                	add	s0,s0,s1
20011700:	8031                	srli	s0,s0,0xc
20011702:	147d                	addi	s0,s0,-1
20011704:	0432                	slli	s0,s0,0xc
20011706:	00e45d63          	bge	s0,a4,20011720 <_malloc_trim_r+0x50>
2001170a:	854a                	mv	a0,s2
2001170c:	fc4ff0ef          	jal	ra,20010ed0 <__malloc_unlock>
20011710:	4501                	li	a0,0
20011712:	40f2                	lw	ra,28(sp)
20011714:	4462                	lw	s0,24(sp)
20011716:	44d2                	lw	s1,20(sp)
20011718:	4942                	lw	s2,16(sp)
2001171a:	49b2                	lw	s3,12(sp)
2001171c:	6105                	addi	sp,sp,32
2001171e:	8082                	ret
20011720:	4581                	li	a1,0
20011722:	854a                	mv	a0,s2
20011724:	3e25                	jal	2001125c <_sbrk_r>
20011726:	0089a783          	lw	a5,8(s3)
2001172a:	97a6                	add	a5,a5,s1
2001172c:	fcf51fe3          	bne	a0,a5,2001170a <_malloc_trim_r+0x3a>
20011730:	408005b3          	neg	a1,s0
20011734:	854a                	mv	a0,s2
20011736:	361d                	jal	2001125c <_sbrk_r>
20011738:	57fd                	li	a5,-1
2001173a:	02f51a63          	bne	a0,a5,2001176e <_malloc_trim_r+0x9e>
2001173e:	4581                	li	a1,0
20011740:	854a                	mv	a0,s2
20011742:	3e29                	jal	2001125c <_sbrk_r>
20011744:	0089a703          	lw	a4,8(s3)
20011748:	46bd                	li	a3,15
2001174a:	40e507b3          	sub	a5,a0,a4
2001174e:	faf6dee3          	bge	a3,a5,2001170a <_malloc_trim_r+0x3a>
20011752:	5fff0697          	auipc	a3,0x5fff0
20011756:	94268693          	addi	a3,a3,-1726 # 80001094 <__malloc_sbrk_base>
2001175a:	4294                	lw	a3,0(a3)
2001175c:	0017e793          	ori	a5,a5,1
20011760:	c35c                	sw	a5,4(a4)
20011762:	8d15                	sub	a0,a0,a3
20011764:	5fff0697          	auipc	a3,0x5fff0
20011768:	96a6aa23          	sw	a0,-1676(a3) # 800010d8 <__malloc_current_mallinfo>
2001176c:	bf79                	j	2001170a <_malloc_trim_r+0x3a>
2001176e:	0089a783          	lw	a5,8(s3)
20011772:	8c81                	sub	s1,s1,s0
20011774:	0014e493          	ori	s1,s1,1
20011778:	c3c4                	sw	s1,4(a5)
2001177a:	5fff0797          	auipc	a5,0x5fff0
2001177e:	95e78793          	addi	a5,a5,-1698 # 800010d8 <__malloc_current_mallinfo>
20011782:	439c                	lw	a5,0(a5)
20011784:	854a                	mv	a0,s2
20011786:	40878433          	sub	s0,a5,s0
2001178a:	5fff0797          	auipc	a5,0x5fff0
2001178e:	9487a723          	sw	s0,-1714(a5) # 800010d8 <__malloc_current_mallinfo>
20011792:	f3eff0ef          	jal	ra,20010ed0 <__malloc_unlock>
20011796:	4505                	li	a0,1
20011798:	bfad                	j	20011712 <_malloc_trim_r+0x42>

2001179a <_free_r>:
_free_r():
2001179a:	1c058763          	beqz	a1,20011968 <_free_r+0x1ce>
2001179e:	1141                	addi	sp,sp,-16
200117a0:	c422                	sw	s0,8(sp)
200117a2:	c226                	sw	s1,4(sp)
200117a4:	842a                	mv	s0,a0
200117a6:	84ae                	mv	s1,a1
200117a8:	c606                	sw	ra,12(sp)
200117aa:	f24ff0ef          	jal	ra,20010ece <__malloc_lock>
200117ae:	ffc4a583          	lw	a1,-4(s1)
200117b2:	ff848693          	addi	a3,s1,-8
200117b6:	5ffef517          	auipc	a0,0x5ffef
200117ba:	c7250513          	addi	a0,a0,-910 # 80000428 <__malloc_av_>
200117be:	ffe5f793          	andi	a5,a1,-2
200117c2:	00f68633          	add	a2,a3,a5
200117c6:	4258                	lw	a4,4(a2)
200117c8:	00852803          	lw	a6,8(a0)
200117cc:	8985                	andi	a1,a1,1
200117ce:	9b71                	andi	a4,a4,-4
200117d0:	04c81863          	bne	a6,a2,20011820 <_free_r+0x86>
200117d4:	97ba                	add	a5,a5,a4
200117d6:	e989                	bnez	a1,200117e8 <_free_r+0x4e>
200117d8:	ff84a703          	lw	a4,-8(s1)
200117dc:	8e99                	sub	a3,a3,a4
200117de:	4690                	lw	a2,8(a3)
200117e0:	97ba                	add	a5,a5,a4
200117e2:	46d8                	lw	a4,12(a3)
200117e4:	c658                	sw	a4,12(a2)
200117e6:	c710                	sw	a2,8(a4)
200117e8:	0017e713          	ori	a4,a5,1
200117ec:	c2d8                	sw	a4,4(a3)
200117ee:	5ffef717          	auipc	a4,0x5ffef
200117f2:	c4d72123          	sw	a3,-958(a4) # 80000430 <__malloc_av_+0x8>
200117f6:	5fff0717          	auipc	a4,0x5fff0
200117fa:	8a270713          	addi	a4,a4,-1886 # 80001098 <__malloc_trim_threshold>
200117fe:	4318                	lw	a4,0(a4)
20011800:	00e7e963          	bltu	a5,a4,20011812 <_free_r+0x78>
20011804:	5fff0797          	auipc	a5,0x5fff0
20011808:	8d078793          	addi	a5,a5,-1840 # 800010d4 <__malloc_top_pad>
2001180c:	438c                	lw	a1,0(a5)
2001180e:	8522                	mv	a0,s0
20011810:	35c1                	jal	200116d0 <_malloc_trim_r>
20011812:	8522                	mv	a0,s0
20011814:	4422                	lw	s0,8(sp)
20011816:	40b2                	lw	ra,12(sp)
20011818:	4492                	lw	s1,4(sp)
2001181a:	0141                	addi	sp,sp,16
2001181c:	eb4ff06f          	j	20010ed0 <__malloc_unlock>
20011820:	c258                	sw	a4,4(a2)
20011822:	4801                	li	a6,0
20011824:	e195                	bnez	a1,20011848 <_free_r+0xae>
20011826:	ff84a583          	lw	a1,-8(s1)
2001182a:	5ffef897          	auipc	a7,0x5ffef
2001182e:	c0688893          	addi	a7,a7,-1018 # 80000430 <__malloc_av_+0x8>
20011832:	8e8d                	sub	a3,a3,a1
20011834:	97ae                	add	a5,a5,a1
20011836:	468c                	lw	a1,8(a3)
20011838:	09158563          	beq	a1,a7,200118c2 <_free_r+0x128>
2001183c:	00c6a883          	lw	a7,12(a3)
20011840:	0115a623          	sw	a7,12(a1)
20011844:	00b8a423          	sw	a1,8(a7)
20011848:	00e605b3          	add	a1,a2,a4
2001184c:	41cc                	lw	a1,4(a1)
2001184e:	8985                	andi	a1,a1,1
20011850:	e595                	bnez	a1,2001187c <_free_r+0xe2>
20011852:	97ba                	add	a5,a5,a4
20011854:	4618                	lw	a4,8(a2)
20011856:	06081863          	bnez	a6,200118c6 <_free_r+0x12c>
2001185a:	5ffef597          	auipc	a1,0x5ffef
2001185e:	bd658593          	addi	a1,a1,-1066 # 80000430 <__malloc_av_+0x8>
20011862:	06b71263          	bne	a4,a1,200118c6 <_free_r+0x12c>
20011866:	5ffef617          	auipc	a2,0x5ffef
2001186a:	bcd62b23          	sw	a3,-1066(a2) # 8000043c <__malloc_av_+0x14>
2001186e:	5ffef617          	auipc	a2,0x5ffef
20011872:	bcd62523          	sw	a3,-1078(a2) # 80000438 <__malloc_av_+0x10>
20011876:	c6d8                	sw	a4,12(a3)
20011878:	c698                	sw	a4,8(a3)
2001187a:	4805                	li	a6,1
2001187c:	0017e713          	ori	a4,a5,1
20011880:	c2d8                	sw	a4,4(a3)
20011882:	00f68733          	add	a4,a3,a5
20011886:	c31c                	sw	a5,0(a4)
20011888:	f80815e3          	bnez	a6,20011812 <_free_r+0x78>
2001188c:	1ff00713          	li	a4,511
20011890:	02f76f63          	bltu	a4,a5,200118ce <_free_r+0x134>
20011894:	838d                	srli	a5,a5,0x3
20011896:	4027d613          	srai	a2,a5,0x2
2001189a:	4705                	li	a4,1
2001189c:	00c71733          	sll	a4,a4,a2
200118a0:	4150                	lw	a2,4(a0)
200118a2:	0785                	addi	a5,a5,1
200118a4:	078e                	slli	a5,a5,0x3
200118a6:	8f51                	or	a4,a4,a2
200118a8:	97aa                	add	a5,a5,a0
200118aa:	5ffef617          	auipc	a2,0x5ffef
200118ae:	b8e62123          	sw	a4,-1150(a2) # 8000042c <__malloc_av_+0x4>
200118b2:	4398                	lw	a4,0(a5)
200118b4:	ff878613          	addi	a2,a5,-8
200118b8:	c6d0                	sw	a2,12(a3)
200118ba:	c698                	sw	a4,8(a3)
200118bc:	c394                	sw	a3,0(a5)
200118be:	c754                	sw	a3,12(a4)
200118c0:	bf89                	j	20011812 <_free_r+0x78>
200118c2:	4805                	li	a6,1
200118c4:	b751                	j	20011848 <_free_r+0xae>
200118c6:	4650                	lw	a2,12(a2)
200118c8:	c750                	sw	a2,12(a4)
200118ca:	c618                	sw	a4,8(a2)
200118cc:	bf45                	j	2001187c <_free_r+0xe2>
200118ce:	0097d613          	srli	a2,a5,0x9
200118d2:	4711                	li	a4,4
200118d4:	02c76e63          	bltu	a4,a2,20011910 <_free_r+0x176>
200118d8:	0067d713          	srli	a4,a5,0x6
200118dc:	03870713          	addi	a4,a4,56
200118e0:	00170613          	addi	a2,a4,1
200118e4:	060e                	slli	a2,a2,0x3
200118e6:	962a                	add	a2,a2,a0
200118e8:	ff860593          	addi	a1,a2,-8
200118ec:	4210                	lw	a2,0(a2)
200118ee:	06c59763          	bne	a1,a2,2001195c <_free_r+0x1c2>
200118f2:	4785                	li	a5,1
200118f4:	8709                	srai	a4,a4,0x2
200118f6:	00e79733          	sll	a4,a5,a4
200118fa:	415c                	lw	a5,4(a0)
200118fc:	8f5d                	or	a4,a4,a5
200118fe:	5ffef797          	auipc	a5,0x5ffef
20011902:	b2e7a723          	sw	a4,-1234(a5) # 8000042c <__malloc_av_+0x4>
20011906:	c6cc                	sw	a1,12(a3)
20011908:	c690                	sw	a2,8(a3)
2001190a:	c594                	sw	a3,8(a1)
2001190c:	c654                	sw	a3,12(a2)
2001190e:	b711                	j	20011812 <_free_r+0x78>
20011910:	4751                	li	a4,20
20011912:	00c76563          	bltu	a4,a2,2001191c <_free_r+0x182>
20011916:	05b60713          	addi	a4,a2,91
2001191a:	b7d9                	j	200118e0 <_free_r+0x146>
2001191c:	05400713          	li	a4,84
20011920:	00c76763          	bltu	a4,a2,2001192e <_free_r+0x194>
20011924:	00c7d713          	srli	a4,a5,0xc
20011928:	06e70713          	addi	a4,a4,110
2001192c:	bf55                	j	200118e0 <_free_r+0x146>
2001192e:	15400713          	li	a4,340
20011932:	00c76763          	bltu	a4,a2,20011940 <_free_r+0x1a6>
20011936:	00f7d713          	srli	a4,a5,0xf
2001193a:	07770713          	addi	a4,a4,119
2001193e:	b74d                	j	200118e0 <_free_r+0x146>
20011940:	55400593          	li	a1,1364
20011944:	07e00713          	li	a4,126
20011948:	f8c5ece3          	bltu	a1,a2,200118e0 <_free_r+0x146>
2001194c:	0127d713          	srli	a4,a5,0x12
20011950:	07c70713          	addi	a4,a4,124
20011954:	b771                	j	200118e0 <_free_r+0x146>
20011956:	4610                	lw	a2,8(a2)
20011958:	00c58663          	beq	a1,a2,20011964 <_free_r+0x1ca>
2001195c:	4258                	lw	a4,4(a2)
2001195e:	9b71                	andi	a4,a4,-4
20011960:	fee7ebe3          	bltu	a5,a4,20011956 <_free_r+0x1bc>
20011964:	464c                	lw	a1,12(a2)
20011966:	b745                	j	20011906 <_free_r+0x16c>
20011968:	8082                	ret

2001196a <_lseek_r>:
_lseek_r():
2001196a:	1141                	addi	sp,sp,-16
2001196c:	c422                	sw	s0,8(sp)
2001196e:	842a                	mv	s0,a0
20011970:	852e                	mv	a0,a1
20011972:	85b2                	mv	a1,a2
20011974:	8636                	mv	a2,a3
20011976:	5ffef797          	auipc	a5,0x5ffef
2001197a:	7807a523          	sw	zero,1930(a5) # 80001100 <errno>
2001197e:	c606                	sw	ra,12(sp)
20011980:	240d                	jal	20011ba2 <_lseek>
20011982:	57fd                	li	a5,-1
20011984:	00f51963          	bne	a0,a5,20011996 <_lseek_r+0x2c>
20011988:	5ffef797          	auipc	a5,0x5ffef
2001198c:	77878793          	addi	a5,a5,1912 # 80001100 <errno>
20011990:	439c                	lw	a5,0(a5)
20011992:	c391                	beqz	a5,20011996 <_lseek_r+0x2c>
20011994:	c01c                	sw	a5,0(s0)
20011996:	40b2                	lw	ra,12(sp)
20011998:	4422                	lw	s0,8(sp)
2001199a:	0141                	addi	sp,sp,16
2001199c:	8082                	ret

2001199e <__swhatbuf_r>:
__swhatbuf_r():
2001199e:	7119                	addi	sp,sp,-128
200119a0:	daa6                	sw	s1,116(sp)
200119a2:	84ae                	mv	s1,a1
200119a4:	00e59583          	lh	a1,14(a1)
200119a8:	dca2                	sw	s0,120(sp)
200119aa:	de86                	sw	ra,124(sp)
200119ac:	8432                	mv	s0,a2
200119ae:	0005dc63          	bgez	a1,200119c6 <__swhatbuf_r+0x28>
200119b2:	00c4d783          	lhu	a5,12(s1)
200119b6:	0006a023          	sw	zero,0(a3)
200119ba:	0807f793          	andi	a5,a5,128
200119be:	eb8d                	bnez	a5,200119f0 <__swhatbuf_r+0x52>
200119c0:	40000793          	li	a5,1024
200119c4:	a805                	j	200119f4 <__swhatbuf_r+0x56>
200119c6:	0830                	addi	a2,sp,24
200119c8:	c636                	sw	a3,12(sp)
200119ca:	2229                	jal	20011ad4 <_fstat_r>
200119cc:	46b2                	lw	a3,12(sp)
200119ce:	fe0542e3          	bltz	a0,200119b2 <__swhatbuf_r+0x14>
200119d2:	4772                	lw	a4,28(sp)
200119d4:	67bd                	lui	a5,0xf
200119d6:	6505                	lui	a0,0x1
200119d8:	8ff9                	and	a5,a5,a4
200119da:	7779                	lui	a4,0xffffe
200119dc:	97ba                	add	a5,a5,a4
200119de:	0017b793          	seqz	a5,a5
200119e2:	c29c                	sw	a5,0(a3)
200119e4:	40000793          	li	a5,1024
200119e8:	c01c                	sw	a5,0(s0)
200119ea:	80050513          	addi	a0,a0,-2048 # 800 <__heap_size+0x400>
200119ee:	a029                	j	200119f8 <__swhatbuf_r+0x5a>
200119f0:	04000793          	li	a5,64
200119f4:	c01c                	sw	a5,0(s0)
200119f6:	4501                	li	a0,0
200119f8:	50f6                	lw	ra,124(sp)
200119fa:	5466                	lw	s0,120(sp)
200119fc:	54d6                	lw	s1,116(sp)
200119fe:	6109                	addi	sp,sp,128
20011a00:	8082                	ret

20011a02 <__smakebuf_r>:
__smakebuf_r():
20011a02:	00c5d783          	lhu	a5,12(a1)
20011a06:	1101                	addi	sp,sp,-32
20011a08:	cc22                	sw	s0,24(sp)
20011a0a:	ce06                	sw	ra,28(sp)
20011a0c:	ca26                	sw	s1,20(sp)
20011a0e:	c84a                	sw	s2,16(sp)
20011a10:	8b89                	andi	a5,a5,2
20011a12:	842e                	mv	s0,a1
20011a14:	cf89                	beqz	a5,20011a2e <__smakebuf_r+0x2c>
20011a16:	04340793          	addi	a5,s0,67
20011a1a:	c01c                	sw	a5,0(s0)
20011a1c:	c81c                	sw	a5,16(s0)
20011a1e:	4785                	li	a5,1
20011a20:	c85c                	sw	a5,20(s0)
20011a22:	40f2                	lw	ra,28(sp)
20011a24:	4462                	lw	s0,24(sp)
20011a26:	44d2                	lw	s1,20(sp)
20011a28:	4942                	lw	s2,16(sp)
20011a2a:	6105                	addi	sp,sp,32
20011a2c:	8082                	ret
20011a2e:	0074                	addi	a3,sp,12
20011a30:	0030                	addi	a2,sp,8
20011a32:	84aa                	mv	s1,a0
20011a34:	37ad                	jal	2001199e <__swhatbuf_r>
20011a36:	45a2                	lw	a1,8(sp)
20011a38:	892a                	mv	s2,a0
20011a3a:	8526                	mv	a0,s1
20011a3c:	dc5fe0ef          	jal	ra,20010800 <_malloc_r>
20011a40:	ed01                	bnez	a0,20011a58 <__smakebuf_r+0x56>
20011a42:	00c41783          	lh	a5,12(s0)
20011a46:	2007f713          	andi	a4,a5,512
20011a4a:	ff61                	bnez	a4,20011a22 <__smakebuf_r+0x20>
20011a4c:	9bf1                	andi	a5,a5,-4
20011a4e:	0027e793          	ori	a5,a5,2
20011a52:	00f41623          	sh	a5,12(s0)
20011a56:	b7c1                	j	20011a16 <__smakebuf_r+0x14>
20011a58:	fffff797          	auipc	a5,0xfffff
20011a5c:	88878793          	addi	a5,a5,-1912 # 200102e0 <_cleanup_r>
20011a60:	dcdc                	sw	a5,60(s1)
20011a62:	00c45783          	lhu	a5,12(s0)
20011a66:	c008                	sw	a0,0(s0)
20011a68:	c808                	sw	a0,16(s0)
20011a6a:	0807e793          	ori	a5,a5,128
20011a6e:	00f41623          	sh	a5,12(s0)
20011a72:	47a2                	lw	a5,8(sp)
20011a74:	c85c                	sw	a5,20(s0)
20011a76:	47b2                	lw	a5,12(sp)
20011a78:	cf89                	beqz	a5,20011a92 <__smakebuf_r+0x90>
20011a7a:	00e41583          	lh	a1,14(s0)
20011a7e:	8526                	mv	a0,s1
20011a80:	2059                	jal	20011b06 <_isatty_r>
20011a82:	c901                	beqz	a0,20011a92 <__smakebuf_r+0x90>
20011a84:	00c45783          	lhu	a5,12(s0)
20011a88:	9bf1                	andi	a5,a5,-4
20011a8a:	0017e793          	ori	a5,a5,1
20011a8e:	00f41623          	sh	a5,12(s0)
20011a92:	00c45783          	lhu	a5,12(s0)
20011a96:	00f96933          	or	s2,s2,a5
20011a9a:	01241623          	sh	s2,12(s0)
20011a9e:	b751                	j	20011a22 <__smakebuf_r+0x20>

20011aa0 <_read_r>:
_read_r():
20011aa0:	1141                	addi	sp,sp,-16
20011aa2:	c422                	sw	s0,8(sp)
20011aa4:	842a                	mv	s0,a0
20011aa6:	852e                	mv	a0,a1
20011aa8:	85b2                	mv	a1,a2
20011aaa:	8636                	mv	a2,a3
20011aac:	5ffef797          	auipc	a5,0x5ffef
20011ab0:	6407aa23          	sw	zero,1620(a5) # 80001100 <errno>
20011ab4:	c606                	sw	ra,12(sp)
20011ab6:	2a19                	jal	20011bcc <_read>
20011ab8:	57fd                	li	a5,-1
20011aba:	00f51963          	bne	a0,a5,20011acc <_read_r+0x2c>
20011abe:	5ffef797          	auipc	a5,0x5ffef
20011ac2:	64278793          	addi	a5,a5,1602 # 80001100 <errno>
20011ac6:	439c                	lw	a5,0(a5)
20011ac8:	c391                	beqz	a5,20011acc <_read_r+0x2c>
20011aca:	c01c                	sw	a5,0(s0)
20011acc:	40b2                	lw	ra,12(sp)
20011ace:	4422                	lw	s0,8(sp)
20011ad0:	0141                	addi	sp,sp,16
20011ad2:	8082                	ret

20011ad4 <_fstat_r>:
_fstat_r():
20011ad4:	1141                	addi	sp,sp,-16
20011ad6:	c422                	sw	s0,8(sp)
20011ad8:	842a                	mv	s0,a0
20011ada:	852e                	mv	a0,a1
20011adc:	85b2                	mv	a1,a2
20011ade:	5ffef797          	auipc	a5,0x5ffef
20011ae2:	6207a123          	sw	zero,1570(a5) # 80001100 <errno>
20011ae6:	c606                	sw	ra,12(sp)
20011ae8:	2895                	jal	20011b5c <_fstat>
20011aea:	57fd                	li	a5,-1
20011aec:	00f51963          	bne	a0,a5,20011afe <_fstat_r+0x2a>
20011af0:	5ffef797          	auipc	a5,0x5ffef
20011af4:	61078793          	addi	a5,a5,1552 # 80001100 <errno>
20011af8:	439c                	lw	a5,0(a5)
20011afa:	c391                	beqz	a5,20011afe <_fstat_r+0x2a>
20011afc:	c01c                	sw	a5,0(s0)
20011afe:	40b2                	lw	ra,12(sp)
20011b00:	4422                	lw	s0,8(sp)
20011b02:	0141                	addi	sp,sp,16
20011b04:	8082                	ret

20011b06 <_isatty_r>:
_isatty_r():
20011b06:	1141                	addi	sp,sp,-16
20011b08:	c422                	sw	s0,8(sp)
20011b0a:	842a                	mv	s0,a0
20011b0c:	852e                	mv	a0,a1
20011b0e:	5ffef797          	auipc	a5,0x5ffef
20011b12:	5e07a923          	sw	zero,1522(a5) # 80001100 <errno>
20011b16:	c606                	sw	ra,12(sp)
20011b18:	20ad                	jal	20011b82 <_isatty>
20011b1a:	57fd                	li	a5,-1
20011b1c:	00f51963          	bne	a0,a5,20011b2e <_isatty_r+0x28>
20011b20:	5ffef797          	auipc	a5,0x5ffef
20011b24:	5e078793          	addi	a5,a5,1504 # 80001100 <errno>
20011b28:	439c                	lw	a5,0(a5)
20011b2a:	c391                	beqz	a5,20011b2e <_isatty_r+0x28>
20011b2c:	c01c                	sw	a5,0(s0)
20011b2e:	40b2                	lw	ra,12(sp)
20011b30:	4422                	lw	s0,8(sp)
20011b32:	0141                	addi	sp,sp,16
20011b34:	8082                	ret
	...

20011b38 <early_trap_vector>:
early_trap_vector():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/entry.S:84
 * you end up here then there's a bug in the early boot code somewhere. */
.section .text.metal.init.trapvec
.align 2
early_trap_vector:
    .cfi_startproc
    j early_trap_vector
20011b38:	a001                	j	20011b38 <early_trap_vector>

20011b3a <_close>:
_close():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_close.c:5
#include <errno.h>

int
_close(int file)
{
20011b3a:	1101                	addi	sp,sp,-32
20011b3c:	ce06                	sw	ra,28(sp)
20011b3e:	cc22                	sw	s0,24(sp)
20011b40:	1000                	addi	s0,sp,32
20011b42:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_close.c:6
  errno = ENOSYS;
20011b46:	2271                	jal	20011cd2 <__errno>
20011b48:	872a                	mv	a4,a0
20011b4a:	05800793          	li	a5,88
20011b4e:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_close.c:7
  return -1;
20011b50:	57fd                	li	a5,-1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_close.c:8
}
20011b52:	853e                	mv	a0,a5
20011b54:	40f2                	lw	ra,28(sp)
20011b56:	4462                	lw	s0,24(sp)
20011b58:	6105                	addi	sp,sp,32
20011b5a:	8082                	ret

20011b5c <_fstat>:
_fstat():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_fstat.c:6
#include <errno.h>
#include <sys/stat.h>

int
_fstat(int file, struct stat *st)
{
20011b5c:	1101                	addi	sp,sp,-32
20011b5e:	ce06                	sw	ra,28(sp)
20011b60:	cc22                	sw	s0,24(sp)
20011b62:	1000                	addi	s0,sp,32
20011b64:	fea42623          	sw	a0,-20(s0)
20011b68:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_fstat.c:7
  errno = -ENOSYS;
20011b6c:	229d                	jal	20011cd2 <__errno>
20011b6e:	872a                	mv	a4,a0
20011b70:	fa800793          	li	a5,-88
20011b74:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_fstat.c:8
  return -1;
20011b76:	57fd                	li	a5,-1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_fstat.c:9
}
20011b78:	853e                	mv	a0,a5
20011b7a:	40f2                	lw	ra,28(sp)
20011b7c:	4462                	lw	s0,24(sp)
20011b7e:	6105                	addi	sp,sp,32
20011b80:	8082                	ret

20011b82 <_isatty>:
_isatty():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_isatty.c:5
#include <unistd.h>

int
_isatty(int file)
{
20011b82:	1101                	addi	sp,sp,-32
20011b84:	ce22                	sw	s0,28(sp)
20011b86:	1000                	addi	s0,sp,32
20011b88:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_isatty.c:6
  return (file == STDOUT_FILENO);
20011b8c:	fec42783          	lw	a5,-20(s0)
20011b90:	17fd                	addi	a5,a5,-1
20011b92:	0017b793          	seqz	a5,a5
20011b96:	0ff7f793          	andi	a5,a5,255
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_isatty.c:7
}
20011b9a:	853e                	mv	a0,a5
20011b9c:	4472                	lw	s0,28(sp)
20011b9e:	6105                	addi	sp,sp,32
20011ba0:	8082                	ret

20011ba2 <_lseek>:
_lseek():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_lseek.c:6
#include <sys/types.h>
#include <errno.h>

off_t
_lseek(int file, off_t ptr, int dir)
{
20011ba2:	1101                	addi	sp,sp,-32
20011ba4:	ce06                	sw	ra,28(sp)
20011ba6:	cc22                	sw	s0,24(sp)
20011ba8:	1000                	addi	s0,sp,32
20011baa:	fea42623          	sw	a0,-20(s0)
20011bae:	feb42423          	sw	a1,-24(s0)
20011bb2:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_lseek.c:7
  errno = ENOSYS;
20011bb6:	2a31                	jal	20011cd2 <__errno>
20011bb8:	872a                	mv	a4,a0
20011bba:	05800793          	li	a5,88
20011bbe:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_lseek.c:8
  return -1;
20011bc0:	57fd                	li	a5,-1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_lseek.c:9
}
20011bc2:	853e                	mv	a0,a5
20011bc4:	40f2                	lw	ra,28(sp)
20011bc6:	4462                	lw	s0,24(sp)
20011bc8:	6105                	addi	sp,sp,32
20011bca:	8082                	ret

20011bcc <_read>:
_read():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_read.c:6
#include <sys/types.h>
#include <errno.h>

ssize_t
_read(int file, void *ptr, size_t len)
{
20011bcc:	1101                	addi	sp,sp,-32
20011bce:	ce06                	sw	ra,28(sp)
20011bd0:	cc22                	sw	s0,24(sp)
20011bd2:	1000                	addi	s0,sp,32
20011bd4:	fea42623          	sw	a0,-20(s0)
20011bd8:	feb42423          	sw	a1,-24(s0)
20011bdc:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_read.c:7
  errno = ENOSYS;
20011be0:	28cd                	jal	20011cd2 <__errno>
20011be2:	872a                	mv	a4,a0
20011be4:	05800793          	li	a5,88
20011be8:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_read.c:8
  return -1;
20011bea:	57fd                	li	a5,-1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_read.c:9
}
20011bec:	853e                	mv	a0,a5
20011bee:	40f2                	lw	ra,28(sp)
20011bf0:	4462                	lw	s0,24(sp)
20011bf2:	6105                	addi	sp,sp,32
20011bf4:	8082                	ret

20011bf6 <_sbrk>:
_sbrk():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:22
  return 0;
}

char *
_sbrk(ptrdiff_t incr)
{
20011bf6:	7179                	addi	sp,sp,-48
20011bf8:	d622                	sw	s0,44(sp)
20011bfa:	1800                	addi	s0,sp,48
20011bfc:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:23
  char *old = brk;
20011c00:	80c1a783          	lw	a5,-2036(gp) # 8000109c <brk>
20011c04:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:26

  /* If __heap_size == 0, we can't allocate memory on the heap */
  if(&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20011c08:	c7418713          	addi	a4,gp,-908 # 80001504 <metal_segment_stack_end>
20011c0c:	800047b7          	lui	a5,0x80004
20011c10:	00078793          	mv	a5,a5
20011c14:	00f71463          	bne	a4,a5,20011c1c <_sbrk+0x26>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:27
    return NULL;
20011c18:	4781                	li	a5,0
20011c1a:	a825                	j	20011c52 <_sbrk+0x5c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:31
  }

  /* Don't move the break past the end of the heap */
  if ((brk + incr) < &metal_segment_heap_target_end) {
20011c1c:	80c1a703          	lw	a4,-2036(gp) # 8000109c <brk>
20011c20:	fdc42783          	lw	a5,-36(s0)
20011c24:	973e                	add	a4,a4,a5
20011c26:	800047b7          	lui	a5,0x80004
20011c2a:	00078793          	mv	a5,a5
20011c2e:	00f77a63          	bgeu	a4,a5,20011c42 <_sbrk+0x4c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:32
    brk += incr;
20011c32:	80c1a703          	lw	a4,-2036(gp) # 8000109c <brk>
20011c36:	fdc42783          	lw	a5,-36(s0)
20011c3a:	973e                	add	a4,a4,a5
20011c3c:	80e1a623          	sw	a4,-2036(gp) # 8000109c <brk>
20011c40:	a039                	j	20011c4e <_sbrk+0x58>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:34
  } else {
    brk = &metal_segment_heap_target_end;
20011c42:	80004737          	lui	a4,0x80004
20011c46:	00070713          	mv	a4,a4
20011c4a:	80e1a623          	sw	a4,-2036(gp) # 8000109c <brk>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:37
  }

  return old;
20011c4e:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_sbrk.c:38
}
20011c52:	853e                	mv	a0,a5
20011c54:	5432                	lw	s0,44(sp)
20011c56:	6145                	addi	sp,sp,48
20011c58:	8082                	ret

20011c5a <_write>:
_write():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:9
#include <unistd.h>

/* Write to a file.  */
ssize_t
_write(int file, const void *ptr, size_t len)
{
20011c5a:	7179                	addi	sp,sp,-48
20011c5c:	d606                	sw	ra,44(sp)
20011c5e:	d422                	sw	s0,40(sp)
20011c60:	1800                	addi	s0,sp,48
20011c62:	fca42e23          	sw	a0,-36(s0)
20011c66:	fcb42c23          	sw	a1,-40(s0)
20011c6a:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:10
  if (file != STDOUT_FILENO) {
20011c6e:	fdc42703          	lw	a4,-36(s0)
20011c72:	4785                	li	a5,1
20011c74:	00f70963          	beq	a4,a5,20011c86 <_write+0x2c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:11
    errno = ENOSYS;
20011c78:	28a9                	jal	20011cd2 <__errno>
20011c7a:	872a                	mv	a4,a0
20011c7c:	05800793          	li	a5,88
20011c80:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:12
    return -1;
20011c82:	57fd                	li	a5,-1
20011c84:	a82d                	j	20011cbe <_write+0x64>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:15
  }

  const char *bptr = ptr;
20011c86:	fd842783          	lw	a5,-40(s0)
20011c8a:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:16
  for (size_t i = 0; i < len; ++i)
20011c8e:	fe042623          	sw	zero,-20(s0)
20011c92:	a839                	j	20011cb0 <_write+0x56>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:17 (discriminator 3)
    metal_tty_putc(bptr[i]);
20011c94:	fe842703          	lw	a4,-24(s0)
20011c98:	fec42783          	lw	a5,-20(s0)
20011c9c:	97ba                	add	a5,a5,a4
20011c9e:	0007c783          	lbu	a5,0(a5) # 80004000 <metal_segment_heap_target_end+0x0>
20011ca2:	853e                	mv	a0,a5
20011ca4:	2c01                	jal	20011eb4 <metal_tty_putc>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:16 (discriminator 3)
  for (size_t i = 0; i < len; ++i)
20011ca6:	fec42783          	lw	a5,-20(s0)
20011caa:	0785                	addi	a5,a5,1
20011cac:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:16 (discriminator 1)
20011cb0:	fec42703          	lw	a4,-20(s0)
20011cb4:	fd442783          	lw	a5,-44(s0)
20011cb8:	fcf76ee3          	bltu	a4,a5,20011c94 <_write+0x3a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:18
  return 0;
20011cbc:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_write.c:19
}
20011cbe:	853e                	mv	a0,a5
20011cc0:	50b2                	lw	ra,44(sp)
20011cc2:	5422                	lw	s0,40(sp)
20011cc4:	6145                	addi	sp,sp,48
20011cc6:	8082                	ret

20011cc8 <atexit>:
atexit():
20011cc8:	85aa                	mv	a1,a0
20011cca:	4681                	li	a3,0
20011ccc:	4601                	li	a2,0
20011cce:	4501                	li	a0,0
20011cd0:	a8d1                	j	20011da4 <__register_exitproc>

20011cd2 <__errno>:
__errno():
20011cd2:	5ffef797          	auipc	a5,0x5ffef
20011cd6:	3be78793          	addi	a5,a5,958 # 80001090 <_impure_ptr>
20011cda:	4388                	lw	a0,0(a5)
20011cdc:	8082                	ret

20011cde <exit>:
exit():
20011cde:	1141                	addi	sp,sp,-16
20011ce0:	4581                	li	a1,0
20011ce2:	c422                	sw	s0,8(sp)
20011ce4:	c606                	sw	ra,12(sp)
20011ce6:	842a                	mv	s0,a0
20011ce8:	2a39                	jal	20011e06 <__call_exitprocs>
20011cea:	83818793          	addi	a5,gp,-1992 # 800010c8 <_global_impure_ptr>
20011cee:	4388                	lw	a0,0(a5)
20011cf0:	5d5c                	lw	a5,60(a0)
20011cf2:	c391                	beqz	a5,20011cf6 <exit+0x18>
20011cf4:	9782                	jalr	a5
20011cf6:	8522                	mv	a0,s0
20011cf8:	474020ef          	jal	ra,2001416c <_exit>

20011cfc <__libc_fini_array>:
__libc_fini_array():
20011cfc:	1141                	addi	sp,sp,-16
20011cfe:	dffee797          	auipc	a5,0xdffee
20011d02:	30278793          	addi	a5,a5,770 # 0 <__heap_size-0x400>
20011d06:	c422                	sw	s0,8(sp)
20011d08:	dffee417          	auipc	s0,0xdffee
20011d0c:	2f840413          	addi	s0,s0,760 # 0 <__heap_size-0x400>
20011d10:	8c1d                	sub	s0,s0,a5
20011d12:	c226                	sw	s1,4(sp)
20011d14:	c606                	sw	ra,12(sp)
20011d16:	8409                	srai	s0,s0,0x2
20011d18:	84be                	mv	s1,a5
20011d1a:	e419                	bnez	s0,20011d28 <__libc_fini_array+0x2c>
20011d1c:	4422                	lw	s0,8(sp)
20011d1e:	40b2                	lw	ra,12(sp)
20011d20:	4492                	lw	s1,4(sp)
20011d22:	0141                	addi	sp,sp,16
20011d24:	c0efe06f          	j	20010132 <_fini>
20011d28:	147d                	addi	s0,s0,-1
20011d2a:	00241793          	slli	a5,s0,0x2
20011d2e:	97a6                	add	a5,a5,s1
20011d30:	439c                	lw	a5,0(a5)
20011d32:	9782                	jalr	a5
20011d34:	b7dd                	j	20011d1a <__libc_fini_array+0x1e>

20011d36 <__libc_init_array>:
__libc_init_array():
20011d36:	1141                	addi	sp,sp,-16
20011d38:	00003797          	auipc	a5,0x3
20011d3c:	f5478793          	addi	a5,a5,-172 # 20014c8c <__init_array_start>
20011d40:	c422                	sw	s0,8(sp)
20011d42:	00003417          	auipc	s0,0x3
20011d46:	f4a40413          	addi	s0,s0,-182 # 20014c8c <__init_array_start>
20011d4a:	8c1d                	sub	s0,s0,a5
20011d4c:	c226                	sw	s1,4(sp)
20011d4e:	c04a                	sw	s2,0(sp)
20011d50:	c606                	sw	ra,12(sp)
20011d52:	8409                	srai	s0,s0,0x2
20011d54:	4481                	li	s1,0
20011d56:	893e                	mv	s2,a5
20011d58:	02849863          	bne	s1,s0,20011d88 <__libc_init_array+0x52>
20011d5c:	bd6fe0ef          	jal	ra,20010132 <_fini>
20011d60:	00003797          	auipc	a5,0x3
20011d64:	f2c78793          	addi	a5,a5,-212 # 20014c8c <__init_array_start>
20011d68:	00003417          	auipc	s0,0x3
20011d6c:	f3040413          	addi	s0,s0,-208 # 20014c98 <__init_array_end>
20011d70:	8c1d                	sub	s0,s0,a5
20011d72:	8409                	srai	s0,s0,0x2
20011d74:	4481                	li	s1,0
20011d76:	893e                	mv	s2,a5
20011d78:	00849f63          	bne	s1,s0,20011d96 <__libc_init_array+0x60>
20011d7c:	40b2                	lw	ra,12(sp)
20011d7e:	4422                	lw	s0,8(sp)
20011d80:	4492                	lw	s1,4(sp)
20011d82:	4902                	lw	s2,0(sp)
20011d84:	0141                	addi	sp,sp,16
20011d86:	8082                	ret
20011d88:	00249793          	slli	a5,s1,0x2
20011d8c:	97ca                	add	a5,a5,s2
20011d8e:	439c                	lw	a5,0(a5)
20011d90:	0485                	addi	s1,s1,1
20011d92:	9782                	jalr	a5
20011d94:	b7d1                	j	20011d58 <__libc_init_array+0x22>
20011d96:	00249793          	slli	a5,s1,0x2
20011d9a:	97ca                	add	a5,a5,s2
20011d9c:	439c                	lw	a5,0(a5)
20011d9e:	0485                	addi	s1,s1,1
20011da0:	9782                	jalr	a5
20011da2:	bfd9                	j	20011d78 <__libc_init_array+0x42>

20011da4 <__register_exitproc>:
__register_exitproc():
20011da4:	83818793          	addi	a5,gp,-1992 # 800010c8 <_global_impure_ptr>
20011da8:	4398                	lw	a4,0(a5)
20011daa:	832a                	mv	t1,a0
20011dac:	14872783          	lw	a5,328(a4) # 80004148 <metal_segment_heap_target_end+0x148>
20011db0:	e789                	bnez	a5,20011dba <__register_exitproc+0x16>
20011db2:	14c70793          	addi	a5,a4,332
20011db6:	14f72423          	sw	a5,328(a4)
20011dba:	43d8                	lw	a4,4(a5)
20011dbc:	487d                	li	a6,31
20011dbe:	557d                	li	a0,-1
20011dc0:	04e84263          	blt	a6,a4,20011e04 <__register_exitproc+0x60>
20011dc4:	00271893          	slli	a7,a4,0x2
20011dc8:	02030963          	beqz	t1,20011dfa <__register_exitproc+0x56>
20011dcc:	01178533          	add	a0,a5,a7
20011dd0:	08c52423          	sw	a2,136(a0)
20011dd4:	1887a803          	lw	a6,392(a5)
20011dd8:	4605                	li	a2,1
20011dda:	00e61633          	sll	a2,a2,a4
20011dde:	00c86833          	or	a6,a6,a2
20011de2:	1907a423          	sw	a6,392(a5)
20011de6:	10d52423          	sw	a3,264(a0)
20011dea:	4689                	li	a3,2
20011dec:	00d31763          	bne	t1,a3,20011dfa <__register_exitproc+0x56>
20011df0:	18c7a683          	lw	a3,396(a5)
20011df4:	8e55                	or	a2,a2,a3
20011df6:	18c7a623          	sw	a2,396(a5)
20011dfa:	0705                	addi	a4,a4,1
20011dfc:	c3d8                	sw	a4,4(a5)
20011dfe:	97c6                	add	a5,a5,a7
20011e00:	c78c                	sw	a1,8(a5)
20011e02:	4501                	li	a0,0
20011e04:	8082                	ret

20011e06 <__call_exitprocs>:
__call_exitprocs():
20011e06:	7179                	addi	sp,sp,-48
20011e08:	83818793          	addi	a5,gp,-1992 # 800010c8 <_global_impure_ptr>
20011e0c:	ce4e                	sw	s3,28(sp)
20011e0e:	0007a983          	lw	s3,0(a5)
20011e12:	cc52                	sw	s4,24(sp)
20011e14:	ca56                	sw	s5,20(sp)
20011e16:	c85a                	sw	s6,16(sp)
20011e18:	d606                	sw	ra,44(sp)
20011e1a:	d422                	sw	s0,40(sp)
20011e1c:	d226                	sw	s1,36(sp)
20011e1e:	d04a                	sw	s2,32(sp)
20011e20:	c65e                	sw	s7,12(sp)
20011e22:	8aaa                	mv	s5,a0
20011e24:	8a2e                	mv	s4,a1
20011e26:	4b05                	li	s6,1
20011e28:	1489a483          	lw	s1,328(s3)
20011e2c:	c881                	beqz	s1,20011e3c <__call_exitprocs+0x36>
20011e2e:	40c0                	lw	s0,4(s1)
20011e30:	fff40913          	addi	s2,s0,-1
20011e34:	040a                	slli	s0,s0,0x2
20011e36:	9426                	add	s0,s0,s1
20011e38:	00095d63          	bgez	s2,20011e52 <__call_exitprocs+0x4c>
20011e3c:	50b2                	lw	ra,44(sp)
20011e3e:	5422                	lw	s0,40(sp)
20011e40:	5492                	lw	s1,36(sp)
20011e42:	5902                	lw	s2,32(sp)
20011e44:	49f2                	lw	s3,28(sp)
20011e46:	4a62                	lw	s4,24(sp)
20011e48:	4ad2                	lw	s5,20(sp)
20011e4a:	4b42                	lw	s6,16(sp)
20011e4c:	4bb2                	lw	s7,12(sp)
20011e4e:	6145                	addi	sp,sp,48
20011e50:	8082                	ret
20011e52:	000a0963          	beqz	s4,20011e64 <__call_exitprocs+0x5e>
20011e56:	10442783          	lw	a5,260(s0)
20011e5a:	01478563          	beq	a5,s4,20011e64 <__call_exitprocs+0x5e>
20011e5e:	197d                	addi	s2,s2,-1
20011e60:	1471                	addi	s0,s0,-4
20011e62:	bfd9                	j	20011e38 <__call_exitprocs+0x32>
20011e64:	40d8                	lw	a4,4(s1)
20011e66:	405c                	lw	a5,4(s0)
20011e68:	177d                	addi	a4,a4,-1
20011e6a:	03271663          	bne	a4,s2,20011e96 <__call_exitprocs+0x90>
20011e6e:	0124a223          	sw	s2,4(s1)
20011e72:	d7f5                	beqz	a5,20011e5e <__call_exitprocs+0x58>
20011e74:	1884a683          	lw	a3,392(s1)
20011e78:	012b1733          	sll	a4,s6,s2
20011e7c:	0044ab83          	lw	s7,4(s1)
20011e80:	8ef9                	and	a3,a3,a4
20011e82:	ee89                	bnez	a3,20011e9c <__call_exitprocs+0x96>
20011e84:	9782                	jalr	a5
20011e86:	40dc                	lw	a5,4(s1)
20011e88:	fb7790e3          	bne	a5,s7,20011e28 <__call_exitprocs+0x22>
20011e8c:	1489a783          	lw	a5,328(s3)
20011e90:	fc9787e3          	beq	a5,s1,20011e5e <__call_exitprocs+0x58>
20011e94:	bf51                	j	20011e28 <__call_exitprocs+0x22>
20011e96:	00042223          	sw	zero,4(s0)
20011e9a:	bfe1                	j	20011e72 <__call_exitprocs+0x6c>
20011e9c:	18c4a683          	lw	a3,396(s1)
20011ea0:	08442583          	lw	a1,132(s0)
20011ea4:	8f75                	and	a4,a4,a3
20011ea6:	e701                	bnez	a4,20011eae <__call_exitprocs+0xa8>
20011ea8:	8556                	mv	a0,s5
20011eaa:	9782                	jalr	a5
20011eac:	bfe9                	j	20011e86 <__call_exitprocs+0x80>
20011eae:	852e                	mv	a0,a1
20011eb0:	9782                	jalr	a5
20011eb2:	bfd1                	j	20011e86 <__call_exitprocs+0x80>

20011eb4 <metal_tty_putc>:
metal_tty_putc():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:11

#if defined(__METAL_DT_STDOUT_UART_HANDLE)
/* This implementation serves as a small shim that interfaces with the first
 * UART on a system. */
int metal_tty_putc(unsigned char c)
{
20011eb4:	7179                	addi	sp,sp,-48
20011eb6:	d606                	sw	ra,44(sp)
20011eb8:	d422                	sw	s0,40(sp)
20011eba:	1800                	addi	s0,sp,48
20011ebc:	87aa                	mv	a5,a0
20011ebe:	fcf40fa3          	sb	a5,-33(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:12
    if (c == '\n') {
20011ec2:	fdf44703          	lbu	a4,-33(s0)
20011ec6:	47a9                	li	a5,10
20011ec8:	02f71063          	bne	a4,a5,20011ee8 <metal_tty_putc+0x34>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:13
        int out = metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, '\r');
20011ecc:	45b5                	li	a1,13
20011ece:	800017b7          	lui	a5,0x80001
20011ed2:	fd878513          	addi	a0,a5,-40 # 80000fd8 <metal_segment_heap_target_end+0xffffcfd8>
20011ed6:	28ad                	jal	20011f50 <metal_uart_putc>
20011ed8:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:14
        if (out != 0)
20011edc:	fec42783          	lw	a5,-20(s0)
20011ee0:	c781                	beqz	a5,20011ee8 <metal_tty_putc+0x34>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:15
            return out;
20011ee2:	fec42783          	lw	a5,-20(s0)
20011ee6:	a811                	j	20011efa <metal_tty_putc+0x46>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:17
    }
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20011ee8:	fdf44783          	lbu	a5,-33(s0)
20011eec:	85be                	mv	a1,a5
20011eee:	800017b7          	lui	a5,0x80001
20011ef2:	fd878513          	addi	a0,a5,-40 # 80000fd8 <metal_segment_heap_target_end+0xffffcfd8>
20011ef6:	28a9                	jal	20011f50 <metal_uart_putc>
20011ef8:	87aa                	mv	a5,a0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:18
}
20011efa:	853e                	mv	a0,a5
20011efc:	50b2                	lw	ra,44(sp)
20011efe:	5422                	lw	s0,40(sp)
20011f00:	6145                	addi	sp,sp,48
20011f02:	8082                	ret

20011f04 <metal_tty_init>:
metal_tty_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:26
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

static void metal_tty_init(void) __attribute__((constructor));
static void metal_tty_init(void)
{
20011f04:	1141                	addi	sp,sp,-16
20011f06:	c606                	sw	ra,12(sp)
20011f08:	c422                	sw	s0,8(sp)
20011f0a:	0800                	addi	s0,sp,16
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:27
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
20011f0c:	67f1                	lui	a5,0x1c
20011f0e:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1be00>
20011f12:	800017b7          	lui	a5,0x80001
20011f16:	fd878513          	addi	a0,a5,-40 # 80000fd8 <metal_segment_heap_target_end+0xffffcfd8>
20011f1a:	2031                	jal	20011f26 <metal_uart_init>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/tty.c:28
}
20011f1c:	0001                	nop
20011f1e:	40b2                	lw	ra,12(sp)
20011f20:	4422                	lw	s0,8(sp)
20011f22:	0141                	addi	sp,sp,16
20011f24:	8082                	ret

20011f26 <metal_uart_init>:
metal_uart_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/uart.h:42
 * other method on the UART can be invoked. It is invalid to initialize a UART more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
inline void metal_uart_init(struct metal_uart *uart, int baud_rate) { return uart->vtable->init(uart, baud_rate); }
20011f26:	1101                	addi	sp,sp,-32
20011f28:	ce06                	sw	ra,28(sp)
20011f2a:	cc22                	sw	s0,24(sp)
20011f2c:	1000                	addi	s0,sp,32
20011f2e:	fea42623          	sw	a0,-20(s0)
20011f32:	feb42423          	sw	a1,-24(s0)
20011f36:	fec42783          	lw	a5,-20(s0)
20011f3a:	439c                	lw	a5,0(a5)
20011f3c:	439c                	lw	a5,0(a5)
20011f3e:	fe842583          	lw	a1,-24(s0)
20011f42:	fec42503          	lw	a0,-20(s0)
20011f46:	9782                	jalr	a5
20011f48:	40f2                	lw	ra,28(sp)
20011f4a:	4462                	lw	s0,24(sp)
20011f4c:	6105                	addi	sp,sp,32
20011f4e:	8082                	ret

20011f50 <metal_uart_putc>:
metal_uart_putc():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/uart.h:50
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
inline int metal_uart_putc(struct metal_uart *uart, unsigned char c) { return uart->vtable->putc(uart, c); }
20011f50:	1101                	addi	sp,sp,-32
20011f52:	ce06                	sw	ra,28(sp)
20011f54:	cc22                	sw	s0,24(sp)
20011f56:	1000                	addi	s0,sp,32
20011f58:	fea42623          	sw	a0,-20(s0)
20011f5c:	87ae                	mv	a5,a1
20011f5e:	fef405a3          	sb	a5,-21(s0)
20011f62:	fec42783          	lw	a5,-20(s0)
20011f66:	439c                	lw	a5,0(a5)
20011f68:	43d8                	lw	a4,4(a5)
20011f6a:	feb44783          	lbu	a5,-21(s0)
20011f6e:	85be                	mv	a1,a5
20011f70:	fec42503          	lw	a0,-20(s0)
20011f74:	9702                	jalr	a4
20011f76:	87aa                	mv	a5,a0
20011f78:	853e                	mv	a0,a5
20011f7a:	40f2                	lw	ra,28(sp)
20011f7c:	4462                	lw	s0,24(sp)
20011f7e:	6105                	addi	sp,sp,32
20011f80:	8082                	ret

20011f82 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/uart.h:73
 * @brief Set the baud rate of the UART peripheral
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
inline int metal_uart_set_baud_rate(struct metal_uart *uart, int baud_rate) { return uart->vtable->set_baud_rate(uart, baud_rate); }
20011f82:	1101                	addi	sp,sp,-32
20011f84:	ce06                	sw	ra,28(sp)
20011f86:	cc22                	sw	s0,24(sp)
20011f88:	1000                	addi	s0,sp,32
20011f8a:	fea42623          	sw	a0,-20(s0)
20011f8e:	feb42423          	sw	a1,-24(s0)
20011f92:	fec42783          	lw	a5,-20(s0)
20011f96:	439c                	lw	a5,0(a5)
20011f98:	4b9c                	lw	a5,16(a5)
20011f9a:	fe842583          	lw	a1,-24(s0)
20011f9e:	fec42503          	lw	a0,-20(s0)
20011fa2:	9782                	jalr	a5
20011fa4:	87aa                	mv	a5,a0
20011fa6:	853e                	mv	a0,a5
20011fa8:	40f2                	lw	ra,28(sp)
20011faa:	4462                	lw	s0,24(sp)
20011fac:	6105                	addi	sp,sp,32
20011fae:	8082                	ret

20011fb0 <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/fixed-clock.c:8

#include <metal/drivers/fixed-clock.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk)
{
20011fb0:	7179                	addi	sp,sp,-48
20011fb2:	d622                	sw	s0,44(sp)
20011fb4:	1800                	addi	s0,sp,48
20011fb6:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/fixed-clock.c:9
    const struct __metal_driver_fixed_clock *clk = (void *)gclk;
20011fba:	fdc42783          	lw	a5,-36(s0)
20011fbe:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/fixed-clock.c:10
    return clk->rate;
20011fc2:	fec42783          	lw	a5,-20(s0)
20011fc6:	4f9c                	lw	a5,24(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/fixed-clock.c:11
}
20011fc8:	853e                	mv	a0,a5
20011fca:	5432                	lw	s0,44(sp)
20011fcc:	6145                	addi	sp,sp,48
20011fce:	8082                	ret

20011fd0 <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/fixed-clock.c:14

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk, long target_hz)
{
20011fd0:	1101                	addi	sp,sp,-32
20011fd2:	ce06                	sw	ra,28(sp)
20011fd4:	cc22                	sw	s0,24(sp)
20011fd6:	1000                	addi	s0,sp,32
20011fd8:	fea42623          	sw	a0,-20(s0)
20011fdc:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/fixed-clock.c:15
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
20011fe0:	fec42503          	lw	a0,-20(s0)
20011fe4:	37f1                	jal	20011fb0 <__metal_driver_fixed_clock_get_rate_hz>
20011fe6:	87aa                	mv	a5,a0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/fixed-clock.c:16
}
20011fe8:	853e                	mv	a0,a5
20011fea:	40f2                	lw	ra,28(sp)
20011fec:	4462                	lw	s0,24(sp)
20011fee:	6105                	addi	sp,sp,32
20011ff0:	8082                	ret

20011ff2 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:8

#include <metal/io.h>
#include <metal/drivers/riscv,clint0.h>

unsigned long long __metal_clint0_mtime_get (struct __metal_driver_riscv_clint0 *clint)
{
20011ff2:	7179                	addi	sp,sp,-48
20011ff4:	d622                	sw	s0,44(sp)
20011ff6:	1800                	addi	s0,sp,48
20011ff8:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:13 (discriminator 1)
    __metal_io_u32 lo, hi;

    /* Guard against rollover when reading */
    do {
	hi = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET + 4));
20011ffc:	fdc42503          	lw	a0,-36(s0)
20012000:	00852883          	lw	a7,8(a0)
20012004:	6531                	lui	a0,0xc
20012006:	1571                	addi	a0,a0,-4
20012008:	9546                	add	a0,a0,a7
2001200a:	4108                	lw	a0,0(a0)
2001200c:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:14 (discriminator 1)
	lo = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET));
20012010:	fdc42503          	lw	a0,-36(s0)
20012014:	00852883          	lw	a7,8(a0) # c008 <__heap_size+0xbc08>
20012018:	6531                	lui	a0,0xc
2001201a:	1561                	addi	a0,a0,-8
2001201c:	9546                	add	a0,a0,a7
2001201e:	4108                	lw	a0,0(a0)
20012020:	fea42423          	sw	a0,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:15 (discriminator 1)
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIME_OFFSET + 4)) != hi);
20012024:	fdc42503          	lw	a0,-36(s0)
20012028:	00852883          	lw	a7,8(a0) # c008 <__heap_size+0xbc08>
2001202c:	6531                	lui	a0,0xc
2001202e:	1571                	addi	a0,a0,-4
20012030:	9546                	add	a0,a0,a7
20012032:	4108                	lw	a0,0(a0)
20012034:	fec42883          	lw	a7,-20(s0)
20012038:	fca892e3          	bne	a7,a0,20011ffc <__metal_clint0_mtime_get+0xa>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:17

    return (((unsigned long long)hi) << 32) | lo;
2001203c:	fec42503          	lw	a0,-20(s0)
20012040:	832a                	mv	t1,a0
20012042:	4381                	li	t2,0
20012044:	00031813          	slli	a6,t1,0x0
20012048:	4781                	li	a5,0
2001204a:	fe842503          	lw	a0,-24(s0)
2001204e:	86aa                	mv	a3,a0
20012050:	4701                	li	a4,0
20012052:	00d7e5b3          	or	a1,a5,a3
20012056:	00e86633          	or	a2,a6,a4
2001205a:	87ae                	mv	a5,a1
2001205c:	8832                	mv	a6,a2
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:18
}
2001205e:	853e                	mv	a0,a5
20012060:	85c2                	mv	a1,a6
20012062:	5432                	lw	s0,44(sp)
20012064:	6145                	addi	sp,sp,48
20012066:	8082                	ret

20012068 <__metal_clint0_mtime_set>:
__metal_clint0_mtime_set():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:21

int __metal_clint0_mtime_set (struct __metal_driver_riscv_clint0 *clint, unsigned long long time)
{   
20012068:	1101                	addi	sp,sp,-32
2001206a:	ce22                	sw	s0,28(sp)
2001206c:	1000                	addi	s0,sp,32
2001206e:	fea42623          	sw	a0,-20(s0)
20012072:	feb42023          	sw	a1,-32(s0)
20012076:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:28
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET + 4)) = 0xFFFFFFFF;
2001207a:	fec42703          	lw	a4,-20(s0)
2001207e:	4714                	lw	a3,8(a4)
20012080:	6711                	lui	a4,0x4
20012082:	0711                	addi	a4,a4,4
20012084:	9736                	add	a4,a4,a3
20012086:	86ba                	mv	a3,a4
20012088:	577d                	li	a4,-1
2001208a:	c298                	sw	a4,0(a3)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:29
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET)) = (__metal_io_u32)time;
2001208c:	fec42703          	lw	a4,-20(s0)
20012090:	4714                	lw	a3,8(a4)
20012092:	6711                	lui	a4,0x4
20012094:	9736                	add	a4,a4,a3
20012096:	86ba                	mv	a3,a4
20012098:	fe042703          	lw	a4,-32(s0)
2001209c:	c298                	sw	a4,0(a3)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:30
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base + METAL_CLINT_MTIMECMP_OFFSET + 4)) = (__metal_io_u32)(time >> 32);
2001209e:	fe442703          	lw	a4,-28(s0)
200120a2:	00075793          	srli	a5,a4,0x0
200120a6:	4801                	li	a6,0
200120a8:	fec42703          	lw	a4,-20(s0)
200120ac:	4714                	lw	a3,8(a4)
200120ae:	6711                	lui	a4,0x4
200120b0:	0711                	addi	a4,a4,4
200120b2:	9736                	add	a4,a4,a3
200120b4:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:31
    return 0;
200120b6:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:32
}
200120b8:	853e                	mv	a0,a5
200120ba:	4472                	lw	s0,28(sp)
200120bc:	6105                	addi	sp,sp,32
200120be:	8082                	ret

200120c0 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:35

void __metal_driver_riscv_clint0_init (struct metal_interrupt *controller)
{
200120c0:	7179                	addi	sp,sp,-48
200120c2:	d606                	sw	ra,44(sp)
200120c4:	d422                	sw	s0,40(sp)
200120c6:	1800                	addi	s0,sp,48
200120c8:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:36
    struct __metal_driver_riscv_clint0 *clint =
200120cc:	fdc42783          	lw	a5,-36(s0)
200120d0:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:39
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( !clint->init_done ) {
200120d4:	fe842783          	lw	a5,-24(s0)
200120d8:	4b9c                	lw	a5,16(a5)
200120da:	efa9                	bnez	a5,20012134 <__metal_driver_riscv_clint0_init+0x74>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:40
        struct metal_interrupt *intc = clint->interrupt_parent;
200120dc:	fe842783          	lw	a5,-24(s0)
200120e0:	4bdc                	lw	a5,20(a5)
200120e2:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:43

	/* Register its interrupts with with parent controller, aka sw and timerto its default isr */
        for (int i = 0; i < clint->num_interrupts; i++) {
200120e6:	fe042623          	sw	zero,-20(s0)
200120ea:	a815                	j	2001211e <__metal_driver_riscv_clint0_init+0x5e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:44 (discriminator 3)
            intc->vtable->interrupt_register(intc,
200120ec:	fe442783          	lw	a5,-28(s0)
200120f0:	439c                	lw	a5,0(a5)
200120f2:	0047a803          	lw	a6,4(a5)
200120f6:	fe842703          	lw	a4,-24(s0)
200120fa:	fec42783          	lw	a5,-20(s0)
200120fe:	0791                	addi	a5,a5,4
20012100:	078a                	slli	a5,a5,0x2
20012102:	97ba                	add	a5,a5,a4
20012104:	47dc                	lw	a5,12(a5)
20012106:	fe842683          	lw	a3,-24(s0)
2001210a:	4601                	li	a2,0
2001210c:	85be                	mv	a1,a5
2001210e:	fe442503          	lw	a0,-28(s0)
20012112:	9802                	jalr	a6
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:43 (discriminator 3)
        for (int i = 0; i < clint->num_interrupts; i++) {
20012114:	fec42783          	lw	a5,-20(s0)
20012118:	0785                	addi	a5,a5,1
2001211a:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:43 (discriminator 1)
2001211e:	fe842783          	lw	a5,-24(s0)
20012122:	4f9c                	lw	a5,24(a5)
20012124:	fec42703          	lw	a4,-20(s0)
20012128:	fcf742e3          	blt	a4,a5,200120ec <__metal_driver_riscv_clint0_init+0x2c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:48
					     clint->interrupt_lines[i],
					     NULL, clint);
	}
	clint->init_done = 1;
2001212c:	fe842783          	lw	a5,-24(s0)
20012130:	4705                	li	a4,1
20012132:	cb98                	sw	a4,16(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:50
    }	
}
20012134:	0001                	nop
20012136:	50b2                	lw	ra,44(sp)
20012138:	5422                	lw	s0,40(sp)
2001213a:	6145                	addi	sp,sp,48
2001213c:	8082                	ret

2001213e <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:55

int __metal_driver_riscv_clint0_register (struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv)
{
2001213e:	7179                	addi	sp,sp,-48
20012140:	d606                	sw	ra,44(sp)
20012142:	d422                	sw	s0,40(sp)
20012144:	1800                	addi	s0,sp,48
20012146:	fca42e23          	sw	a0,-36(s0)
2001214a:	fcb42c23          	sw	a1,-40(s0)
2001214e:	fcc42a23          	sw	a2,-44(s0)
20012152:	fcd42823          	sw	a3,-48(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:56
    int rc = -1;
20012156:	57fd                	li	a5,-1
20012158:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:57
    struct __metal_driver_riscv_clint0 *clint =
2001215c:	fdc42783          	lw	a5,-36(s0)
20012160:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:59
                              (struct __metal_driver_riscv_clint0 *)(controller);
    struct metal_interrupt *intc = clint->interrupt_parent;
20012164:	fe842783          	lw	a5,-24(s0)
20012168:	4bdc                	lw	a5,20(a5)
2001216a:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:62

    /* Register its interrupts with parent controller */
    if (intc) {
2001216e:	fe442783          	lw	a5,-28(s0)
20012172:	c385                	beqz	a5,20012192 <__metal_driver_riscv_clint0_register+0x54>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:63
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
20012174:	fe442783          	lw	a5,-28(s0)
20012178:	439c                	lw	a5,0(a5)
2001217a:	43dc                	lw	a5,4(a5)
2001217c:	fd042683          	lw	a3,-48(s0)
20012180:	fd442603          	lw	a2,-44(s0)
20012184:	fd842583          	lw	a1,-40(s0)
20012188:	fe442503          	lw	a0,-28(s0)
2001218c:	9782                	jalr	a5
2001218e:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:65
    }
    return rc;
20012192:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:66
}
20012196:	853e                	mv	a0,a5
20012198:	50b2                	lw	ra,44(sp)
2001219a:	5422                	lw	s0,40(sp)
2001219c:	6145                	addi	sp,sp,48
2001219e:	8082                	ret

200121a0 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:69

int __metal_driver_riscv_clint0_enable (struct metal_interrupt *controller, int id)
{
200121a0:	7179                	addi	sp,sp,-48
200121a2:	d606                	sw	ra,44(sp)
200121a4:	d422                	sw	s0,40(sp)
200121a6:	1800                	addi	s0,sp,48
200121a8:	fca42e23          	sw	a0,-36(s0)
200121ac:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:70
    int rc = -1;
200121b0:	57fd                	li	a5,-1
200121b2:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:71
    struct __metal_driver_riscv_clint0 *clint =
200121b6:	fdc42783          	lw	a5,-36(s0)
200121ba:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:74
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( id ) {
200121be:	fd842783          	lw	a5,-40(s0)
200121c2:	c785                	beqz	a5,200121ea <__metal_driver_riscv_clint0_enable+0x4a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:75
        struct metal_interrupt *intc = clint->interrupt_parent;
200121c4:	fe842783          	lw	a5,-24(s0)
200121c8:	4bdc                	lw	a5,20(a5)
200121ca:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:78
        
        /* Enable its interrupts with parent controller */
        if (intc) {
200121ce:	fe442783          	lw	a5,-28(s0)
200121d2:	cf81                	beqz	a5,200121ea <__metal_driver_riscv_clint0_enable+0x4a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:79
            rc = intc->vtable->interrupt_enable(intc, id);
200121d4:	fe442783          	lw	a5,-28(s0)
200121d8:	439c                	lw	a5,0(a5)
200121da:	479c                	lw	a5,8(a5)
200121dc:	fd842583          	lw	a1,-40(s0)
200121e0:	fe442503          	lw	a0,-28(s0)
200121e4:	9782                	jalr	a5
200121e6:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:82
        }
    }
}
200121ea:	0001                	nop
200121ec:	853e                	mv	a0,a5
200121ee:	50b2                	lw	ra,44(sp)
200121f0:	5422                	lw	s0,40(sp)
200121f2:	6145                	addi	sp,sp,48
200121f4:	8082                	ret

200121f6 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:85

int __metal_driver_riscv_clint0_disable (struct metal_interrupt *controller, int id)
{
200121f6:	7179                	addi	sp,sp,-48
200121f8:	d606                	sw	ra,44(sp)
200121fa:	d422                	sw	s0,40(sp)
200121fc:	1800                	addi	s0,sp,48
200121fe:	fca42e23          	sw	a0,-36(s0)
20012202:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:86
    int rc = -1;
20012206:	57fd                	li	a5,-1
20012208:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:87
    struct __metal_driver_riscv_clint0 *clint =
2001220c:	fdc42783          	lw	a5,-36(s0)
20012210:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:90
                              (struct __metal_driver_riscv_clint0 *)(controller);

    if ( id ) {
20012214:	fd842783          	lw	a5,-40(s0)
20012218:	c785                	beqz	a5,20012240 <__metal_driver_riscv_clint0_disable+0x4a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:91
        struct metal_interrupt *intc = clint->interrupt_parent;
2001221a:	fe842783          	lw	a5,-24(s0)
2001221e:	4bdc                	lw	a5,20(a5)
20012220:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:94
        
        /* Disable its interrupts with parent controller */
        if (intc) {
20012224:	fe442783          	lw	a5,-28(s0)
20012228:	cf81                	beqz	a5,20012240 <__metal_driver_riscv_clint0_disable+0x4a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:95
            rc = intc->vtable->interrupt_disable(intc, id);
2001222a:	fe442783          	lw	a5,-28(s0)
2001222e:	439c                	lw	a5,0(a5)
20012230:	47dc                	lw	a5,12(a5)
20012232:	fd842583          	lw	a1,-40(s0)
20012236:	fe442503          	lw	a0,-28(s0)
2001223a:	9782                	jalr	a5
2001223c:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:98
        }
    }
}
20012240:	0001                	nop
20012242:	853e                	mv	a0,a5
20012244:	50b2                	lw	ra,44(sp)
20012246:	5422                	lw	s0,40(sp)
20012248:	6145                	addi	sp,sp,48
2001224a:	8082                	ret

2001224c <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:102

int __metal_driver_riscv_clint0_command_request (struct metal_interrupt *controller,
                                               int command, void *data)
{
2001224c:	7179                	addi	sp,sp,-48
2001224e:	d606                	sw	ra,44(sp)
20012250:	d422                	sw	s0,40(sp)
20012252:	1800                	addi	s0,sp,48
20012254:	fca42e23          	sw	a0,-36(s0)
20012258:	fcb42c23          	sw	a1,-40(s0)
2001225c:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:104
    int hartid;
    int rc = -1;
20012260:	57fd                	li	a5,-1
20012262:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:105
    struct __metal_driver_riscv_clint0 *clint =
20012266:	fdc42783          	lw	a5,-36(s0)
2001226a:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:108
                              (struct __metal_driver_riscv_clint0 *)(controller);

    switch (command) {
2001226e:	fd842703          	lw	a4,-40(s0)
20012272:	4795                	li	a5,5
20012274:	0ce7eb63          	bltu	a5,a4,2001234a <__metal_driver_riscv_clint0_command_request+0xfe>
20012278:	fd842783          	lw	a5,-40(s0)
2001227c:	00279713          	slli	a4,a5,0x2
20012280:	200147b7          	lui	a5,0x20014
20012284:	28c78793          	addi	a5,a5,652 # 2001428c <__metal_driver_vtable_sifive_fe310_g000_pll+0xc>
20012288:	97ba                	add	a5,a5,a4
2001228a:	439c                	lw	a5,0(a5)
2001228c:	8782                	jr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:110
    case METAL_TIMER_MTIME_GET:
        if (data) {
2001228e:	fd442783          	lw	a5,-44(s0)
20012292:	cfd5                	beqz	a5,2001234e <__metal_driver_riscv_clint0_command_request+0x102>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:111
	    *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
20012294:	fe842503          	lw	a0,-24(s0)
20012298:	3ba9                	jal	20011ff2 <__metal_clint0_mtime_get>
2001229a:	87aa                	mv	a5,a0
2001229c:	882e                	mv	a6,a1
2001229e:	fd442703          	lw	a4,-44(s0)
200122a2:	c31c                	sw	a5,0(a4)
200122a4:	01072223          	sw	a6,4(a4) # 4004 <__heap_size+0x3c04>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:112
            rc = 0;
200122a8:	fe042623          	sw	zero,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:114
        }
        break;
200122ac:	a04d                	j	2001234e <__metal_driver_riscv_clint0_command_request+0x102>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:116
    case METAL_TIMER_MTIME_SET:
        if (data) {
200122ae:	fd442783          	lw	a5,-44(s0)
200122b2:	c3c5                	beqz	a5,20012352 <__metal_driver_riscv_clint0_command_request+0x106>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:117
	    __metal_clint0_mtime_set(clint, *(unsigned long long *)data);
200122b4:	fd442783          	lw	a5,-44(s0)
200122b8:	0047a803          	lw	a6,4(a5)
200122bc:	439c                	lw	a5,0(a5)
200122be:	85be                	mv	a1,a5
200122c0:	8642                	mv	a2,a6
200122c2:	fe842503          	lw	a0,-24(s0)
200122c6:	334d                	jal	20012068 <__metal_clint0_mtime_set>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:118
            rc = 0;
200122c8:	fe042623          	sw	zero,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:120
        }
        break;
200122cc:	a059                	j	20012352 <__metal_driver_riscv_clint0_command_request+0x106>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:122
    case METAL_SOFTWARE_IPI_CLEAR:
	if (data) {
200122ce:	fd442783          	lw	a5,-44(s0)
200122d2:	c3d1                	beqz	a5,20012356 <__metal_driver_riscv_clint0_command_request+0x10a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:123
	    hartid = *(int *)data;
200122d4:	fd442783          	lw	a5,-44(s0)
200122d8:	439c                	lw	a5,0(a5)
200122da:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:124
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
200122de:	fe842783          	lw	a5,-24(s0)
200122e2:	479c                	lw	a5,8(a5)
200122e4:	fe442703          	lw	a4,-28(s0)
200122e8:	070a                	slli	a4,a4,0x2
200122ea:	97ba                	add	a5,a5,a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:125
					       (hartid * 4))) = METAL_DISABLE;
200122ec:	0007a023          	sw	zero,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:126
            rc = 0;
200122f0:	fe042623          	sw	zero,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:128
        }
        break;
200122f4:	a08d                	j	20012356 <__metal_driver_riscv_clint0_command_request+0x10a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:130
    case METAL_SOFTWARE_IPI_SET:
	if (data) {
200122f6:	fd442783          	lw	a5,-44(s0)
200122fa:	c3a5                	beqz	a5,2001235a <__metal_driver_riscv_clint0_command_request+0x10e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:131
	    hartid = *(int *)data;
200122fc:	fd442783          	lw	a5,-44(s0)
20012300:	439c                	lw	a5,0(a5)
20012302:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:132
            __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
20012306:	fe842783          	lw	a5,-24(s0)
2001230a:	479c                	lw	a5,8(a5)
2001230c:	fe442703          	lw	a4,-28(s0)
20012310:	070a                	slli	a4,a4,0x2
20012312:	97ba                	add	a5,a5,a4
20012314:	873e                	mv	a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:133
					       (hartid * 4))) = METAL_ENABLE;
20012316:	4785                	li	a5,1
20012318:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:134
            rc = 0;
2001231a:	fe042623          	sw	zero,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:136
        }
        break;
2001231e:	a835                	j	2001235a <__metal_driver_riscv_clint0_command_request+0x10e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:138
    case METAL_SOFTWARE_MSIP_GET:
        rc = 0;
20012320:	fe042623          	sw	zero,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:139
	if (data) {
20012324:	fd442783          	lw	a5,-44(s0)
20012328:	cb9d                	beqz	a5,2001235e <__metal_driver_riscv_clint0_command_request+0x112>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:140
	    hartid = *(int *)data;
2001232a:	fd442783          	lw	a5,-44(s0)
2001232e:	439c                	lw	a5,0(a5)
20012330:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:141
            rc = __METAL_ACCESS_ONCE((__metal_io_u32 *)(clint->control_base +
20012334:	fe842783          	lw	a5,-24(s0)
20012338:	479c                	lw	a5,8(a5)
2001233a:	fe442703          	lw	a4,-28(s0)
2001233e:	070a                	slli	a4,a4,0x2
20012340:	97ba                	add	a5,a5,a4
20012342:	439c                	lw	a5,0(a5)
20012344:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:144
						    (hartid * 4)));
        }
        break;
20012348:	a819                	j	2001235e <__metal_driver_riscv_clint0_command_request+0x112>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:146
    default:
	break;
2001234a:	0001                	nop
2001234c:	a811                	j	20012360 <__metal_driver_riscv_clint0_command_request+0x114>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:114
        break;
2001234e:	0001                	nop
20012350:	a801                	j	20012360 <__metal_driver_riscv_clint0_command_request+0x114>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:120
        break;
20012352:	0001                	nop
20012354:	a031                	j	20012360 <__metal_driver_riscv_clint0_command_request+0x114>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:128
        break;
20012356:	0001                	nop
20012358:	a021                	j	20012360 <__metal_driver_riscv_clint0_command_request+0x114>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:136
        break;
2001235a:	0001                	nop
2001235c:	a011                	j	20012360 <__metal_driver_riscv_clint0_command_request+0x114>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:144
        break;
2001235e:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:149
    }

    return rc;
20012360:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,clint0.c:150
}
20012364:	853e                	mv	a0,a5
20012366:	50b2                	lw	ra,44(sp)
20012368:	5422                	lw	s0,40(sp)
2001236a:	6145                	addi	sp,sp,48
2001236c:	8082                	ret

2001236e <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:10
#include <metal/io.h>
#include <metal/shutdown.h>
#include <metal/machine.h>

struct metal_cpu *__metal_driver_cpu_get(int hartid)
{
2001236e:	1101                	addi	sp,sp,-32
20012370:	ce22                	sw	s0,28(sp)
20012372:	1000                	addi	s0,sp,32
20012374:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:11
    if (hartid < __METAL_DT_MAX_HARTS) {
20012378:	fec42783          	lw	a5,-20(s0)
2001237c:	00f04a63          	bgtz	a5,20012390 <__metal_driver_cpu_get+0x22>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:12
        return &(__metal_cpu_table[hartid]->cpu);
20012380:	fec42703          	lw	a4,-20(s0)
20012384:	070a                	slli	a4,a4,0x2
20012386:	83018793          	addi	a5,gp,-2000 # 800010c0 <__metal_cpu_table>
2001238a:	97ba                	add	a5,a5,a4
2001238c:	439c                	lw	a5,0(a5)
2001238e:	a011                	j	20012392 <__metal_driver_cpu_get+0x24>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:14
    }
    return (struct metal_cpu *)NULL;
20012390:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:15
}
20012392:	853e                	mv	a0,a5
20012394:	4472                	lw	s0,28(sp)
20012396:	6105                	addi	sp,sp,32
20012398:	8082                	ret

2001239a <__metal_myhart_id>:
__metal_myhart_id():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:18

uintptr_t __metal_myhart_id (void)
{
2001239a:	1101                	addi	sp,sp,-32
2001239c:	ce22                	sw	s0,28(sp)
2001239e:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:20
    uintptr_t myhart;
    asm volatile ("csrr %0, mhartid" : "=r"(myhart));
200123a0:	f14027f3          	csrr	a5,mhartid
200123a4:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:21
    return myhart;
200123a8:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:22
}
200123ac:	853e                	mv	a0,a5
200123ae:	4472                	lw	s0,28(sp)
200123b0:	6105                	addi	sp,sp,32
200123b2:	8082                	ret

200123b4 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:32
    for (ptr = base; ptr < (base + size); ptr++){
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable (void) {
200123b4:	1101                	addi	sp,sp,-32
200123b6:	ce22                	sw	s0,28(sp)
200123b8:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:34
    uintptr_t m;
    asm volatile ("csrrs %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
200123ba:	47a1                	li	a5,8
200123bc:	3007a7f3          	csrrs	a5,mstatus,a5
200123c0:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:35
}
200123c4:	0001                	nop
200123c6:	4472                	lw	s0,28(sp)
200123c8:	6105                	addi	sp,sp,32
200123ca:	8082                	ret

200123cc <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:37

void __metal_interrupt_global_disable (void) {
200123cc:	1101                	addi	sp,sp,-32
200123ce:	ce22                	sw	s0,28(sp)
200123d0:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:39
    uintptr_t m;
    asm volatile ("csrrc %0, mstatus, %1" : "=r"(m) : "r"(METAL_MIE_INTERRUPT));
200123d2:	47a1                	li	a5,8
200123d4:	3007b7f3          	csrrc	a5,mstatus,a5
200123d8:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:40
}
200123dc:	0001                	nop
200123de:	4472                	lw	s0,28(sp)
200123e0:	6105                	addi	sp,sp,32
200123e2:	8082                	ret

200123e4 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:42

void __metal_interrupt_software_enable (void) {
200123e4:	1101                	addi	sp,sp,-32
200123e6:	ce22                	sw	s0,28(sp)
200123e8:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:44
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
200123ea:	47a1                	li	a5,8
200123ec:	3047a7f3          	csrrs	a5,mie,a5
200123f0:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:45
}
200123f4:	0001                	nop
200123f6:	4472                	lw	s0,28(sp)
200123f8:	6105                	addi	sp,sp,32
200123fa:	8082                	ret

200123fc <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:47

void __metal_interrupt_software_disable (void) {
200123fc:	1101                	addi	sp,sp,-32
200123fe:	ce22                	sw	s0,28(sp)
20012400:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:49
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_SW));
20012402:	47a1                	li	a5,8
20012404:	3047b7f3          	csrrc	a5,mie,a5
20012408:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:50
}
2001240c:	0001                	nop
2001240e:	4472                	lw	s0,28(sp)
20012410:	6105                	addi	sp,sp,32
20012412:	8082                	ret

20012414 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:52

void __metal_interrupt_timer_enable (void) {
20012414:	1101                	addi	sp,sp,-32
20012416:	ce22                	sw	s0,28(sp)
20012418:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:54
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
2001241a:	08000793          	li	a5,128
2001241e:	3047a7f3          	csrrs	a5,mie,a5
20012422:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:55
}
20012426:	0001                	nop
20012428:	4472                	lw	s0,28(sp)
2001242a:	6105                	addi	sp,sp,32
2001242c:	8082                	ret

2001242e <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:57

void __metal_interrupt_timer_disable (void) {
2001242e:	1101                	addi	sp,sp,-32
20012430:	ce22                	sw	s0,28(sp)
20012432:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:59
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_TMR));
20012434:	08000793          	li	a5,128
20012438:	3047b7f3          	csrrc	a5,mie,a5
2001243c:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:60
}
20012440:	0001                	nop
20012442:	4472                	lw	s0,28(sp)
20012444:	6105                	addi	sp,sp,32
20012446:	8082                	ret

20012448 <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:62

void __metal_interrupt_external_enable (void) {
20012448:	1101                	addi	sp,sp,-32
2001244a:	ce22                	sw	s0,28(sp)
2001244c:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:64
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2001244e:	6785                	lui	a5,0x1
20012450:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size+0x400>
20012454:	3047a7f3          	csrrs	a5,mie,a5
20012458:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:65
}
2001245c:	0001                	nop
2001245e:	4472                	lw	s0,28(sp)
20012460:	6105                	addi	sp,sp,32
20012462:	8082                	ret

20012464 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:67

void __metal_interrupt_external_disable (void) {
20012464:	1101                	addi	sp,sp,-32
20012466:	ce22                	sw	s0,28(sp)
20012468:	1000                	addi	s0,sp,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:69
    unsigned long m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(METAL_LOCAL_INTERRUPT_EXT));
2001246a:	6785                	lui	a5,0x1
2001246c:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size+0x400>
20012470:	3047b7f3          	csrrc	a5,mie,a5
20012474:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:70
}
20012478:	0001                	nop
2001247a:	4472                	lw	s0,28(sp)
2001247c:	6105                	addi	sp,sp,32
2001247e:	8082                	ret

20012480 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:72

void __metal_interrupt_local_enable (int id) {
20012480:	7179                	addi	sp,sp,-48
20012482:	d622                	sw	s0,44(sp)
20012484:	1800                	addi	s0,sp,48
20012486:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:73
    uintptr_t b = 1 << id;
2001248a:	fdc42783          	lw	a5,-36(s0)
2001248e:	4705                	li	a4,1
20012490:	00f717b3          	sll	a5,a4,a5
20012494:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:75
    uintptr_t m;
    asm volatile ("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
20012498:	fec42783          	lw	a5,-20(s0)
2001249c:	3047a7f3          	csrrs	a5,mie,a5
200124a0:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:76
}
200124a4:	0001                	nop
200124a6:	5432                	lw	s0,44(sp)
200124a8:	6145                	addi	sp,sp,48
200124aa:	8082                	ret

200124ac <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:78

void __metal_interrupt_local_disable (int id) {
200124ac:	7179                	addi	sp,sp,-48
200124ae:	d622                	sw	s0,44(sp)
200124b0:	1800                	addi	s0,sp,48
200124b2:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:79
    uintptr_t b = 1 << id;
200124b6:	fdc42783          	lw	a5,-36(s0)
200124ba:	4705                	li	a4,1
200124bc:	00f717b3          	sll	a5,a4,a5
200124c0:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:81
    uintptr_t m;
    asm volatile ("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
200124c4:	fec42783          	lw	a5,-20(s0)
200124c8:	3047b7f3          	csrrc	a5,mie,a5
200124cc:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:82
}
200124d0:	0001                	nop
200124d2:	5432                	lw	s0,44(sp)
200124d4:	6145                	addi	sp,sp,48
200124d6:	8082                	ret

200124d8 <__metal_default_exception_handler>:
__metal_default_exception_handler():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:84

void __metal_default_exception_handler (struct metal_cpu *cpu, int ecode) {
200124d8:	1101                	addi	sp,sp,-32
200124da:	ce06                	sw	ra,28(sp)
200124dc:	cc22                	sw	s0,24(sp)
200124de:	1000                	addi	s0,sp,32
200124e0:	fea42623          	sw	a0,-20(s0)
200124e4:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:85
    metal_shutdown(100);
200124e8:	06400513          	li	a0,100
200124ec:	473010ef          	jal	ra,2001415e <metal_shutdown>

200124f0 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:88
}

void __metal_default_interrupt_handler (int id, void *priv) {
200124f0:	1101                	addi	sp,sp,-32
200124f2:	ce06                	sw	ra,28(sp)
200124f4:	cc22                	sw	s0,24(sp)
200124f6:	1000                	addi	s0,sp,32
200124f8:	fea42623          	sw	a0,-20(s0)
200124fc:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:89
    metal_shutdown(200);
20012500:	0c800513          	li	a0,200
20012504:	45b010ef          	jal	ra,2001415e <metal_shutdown>

20012508 <__metal_default_sw_handler>:
__metal_default_sw_handler():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:92
}

void __metal_default_sw_handler (int id, void *priv) {
20012508:	7179                	addi	sp,sp,-48
2001250a:	d606                	sw	ra,44(sp)
2001250c:	d422                	sw	s0,40(sp)
2001250e:	1800                	addi	s0,sp,48
20012510:	fca42e23          	sw	a0,-36(s0)
20012514:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:95
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012518:	3549                	jal	2001239a <__metal_myhart_id>
2001251a:	872a                	mv	a4,a0
2001251c:	070a                	slli	a4,a4,0x2
2001251e:	83018793          	addi	a5,gp,-2000 # 800010c0 <__metal_cpu_table>
20012522:	97ba                	add	a5,a5,a4
20012524:	439c                	lw	a5,0(a5)
20012526:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:97

    asm volatile ("csrr %0, mcause" : "=r"(mcause));
2001252a:	342027f3          	csrr	a5,mcause
2001252e:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:98
    if ( cpu ) {
20012532:	fec42783          	lw	a5,-20(s0)
20012536:	c795                	beqz	a5,20012562 <__metal_default_sw_handler+0x5a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:99
        intc = (struct __metal_driver_riscv_cpu_intc *)cpu->interrupt_controller;
20012538:	fec42783          	lw	a5,-20(s0)
2001253c:	47dc                	lw	a5,12(a5)
2001253e:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:100
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE]((struct metal_cpu *)cpu, id);
20012542:	fe842783          	lw	a5,-24(s0)
20012546:	3ff7f793          	andi	a5,a5,1023
2001254a:	fe442703          	lw	a4,-28(s0)
2001254e:	0e478793          	addi	a5,a5,228
20012552:	078a                	slli	a5,a5,0x2
20012554:	97ba                	add	a5,a5,a4
20012556:	439c                	lw	a5,0(a5)
20012558:	fdc42583          	lw	a1,-36(s0)
2001255c:	fec42503          	lw	a0,-20(s0)
20012560:	9782                	jalr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:102
    }
}
20012562:	0001                	nop
20012564:	50b2                	lw	ra,44(sp)
20012566:	5422                	lw	s0,40(sp)
20012568:	6145                	addi	sp,sp,48
2001256a:	8082                	ret

2001256c <__metal_default_timer_handler>:
__metal_default_timer_handler():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:104

void __metal_default_timer_handler (int id, void *priv) {
2001256c:	7179                	addi	sp,sp,-48
2001256e:	d606                	sw	ra,44(sp)
20012570:	d422                	sw	s0,40(sp)
20012572:	1800                	addi	s0,sp,48
20012574:	fca42e23          	sw	a0,-36(s0)
20012578:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:105
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
2001257c:	3d39                	jal	2001239a <__metal_myhart_id>
2001257e:	87aa                	mv	a5,a0
20012580:	853e                	mv	a0,a5
20012582:	33f5                	jal	2001236e <__metal_driver_cpu_get>
20012584:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:106
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20012588:	fec42503          	lw	a0,-20(s0)
2001258c:	7a8000ef          	jal	ra,20012d34 <__metal_driver_cpu_mtime_get>
20012590:	fea42023          	sw	a0,-32(s0)
20012594:	feb42223          	sw	a1,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:109

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20012598:	fe042783          	lw	a5,-32(s0)
2001259c:	fe442803          	lw	a6,-28(s0)
200125a0:	45a9                	li	a1,10
200125a2:	4601                	li	a2,0
200125a4:	00b786b3          	add	a3,a5,a1
200125a8:	8536                	mv	a0,a3
200125aa:	00f53533          	sltu	a0,a0,a5
200125ae:	00c80733          	add	a4,a6,a2
200125b2:	00e507b3          	add	a5,a0,a4
200125b6:	873e                	mv	a4,a5
200125b8:	87b6                	mv	a5,a3
200125ba:	883a                	mv	a6,a4
200125bc:	85be                	mv	a1,a5
200125be:	8642                	mv	a2,a6
200125c0:	fec42503          	lw	a0,-20(s0)
200125c4:	7de000ef          	jal	ra,20012da2 <__metal_driver_cpu_mtimecmp_set>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:110
}
200125c8:	0001                	nop
200125ca:	50b2                	lw	ra,44(sp)
200125cc:	5422                	lw	s0,40(sp)
200125ce:	6145                	addi	sp,sp,48
200125d0:	8082                	ret
	...

20012600 <__metal_exception_handler>:
__metal_exception_handler():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:113

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler (void) {
20012600:	7119                	addi	sp,sp,-128
20012602:	de86                	sw	ra,124(sp)
20012604:	dc96                	sw	t0,120(sp)
20012606:	da9a                	sw	t1,116(sp)
20012608:	d89e                	sw	t2,112(sp)
2001260a:	d6a2                	sw	s0,108(sp)
2001260c:	d4aa                	sw	a0,104(sp)
2001260e:	d2ae                	sw	a1,100(sp)
20012610:	d0b2                	sw	a2,96(sp)
20012612:	ceb6                	sw	a3,92(sp)
20012614:	ccba                	sw	a4,88(sp)
20012616:	cabe                	sw	a5,84(sp)
20012618:	c8c2                	sw	a6,80(sp)
2001261a:	c6c6                	sw	a7,76(sp)
2001261c:	c4f2                	sw	t3,72(sp)
2001261e:	c2f6                	sw	t4,68(sp)
20012620:	c0fa                	sw	t5,64(sp)
20012622:	de7e                	sw	t6,60(sp)
20012624:	0100                	addi	s0,sp,128
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:118
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20012626:	3b95                	jal	2001239a <__metal_myhart_id>
20012628:	872a                	mv	a4,a0
2001262a:	070a                	slli	a4,a4,0x2
2001262c:	83018793          	addi	a5,gp,-2000 # 800010c0 <__metal_cpu_table>
20012630:	97ba                	add	a5,a5,a4
20012632:	439c                	lw	a5,0(a5)
20012634:	faf42623          	sw	a5,-84(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:120

    asm volatile ("csrr %0, mcause" : "=r"(mcause));
20012638:	342027f3          	csrr	a5,mcause
2001263c:	faf42423          	sw	a5,-88(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:121
    asm volatile ("csrr %0, mepc" : "=r"(mepc));
20012640:	341027f3          	csrr	a5,mepc
20012644:	faf42223          	sw	a5,-92(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:122
    asm volatile ("csrr %0, mtval" : "=r"(mtval));
20012648:	343027f3          	csrr	a5,mtval
2001264c:	faf42023          	sw	a5,-96(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:123
    asm volatile ("csrr %0, mtvec" : "=r"(mtvec));
20012650:	305027f3          	csrr	a5,mtvec
20012654:	f8f42e23          	sw	a5,-100(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:125

    if ( cpu ) {
20012658:	fac42783          	lw	a5,-84(s0)
2001265c:	c3f9                	beqz	a5,20012722 <__metal_exception_handler+0x122>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:126
        intc = (struct __metal_driver_riscv_cpu_intc *)cpu->interrupt_controller;
2001265e:	fac42783          	lw	a5,-84(s0)
20012662:	47dc                	lw	a5,12(a5)
20012664:	f8f42c23          	sw	a5,-104(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:127
        id = mcause & METAL_MCAUSE_CAUSE;
20012668:	fa842783          	lw	a5,-88(s0)
2001266c:	3ff7f793          	andi	a5,a5,1023
20012670:	f8f42a23          	sw	a5,-108(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:128
        if (mcause & METAL_MCAUSE_INTR) {
20012674:	fa842783          	lw	a5,-88(s0)
20012678:	0807d763          	bgez	a5,20012706 <__metal_exception_handler+0x106>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:129
            if ((id < METAL_INTERRUPT_ID_LC0) ||
2001267c:	f9442703          	lw	a4,-108(s0)
20012680:	47bd                	li	a5,15
20012682:	00e7d763          	bge	a5,a4,20012690 <__metal_exception_handler+0x90>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:130 (discriminator 1)
               ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20012686:	f9c42783          	lw	a5,-100(s0)
2001268a:	03f7f793          	andi	a5,a5,63
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:129 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_LC0) ||
2001268e:	ef9d                	bnez	a5,200126cc <__metal_exception_handler+0xcc>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:131
                priv = intc->metal_int_table[id].exint_data;
20012690:	f9842683          	lw	a3,-104(s0)
20012694:	f9442703          	lw	a4,-108(s0)
20012698:	87ba                	mv	a5,a4
2001269a:	0786                	slli	a5,a5,0x1
2001269c:	97ba                	add	a5,a5,a4
2001269e:	078e                	slli	a5,a5,0x3
200126a0:	97b6                	add	a5,a5,a3
200126a2:	0a07a783          	lw	a5,160(a5)
200126a6:	f8f42623          	sw	a5,-116(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:132
                intc->metal_int_table[id].handler(id, priv);
200126aa:	f9842683          	lw	a3,-104(s0)
200126ae:	f9442703          	lw	a4,-108(s0)
200126b2:	87ba                	mv	a5,a4
200126b4:	0786                	slli	a5,a5,0x1
200126b6:	97ba                	add	a5,a5,a4
200126b8:	078e                	slli	a5,a5,0x3
200126ba:	97b6                	add	a5,a5,a3
200126bc:	0987a783          	lw	a5,152(a5)
200126c0:	f8c42583          	lw	a1,-116(s0)
200126c4:	f9442503          	lw	a0,-108(s0)
200126c8:	9782                	jalr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:133
		return;
200126ca:	a8a1                	j	20012722 <__metal_exception_handler+0x122>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:135
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
200126cc:	f9c42783          	lw	a5,-100(s0)
200126d0:	03f7f713          	andi	a4,a5,63
200126d4:	4789                	li	a5,2
200126d6:	04f71663          	bne	a4,a5,20012722 <__metal_exception_handler+0x122>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:139
    		uintptr_t mtvt;
    		metal_interrupt_handler_t mtvt_handler;

                asm volatile ("csrr %0, mtvt" : "=r"(mtvt));
200126da:	307027f3          	csrr	a5,mtvt
200126de:	f8f42823          	sw	a5,-112(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:140
               	priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
200126e2:	f9842783          	lw	a5,-104(s0)
200126e6:	0e47a783          	lw	a5,228(a5)
200126ea:	f8f42623          	sw	a5,-116(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:141
               	mtvt_handler = (metal_interrupt_handler_t)mtvt;
200126ee:	f9042783          	lw	a5,-112(s0)
200126f2:	f8f42423          	sw	a5,-120(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:142
               	mtvt_handler(id, priv);
200126f6:	f8842783          	lw	a5,-120(s0)
200126fa:	f8c42583          	lw	a1,-116(s0)
200126fe:	f9442503          	lw	a0,-108(s0)
20012702:	9782                	jalr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:143
		return;
20012704:	a839                	j	20012722 <__metal_exception_handler+0x122>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:146
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20012706:	f9842703          	lw	a4,-104(s0)
2001270a:	f9442783          	lw	a5,-108(s0)
2001270e:	0e478793          	addi	a5,a5,228
20012712:	078a                	slli	a5,a5,0x2
20012714:	97ba                	add	a5,a5,a4
20012716:	439c                	lw	a5,0(a5)
20012718:	f9442583          	lw	a1,-108(s0)
2001271c:	fac42503          	lw	a0,-84(s0)
20012720:	9782                	jalr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:149
        }
    }
}
20012722:	50f6                	lw	ra,124(sp)
20012724:	52e6                	lw	t0,120(sp)
20012726:	5356                	lw	t1,116(sp)
20012728:	53c6                	lw	t2,112(sp)
2001272a:	5436                	lw	s0,108(sp)
2001272c:	5526                	lw	a0,104(sp)
2001272e:	5596                	lw	a1,100(sp)
20012730:	5606                	lw	a2,96(sp)
20012732:	46f6                	lw	a3,92(sp)
20012734:	4766                	lw	a4,88(sp)
20012736:	47d6                	lw	a5,84(sp)
20012738:	4846                	lw	a6,80(sp)
2001273a:	48b6                	lw	a7,76(sp)
2001273c:	4e26                	lw	t3,72(sp)
2001273e:	4e96                	lw	t4,68(sp)
20012740:	4f06                	lw	t5,64(sp)
20012742:	5ff2                	lw	t6,60(sp)
20012744:	6109                	addi	sp,sp,128
20012746:	30200073          	mret
	...

20012778 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:152

void __metal_controller_interrupt_vector (metal_vector_mode mode, void *vec_table)
{  
20012778:	7179                	addi	sp,sp,-48
2001277a:	d622                	sw	s0,44(sp)
2001277c:	1800                	addi	s0,sp,48
2001277e:	fca42e23          	sw	a0,-36(s0)
20012782:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:155
    uintptr_t trap_entry, val;

    asm volatile ("csrr %0, mtvec" : "=r"(val));
20012786:	305027f3          	csrr	a5,mtvec
2001278a:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:156
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
2001278e:	fec42783          	lw	a5,-20(s0)
20012792:	fc07f793          	andi	a5,a5,-64
20012796:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:157
    trap_entry = (uintptr_t)vec_table;
2001279a:	fd842783          	lw	a5,-40(s0)
2001279e:	fef42423          	sw	a5,-24(s0)
200127a2:	fdc42703          	lw	a4,-36(s0)
200127a6:	4785                	li	a5,1
200127a8:	04f70a63          	beq	a4,a5,200127fc <__metal_controller_interrupt_vector+0x84>
200127ac:	fdc42783          	lw	a5,-36(s0)
200127b0:	cfa9                	beqz	a5,2001280a <__metal_controller_interrupt_vector+0x92>
200127b2:	fdc42703          	lw	a4,-36(s0)
200127b6:	4789                	li	a5,2
200127b8:	00f70863          	beq	a4,a5,200127c8 <__metal_controller_interrupt_vector+0x50>
200127bc:	fdc42703          	lw	a4,-36(s0)
200127c0:	478d                	li	a5,3
200127c2:	02f70063          	beq	a4,a5,200127e2 <__metal_controller_interrupt_vector+0x6a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:175
        break;
    case METAL_DIRECT_MODE:
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
        break;
    }
}
200127c6:	a881                	j	20012816 <__metal_controller_interrupt_vector+0x9e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:161
        asm volatile ("csrw mtvt, %0" :: "r"(trap_entry | METAL_MTVEC_CLIC));
200127c8:	fe842783          	lw	a5,-24(s0)
200127cc:	0027e793          	ori	a5,a5,2
200127d0:	30779073          	csrw	mtvt,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:162
        asm volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC));
200127d4:	fec42783          	lw	a5,-20(s0)
200127d8:	0027e793          	ori	a5,a5,2
200127dc:	30579073          	csrw	mtvec,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:163
        break;
200127e0:	a81d                	j	20012816 <__metal_controller_interrupt_vector+0x9e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:165
        asm volatile ("csrw mtvt, %0" :: "r"(trap_entry | METAL_MTVEC_CLIC_VECTORED));
200127e2:	fe842783          	lw	a5,-24(s0)
200127e6:	0037e793          	ori	a5,a5,3
200127ea:	30779073          	csrw	mtvt,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:166
        asm volatile ("csrw mtvec, %0" :: "r"(val | METAL_MTVEC_CLIC_VECTORED));
200127ee:	fec42783          	lw	a5,-20(s0)
200127f2:	0037e793          	ori	a5,a5,3
200127f6:	30579073          	csrw	mtvec,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:167
        break;
200127fa:	a831                	j	20012816 <__metal_controller_interrupt_vector+0x9e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:169
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry | METAL_MTVEC_VECTORED));
200127fc:	fe842783          	lw	a5,-24(s0)
20012800:	0017e793          	ori	a5,a5,1
20012804:	30579073          	csrw	mtvec,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:170
        break;
20012808:	a039                	j	20012816 <__metal_controller_interrupt_vector+0x9e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:172
        asm volatile ("csrw mtvec, %0" :: "r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
2001280a:	fe842783          	lw	a5,-24(s0)
2001280e:	9bf1                	andi	a5,a5,-4
20012810:	30579073          	csrw	mtvec,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:173
        break;
20012814:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:175
}
20012816:	0001                	nop
20012818:	5432                	lw	s0,44(sp)
2001281a:	6145                	addi	sp,sp,48
2001281c:	8082                	ret

2001281e <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:178

int __metal_valid_interrupt_id (int id)
{
2001281e:	1101                	addi	sp,sp,-32
20012820:	ce22                	sw	s0,28(sp)
20012822:	1000                	addi	s0,sp,32
20012824:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:179
    switch (id) {
20012828:	fec42783          	lw	a5,-20(s0)
2001282c:	17f5                	addi	a5,a5,-3
2001282e:	4771                	li	a4,28
20012830:	00f76d63          	bltu	a4,a5,2001284a <__metal_valid_interrupt_id+0x2c>
20012834:	00279713          	slli	a4,a5,0x2
20012838:	200147b7          	lui	a5,0x20014
2001283c:	2a478793          	addi	a5,a5,676 # 200142a4 <__metal_driver_vtable_sifive_fe310_g000_pll+0x24>
20012840:	97ba                	add	a5,a5,a4
20012842:	439c                	lw	a5,0(a5)
20012844:	8782                	jr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:199
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        return 1;
20012846:	4785                	li	a5,1
20012848:	a019                	j	2001284e <__metal_valid_interrupt_id+0x30>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:201
    default:
        break;
2001284a:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:204
    }

    return 0;
2001284c:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:205
}
2001284e:	853e                	mv	a0,a5
20012850:	4472                	lw	s0,28(sp)
20012852:	6105                	addi	sp,sp,32
20012854:	8082                	ret

20012856 <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:210

 
int __metal_local_interrupt_enable (struct metal_interrupt *controller,
				  metal_interrupt_id_e id, int enable)
{
20012856:	7179                	addi	sp,sp,-48
20012858:	d606                	sw	ra,44(sp)
2001285a:	d422                	sw	s0,40(sp)
2001285c:	1800                	addi	s0,sp,48
2001285e:	fca42e23          	sw	a0,-36(s0)
20012862:	fcb42c23          	sw	a1,-40(s0)
20012866:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:211
    int rc = 0;
2001286a:	fe042623          	sw	zero,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:213
  
    if ( !controller) {
2001286e:	fdc42783          	lw	a5,-36(s0)
20012872:	e399                	bnez	a5,20012878 <__metal_local_interrupt_enable+0x22>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:214
        return -1;
20012874:	57fd                	li	a5,-1
20012876:	a8a5                	j	200128ee <__metal_local_interrupt_enable+0x98>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:217
    }

    switch (id) {
20012878:	fd842703          	lw	a4,-40(s0)
2001287c:	47fd                	li	a5,31
2001287e:	06e7e663          	bltu	a5,a4,200128ea <__metal_local_interrupt_enable+0x94>
20012882:	fd842783          	lw	a5,-40(s0)
20012886:	00279713          	slli	a4,a5,0x2
2001288a:	200147b7          	lui	a5,0x20014
2001288e:	31878793          	addi	a5,a5,792 # 20014318 <__metal_driver_vtable_sifive_fe310_g000_pll+0x98>
20012892:	97ba                	add	a5,a5,a4
20012894:	439c                	lw	a5,0(a5)
20012896:	8782                	jr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:219
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
20012898:	fd442783          	lw	a5,-44(s0)
2001289c:	c399                	beqz	a5,200128a2 <__metal_local_interrupt_enable+0x4c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:220
            __metal_interrupt_global_enable();
2001289e:	3e19                	jal	200123b4 <__metal_interrupt_global_enable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:224
        } else {
            __metal_interrupt_global_disable();
        }
        break;
200128a0:	a0a9                	j	200128ea <__metal_local_interrupt_enable+0x94>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:222
            __metal_interrupt_global_disable();
200128a2:	362d                	jal	200123cc <__metal_interrupt_global_disable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:224
        break;
200128a4:	a099                	j	200128ea <__metal_local_interrupt_enable+0x94>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:226
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
200128a6:	fd442783          	lw	a5,-44(s0)
200128aa:	c399                	beqz	a5,200128b0 <__metal_local_interrupt_enable+0x5a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:227
            __metal_interrupt_software_enable();
200128ac:	3e25                	jal	200123e4 <__metal_interrupt_software_enable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:231
        } else {
            __metal_interrupt_software_disable();
        }
        break;
200128ae:	a835                	j	200128ea <__metal_local_interrupt_enable+0x94>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:229
            __metal_interrupt_software_disable();
200128b0:	36b1                	jal	200123fc <__metal_interrupt_software_disable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:231
        break;
200128b2:	a825                	j	200128ea <__metal_local_interrupt_enable+0x94>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:233
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
200128b4:	fd442783          	lw	a5,-44(s0)
200128b8:	c399                	beqz	a5,200128be <__metal_local_interrupt_enable+0x68>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:234
	    __metal_interrupt_timer_enable();
200128ba:	3ea9                	jal	20012414 <__metal_interrupt_timer_enable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:238
	} else {
	    __metal_interrupt_timer_disable();
	}
	break;
200128bc:	a03d                	j	200128ea <__metal_local_interrupt_enable+0x94>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:236
	    __metal_interrupt_timer_disable();
200128be:	3e85                	jal	2001242e <__metal_interrupt_timer_disable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:238
	break;
200128c0:	a02d                	j	200128ea <__metal_local_interrupt_enable+0x94>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:240
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
200128c2:	fd442783          	lw	a5,-44(s0)
200128c6:	c399                	beqz	a5,200128cc <__metal_local_interrupt_enable+0x76>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:241
            __metal_interrupt_external_enable();
200128c8:	3641                	jal	20012448 <__metal_interrupt_external_enable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:245
        } else {
            __metal_interrupt_external_disable();
        }
        break;
200128ca:	a005                	j	200128ea <__metal_local_interrupt_enable+0x94>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:243
            __metal_interrupt_external_disable();
200128cc:	3e61                	jal	20012464 <__metal_interrupt_external_disable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:245
        break;
200128ce:	a831                	j	200128ea <__metal_local_interrupt_enable+0x94>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:262
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
200128d0:	fd442783          	lw	a5,-44(s0)
200128d4:	c791                	beqz	a5,200128e0 <__metal_local_interrupt_enable+0x8a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:263
            __metal_interrupt_local_enable(id);
200128d6:	fd842783          	lw	a5,-40(s0)
200128da:	853e                	mv	a0,a5
200128dc:	3655                	jal	20012480 <__metal_interrupt_local_enable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:267
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
200128de:	a029                	j	200128e8 <__metal_local_interrupt_enable+0x92>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:265
            __metal_interrupt_local_disable(id);
200128e0:	fd842783          	lw	a5,-40(s0)
200128e4:	853e                	mv	a0,a5
200128e6:	36d9                	jal	200124ac <__metal_interrupt_local_disable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:267
        break;
200128e8:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:271
    defaut:
        rc = -1;
    }
    return rc;
200128ea:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:272
}
200128ee:	853e                	mv	a0,a5
200128f0:	50b2                	lw	ra,44(sp)
200128f2:	5422                	lw	s0,40(sp)
200128f4:	6145                	addi	sp,sp,48
200128f6:	8082                	ret

200128f8 <__metal_exception_register>:
__metal_exception_register():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:276

int __metal_exception_register (struct metal_interrupt *controller,
                              int ecode, metal_exception_handler_t isr)
{
200128f8:	7179                	addi	sp,sp,-48
200128fa:	d622                	sw	s0,44(sp)
200128fc:	1800                	addi	s0,sp,48
200128fe:	fca42e23          	sw	a0,-36(s0)
20012902:	fcb42c23          	sw	a1,-40(s0)
20012906:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:277
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2001290a:	fdc42783          	lw	a5,-36(s0)
2001290e:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:279

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20012912:	fd842703          	lw	a4,-40(s0)
20012916:	47ad                	li	a5,11
20012918:	02e7c263          	blt	a5,a4,2001293c <__metal_exception_register+0x44>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:279 (discriminator 1)
2001291c:	fd442783          	lw	a5,-44(s0)
20012920:	cf91                	beqz	a5,2001293c <__metal_exception_register+0x44>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:280
        intc->metal_exception_table[ecode] = isr;
20012922:	fec42703          	lw	a4,-20(s0)
20012926:	fd842783          	lw	a5,-40(s0)
2001292a:	0e478793          	addi	a5,a5,228
2001292e:	078a                	slli	a5,a5,0x2
20012930:	97ba                	add	a5,a5,a4
20012932:	fd442703          	lw	a4,-44(s0)
20012936:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:281
        return 0;
20012938:	4781                	li	a5,0
2001293a:	a011                	j	2001293e <__metal_exception_register+0x46>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:283
    }
    return -1;
2001293c:	57fd                	li	a5,-1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:284
}
2001293e:	853e                	mv	a0,a5
20012940:	5432                	lw	s0,44(sp)
20012942:	6145                	addi	sp,sp,48
20012944:	8082                	ret

20012946 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:287

void __metal_driver_riscv_cpu_controller_interrupt_init (struct metal_interrupt *controller)
{
20012946:	7179                	addi	sp,sp,-48
20012948:	d606                	sw	ra,44(sp)
2001294a:	d422                	sw	s0,40(sp)
2001294c:	1800                	addi	s0,sp,48
2001294e:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:288
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20012952:	fdc42783          	lw	a5,-36(s0)
20012956:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:291
    uintptr_t val;

    if ( !intc->init_done ) {
2001295a:	fe442783          	lw	a5,-28(s0)
2001295e:	479c                	lw	a5,8(a5)
20012960:	ebe1                	bnez	a5,20012a30 <__metal_driver_riscv_cpu_controller_interrupt_init+0xea>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:293
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
20012962:	fe042623          	sw	zero,-20(s0)
20012966:	a0b9                	j	200129b4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:294 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
20012968:	fe442683          	lw	a3,-28(s0)
2001296c:	fec42703          	lw	a4,-20(s0)
20012970:	87ba                	mv	a5,a4
20012972:	0786                	slli	a5,a5,0x1
20012974:	97ba                	add	a5,a5,a4
20012976:	078e                	slli	a5,a5,0x3
20012978:	97b6                	add	a5,a5,a3
2001297a:	0807ac23          	sw	zero,152(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:295 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
2001297e:	fe442683          	lw	a3,-28(s0)
20012982:	fec42703          	lw	a4,-20(s0)
20012986:	87ba                	mv	a5,a4
20012988:	0786                	slli	a5,a5,0x1
2001298a:	97ba                	add	a5,a5,a4
2001298c:	078e                	slli	a5,a5,0x3
2001298e:	97b6                	add	a5,a5,a3
20012990:	0807ae23          	sw	zero,156(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:296 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20012994:	fe442683          	lw	a3,-28(s0)
20012998:	fec42703          	lw	a4,-20(s0)
2001299c:	87ba                	mv	a5,a4
2001299e:	0786                	slli	a5,a5,0x1
200129a0:	97ba                	add	a5,a5,a4
200129a2:	078e                	slli	a5,a5,0x3
200129a4:	97b6                	add	a5,a5,a3
200129a6:	0a07a023          	sw	zero,160(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:293 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
200129aa:	fec42783          	lw	a5,-20(s0)
200129ae:	0785                	addi	a5,a5,1
200129b0:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:293 (discriminator 1)
200129b4:	fec42703          	lw	a4,-20(s0)
200129b8:	47fd                	li	a5,31
200129ba:	fae7d7e3          	bge	a5,a4,20012968 <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:298
	}
	for (int i = 0; i < METAL_MAX_ME; i++) {
200129be:	fe042423          	sw	zero,-24(s0)
200129c2:	a01d                	j	200129e8 <__metal_driver_riscv_cpu_controller_interrupt_init+0xa2>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:299 (discriminator 3)
	    intc->metal_exception_table[i] = __metal_default_exception_handler;
200129c4:	fe442703          	lw	a4,-28(s0)
200129c8:	fe842783          	lw	a5,-24(s0)
200129cc:	0e478793          	addi	a5,a5,228
200129d0:	078a                	slli	a5,a5,0x2
200129d2:	97ba                	add	a5,a5,a4
200129d4:	20012737          	lui	a4,0x20012
200129d8:	4d870713          	addi	a4,a4,1240 # 200124d8 <__metal_default_exception_handler>
200129dc:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:298 (discriminator 3)
	for (int i = 0; i < METAL_MAX_ME; i++) {
200129de:	fe842783          	lw	a5,-24(s0)
200129e2:	0785                	addi	a5,a5,1
200129e4:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:298 (discriminator 1)
200129e8:	fe842703          	lw	a4,-24(s0)
200129ec:	47ad                	li	a5,11
200129ee:	fce7dbe3          	bge	a5,a4,200129c4 <__metal_driver_riscv_cpu_controller_interrupt_init+0x7e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:301
	}
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, &__metal_exception_handler);
200129f2:	200127b7          	lui	a5,0x20012
200129f6:	60078593          	addi	a1,a5,1536 # 20012600 <__metal_exception_handler>
200129fa:	4501                	li	a0,0
200129fc:	3bb5                	jal	20012778 <__metal_controller_interrupt_vector>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:302
	asm volatile ("csrr %0, misa" : "=r"(val));
200129fe:	301027f3          	csrr	a5,misa
20012a02:	fef42023          	sw	a5,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:303
	if (val & (METAL_ISA_D_EXTENSIONS | METAL_ISA_F_EXTENSIONS | METAL_ISA_Q_EXTENSIONS)) {
20012a06:	fe042703          	lw	a4,-32(s0)
20012a0a:	67c1                	lui	a5,0x10
20012a0c:	02878793          	addi	a5,a5,40 # 10028 <__heap_size+0xfc28>
20012a10:	8ff9                	and	a5,a5,a4
20012a12:	cb99                	beqz	a5,20012a28 <__metal_driver_riscv_cpu_controller_interrupt_init+0xe2>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:305
	    /* Floating point architecture, so turn on FP register saving*/
	    asm volatile ("csrr %0, mstatus" : "=r"(val));
20012a14:	300027f3          	csrr	a5,mstatus
20012a18:	fef42023          	sw	a5,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:306
	    asm volatile ("csrw mstatus, %0" :: "r"(val | METAL_MSTATUS_FS_INIT));
20012a1c:	fe042703          	lw	a4,-32(s0)
20012a20:	6789                	lui	a5,0x2
20012a22:	8fd9                	or	a5,a5,a4
20012a24:	30079073          	csrw	mstatus,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:308
	}
	intc->init_done = 1;
20012a28:	fe442783          	lw	a5,-28(s0)
20012a2c:	4705                	li	a4,1
20012a2e:	c798                	sw	a4,8(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:310
    }
}
20012a30:	0001                	nop
20012a32:	50b2                	lw	ra,44(sp)
20012a34:	5422                	lw	s0,40(sp)
20012a36:	6145                	addi	sp,sp,48
20012a38:	8082                	ret

20012a3a <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:315

int __metal_driver_riscv_cpu_controller_interrupt_register(struct metal_interrupt *controller,
							 int id, metal_interrupt_handler_t isr,
							 void *priv)
{
20012a3a:	7179                	addi	sp,sp,-48
20012a3c:	d606                	sw	ra,44(sp)
20012a3e:	d422                	sw	s0,40(sp)
20012a40:	1800                	addi	s0,sp,48
20012a42:	fca42e23          	sw	a0,-36(s0)
20012a46:	fcb42c23          	sw	a1,-40(s0)
20012a4a:	fcc42a23          	sw	a2,-44(s0)
20012a4e:	fcd42823          	sw	a3,-48(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:316
    int rc = 0;
20012a52:	fe042623          	sw	zero,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:317
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20012a56:	fdc42783          	lw	a5,-36(s0)
20012a5a:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:319
 
    if ( !__metal_valid_interrupt_id(id) ) {
20012a5e:	fd842503          	lw	a0,-40(s0)
20012a62:	3b75                	jal	2001281e <__metal_valid_interrupt_id>
20012a64:	87aa                	mv	a5,a0
20012a66:	e399                	bnez	a5,20012a6c <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:320
        return -11;
20012a68:	57d5                	li	a5,-11
20012a6a:	a239                	j	20012b78 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:323
    }

    if (isr) {
20012a6c:	fd442783          	lw	a5,-44(s0)
20012a70:	cf85                	beqz	a5,20012aa8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x6e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:324
        intc->metal_int_table[id].handler = isr;
20012a72:	fe842683          	lw	a3,-24(s0)
20012a76:	fd842703          	lw	a4,-40(s0)
20012a7a:	87ba                	mv	a5,a4
20012a7c:	0786                	slli	a5,a5,0x1
20012a7e:	97ba                	add	a5,a5,a4
20012a80:	078e                	slli	a5,a5,0x3
20012a82:	97b6                	add	a5,a5,a3
20012a84:	fd442703          	lw	a4,-44(s0)
20012a88:	08e7ac23          	sw	a4,152(a5) # 2098 <__heap_size+0x1c98>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:325
        intc->metal_int_table[id].exint_data = priv;
20012a8c:	fe842683          	lw	a3,-24(s0)
20012a90:	fd842703          	lw	a4,-40(s0)
20012a94:	87ba                	mv	a5,a4
20012a96:	0786                	slli	a5,a5,0x1
20012a98:	97ba                	add	a5,a5,a4
20012a9a:	078e                	slli	a5,a5,0x3
20012a9c:	97b6                	add	a5,a5,a3
20012a9e:	fd042703          	lw	a4,-48(s0)
20012aa2:	0ae7a023          	sw	a4,160(a5)
20012aa6:	a0f9                	j	20012b74 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:327
    } else {
	switch (id) {
20012aa8:	fd842783          	lw	a5,-40(s0)
20012aac:	17f5                	addi	a5,a5,-3
20012aae:	4771                	li	a4,28
20012ab0:	0cf76263          	bltu	a4,a5,20012b74 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
20012ab4:	00279713          	slli	a4,a5,0x2
20012ab8:	200147b7          	lui	a5,0x20014
20012abc:	39878793          	addi	a5,a5,920 # 20014398 <__metal_driver_vtable_sifive_fe310_g000_pll+0x118>
20012ac0:	97ba                	add	a5,a5,a4
20012ac2:	439c                	lw	a5,0(a5)
20012ac4:	8782                	jr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:329
	case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
20012ac6:	fe842683          	lw	a3,-24(s0)
20012aca:	fd842703          	lw	a4,-40(s0)
20012ace:	87ba                	mv	a5,a4
20012ad0:	0786                	slli	a5,a5,0x1
20012ad2:	97ba                	add	a5,a5,a4
20012ad4:	078e                	slli	a5,a5,0x3
20012ad6:	97b6                	add	a5,a5,a3
20012ad8:	20012737          	lui	a4,0x20012
20012adc:	50870713          	addi	a4,a4,1288 # 20012508 <__metal_default_sw_handler>
20012ae0:	08e7ac23          	sw	a4,152(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:330
            intc->metal_int_table[id].sub_int = priv;
20012ae4:	fe842683          	lw	a3,-24(s0)
20012ae8:	fd842703          	lw	a4,-40(s0)
20012aec:	87ba                	mv	a5,a4
20012aee:	0786                	slli	a5,a5,0x1
20012af0:	97ba                	add	a5,a5,a4
20012af2:	078e                	slli	a5,a5,0x3
20012af4:	97b6                	add	a5,a5,a3
20012af6:	fd042703          	lw	a4,-48(s0)
20012afa:	08e7ae23          	sw	a4,156(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:331
	  break;
20012afe:	a89d                	j	20012b74 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:333
	case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
20012b00:	fe842683          	lw	a3,-24(s0)
20012b04:	fd842703          	lw	a4,-40(s0)
20012b08:	87ba                	mv	a5,a4
20012b0a:	0786                	slli	a5,a5,0x1
20012b0c:	97ba                	add	a5,a5,a4
20012b0e:	078e                	slli	a5,a5,0x3
20012b10:	97b6                	add	a5,a5,a3
20012b12:	20012737          	lui	a4,0x20012
20012b16:	56c70713          	addi	a4,a4,1388 # 2001256c <__metal_default_timer_handler>
20012b1a:	08e7ac23          	sw	a4,152(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:334
            intc->metal_int_table[id].sub_int = priv;
20012b1e:	fe842683          	lw	a3,-24(s0)
20012b22:	fd842703          	lw	a4,-40(s0)
20012b26:	87ba                	mv	a5,a4
20012b28:	0786                	slli	a5,a5,0x1
20012b2a:	97ba                	add	a5,a5,a4
20012b2c:	078e                	slli	a5,a5,0x3
20012b2e:	97b6                	add	a5,a5,a3
20012b30:	fd042703          	lw	a4,-48(s0)
20012b34:	08e7ae23          	sw	a4,156(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:335
	  break;
20012b38:	a835                	j	20012b74 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:353
	case METAL_INTERRUPT_ID_LC11:
	case METAL_INTERRUPT_ID_LC12:
	case METAL_INTERRUPT_ID_LC13:
	case METAL_INTERRUPT_ID_LC14:
	case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler = __metal_default_interrupt_handler;
20012b3a:	fe842683          	lw	a3,-24(s0)
20012b3e:	fd842703          	lw	a4,-40(s0)
20012b42:	87ba                	mv	a5,a4
20012b44:	0786                	slli	a5,a5,0x1
20012b46:	97ba                	add	a5,a5,a4
20012b48:	078e                	slli	a5,a5,0x3
20012b4a:	97b6                	add	a5,a5,a3
20012b4c:	20012737          	lui	a4,0x20012
20012b50:	4f070713          	addi	a4,a4,1264 # 200124f0 <__metal_default_interrupt_handler>
20012b54:	08e7ac23          	sw	a4,152(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:354
            intc->metal_int_table[id].sub_int = priv;
20012b58:	fe842683          	lw	a3,-24(s0)
20012b5c:	fd842703          	lw	a4,-40(s0)
20012b60:	87ba                	mv	a5,a4
20012b62:	0786                	slli	a5,a5,0x1
20012b64:	97ba                	add	a5,a5,a4
20012b66:	078e                	slli	a5,a5,0x3
20012b68:	97b6                	add	a5,a5,a3
20012b6a:	fd042703          	lw	a4,-48(s0)
20012b6e:	08e7ae23          	sw	a4,156(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:355
	  break;
20012b72:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:360
	defaut:
	  rc = -12;
	}
    }
    return rc;
20012b74:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:361
}
20012b78:	853e                	mv	a0,a5
20012b7a:	50b2                	lw	ra,44(sp)
20012b7c:	5422                	lw	s0,40(sp)
20012b7e:	6145                	addi	sp,sp,48
20012b80:	8082                	ret

20012b82 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:365

int __metal_driver_riscv_cpu_controller_interrupt_enable (struct metal_interrupt *controller,
                                                        int id)
{
20012b82:	1101                	addi	sp,sp,-32
20012b84:	ce06                	sw	ra,28(sp)
20012b86:	cc22                	sw	s0,24(sp)
20012b88:	1000                	addi	s0,sp,32
20012b8a:	fea42623          	sw	a0,-20(s0)
20012b8e:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:366
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20012b92:	fe842783          	lw	a5,-24(s0)
20012b96:	4605                	li	a2,1
20012b98:	85be                	mv	a1,a5
20012b9a:	fec42503          	lw	a0,-20(s0)
20012b9e:	3965                	jal	20012856 <__metal_local_interrupt_enable>
20012ba0:	87aa                	mv	a5,a0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:367
}
20012ba2:	853e                	mv	a0,a5
20012ba4:	40f2                	lw	ra,28(sp)
20012ba6:	4462                	lw	s0,24(sp)
20012ba8:	6105                	addi	sp,sp,32
20012baa:	8082                	ret

20012bac <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:371

int __metal_driver_riscv_cpu_controller_interrupt_disable (struct metal_interrupt *controller,
                                                         int id)
{   
20012bac:	1101                	addi	sp,sp,-32
20012bae:	ce06                	sw	ra,28(sp)
20012bb0:	cc22                	sw	s0,24(sp)
20012bb2:	1000                	addi	s0,sp,32
20012bb4:	fea42623          	sw	a0,-20(s0)
20012bb8:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:372
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20012bbc:	fe842783          	lw	a5,-24(s0)
20012bc0:	4601                	li	a2,0
20012bc2:	85be                	mv	a1,a5
20012bc4:	fec42503          	lw	a0,-20(s0)
20012bc8:	3179                	jal	20012856 <__metal_local_interrupt_enable>
20012bca:	87aa                	mv	a5,a0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:373
}
20012bcc:	853e                	mv	a0,a5
20012bce:	40f2                	lw	ra,28(sp)
20012bd0:	4462                	lw	s0,24(sp)
20012bd2:	6105                	addi	sp,sp,32
20012bd4:	8082                	ret

20012bd6 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_enable_vector():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:377

int __metal_driver_riscv_cpu_controller_interrupt_enable_vector(struct metal_interrupt *controller,
                                                             int id, metal_vector_mode mode)
{
20012bd6:	7179                	addi	sp,sp,-48
20012bd8:	d606                	sw	ra,44(sp)
20012bda:	d422                	sw	s0,40(sp)
20012bdc:	1800                	addi	s0,sp,48
20012bde:	fca42e23          	sw	a0,-36(s0)
20012be2:	fcb42c23          	sw	a1,-40(s0)
20012be6:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:378
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20012bea:	fdc42783          	lw	a5,-36(s0)
20012bee:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:380

    if (id == METAL_INTERRUPT_ID_BASE) {
20012bf2:	fd842783          	lw	a5,-40(s0)
20012bf6:	eb9d                	bnez	a5,20012c2c <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x56>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:381
        if (mode == METAL_DIRECT_MODE) {
20012bf8:	fd442783          	lw	a5,-44(s0)
20012bfc:	eb91                	bnez	a5,20012c10 <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x3a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:382
            __metal_controller_interrupt_vector(mode, &__metal_exception_handler);
20012bfe:	200127b7          	lui	a5,0x20012
20012c02:	60078593          	addi	a1,a5,1536 # 20012600 <__metal_exception_handler>
20012c06:	fd442503          	lw	a0,-44(s0)
20012c0a:	36bd                	jal	20012778 <__metal_controller_interrupt_vector>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:383
            return 0;
20012c0c:	4781                	li	a5,0
20012c0e:	a005                	j	20012c2e <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x58>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:385
        }   
        if (mode == METAL_VECTOR_MODE) {
20012c10:	fd442703          	lw	a4,-44(s0)
20012c14:	4785                	li	a5,1
20012c16:	00f71b63          	bne	a4,a5,20012c2c <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x56>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:386
            __metal_controller_interrupt_vector(mode, &intc->metal_mtvec_table);
20012c1a:	fec42783          	lw	a5,-20(s0)
20012c1e:	07c1                	addi	a5,a5,16
20012c20:	85be                	mv	a1,a5
20012c22:	fd442503          	lw	a0,-44(s0)
20012c26:	3e89                	jal	20012778 <__metal_controller_interrupt_vector>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:387
            return 0;
20012c28:	4781                	li	a5,0
20012c2a:	a011                	j	20012c2e <__metal_driver_riscv_cpu_controller_interrupt_enable_vector+0x58>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:390
        }
    }
    return -1;
20012c2c:	57fd                	li	a5,-1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:391
}
20012c2e:	853e                	mv	a0,a5
20012c30:	50b2                	lw	ra,44(sp)
20012c32:	5422                	lw	s0,40(sp)
20012c34:	6145                	addi	sp,sp,48
20012c36:	8082                	ret

20012c38 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector>:
__metal_driver_riscv_cpu_controller_interrupt_disable_vector():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:395

int __metal_driver_riscv_cpu_controller_interrupt_disable_vector(struct metal_interrupt *controller,
                                                              int id)
{
20012c38:	7179                	addi	sp,sp,-48
20012c3a:	d606                	sw	ra,44(sp)
20012c3c:	d422                	sw	s0,40(sp)
20012c3e:	1800                	addi	s0,sp,48
20012c40:	fca42e23          	sw	a0,-36(s0)
20012c44:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:396
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
20012c48:	fdc42783          	lw	a5,-36(s0)
20012c4c:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:398

    if (id == METAL_INTERRUPT_ID_BASE) {
20012c50:	fd842783          	lw	a5,-40(s0)
20012c54:	eb89                	bnez	a5,20012c66 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x2e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:399
        __metal_controller_interrupt_vector(METAL_DIRECT_MODE, &__metal_exception_handler);
20012c56:	200127b7          	lui	a5,0x20012
20012c5a:	60078593          	addi	a1,a5,1536 # 20012600 <__metal_exception_handler>
20012c5e:	4501                	li	a0,0
20012c60:	3e21                	jal	20012778 <__metal_controller_interrupt_vector>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:400
        return 0;
20012c62:	4781                	li	a5,0
20012c64:	a011                	j	20012c68 <__metal_driver_riscv_cpu_controller_interrupt_disable_vector+0x30>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:402
    }
    return -1;
20012c66:	57fd                	li	a5,-1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:403
}
20012c68:	853e                	mv	a0,a5
20012c6a:	50b2                	lw	ra,44(sp)
20012c6c:	5422                	lw	s0,40(sp)
20012c6e:	6145                	addi	sp,sp,48
20012c70:	8082                	ret

20012c72 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:407

int __metal_driver_riscv_cpu_controller_command_request (struct metal_interrupt *controller,
						       int cmd, void *data)
{
20012c72:	1101                	addi	sp,sp,-32
20012c74:	ce22                	sw	s0,28(sp)
20012c76:	1000                	addi	s0,sp,32
20012c78:	fea42623          	sw	a0,-20(s0)
20012c7c:	feb42423          	sw	a1,-24(s0)
20012c80:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:409
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic */
    return 0;
20012c84:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:410
}
20012c86:	853e                	mv	a0,a5
20012c88:	4472                	lw	s0,28(sp)
20012c8a:	6105                	addi	sp,sp,32
20012c8c:	8082                	ret

20012c8e <__metal_driver_cpu_timer_get>:
__metal_driver_cpu_timer_get():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:417
extern inline int __metal_controller_interrupt_is_selective_vectored(void);

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_timer_get(struct metal_cpu *cpu)
{
20012c8e:	7139                	addi	sp,sp,-64
20012c90:	de22                	sw	s0,60(sp)
20012c92:	0080                	addi	s0,sp,64
20012c94:	fca42623          	sw	a0,-52(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:418
    unsigned long long val = 0;
20012c98:	4301                	li	t1,0
20012c9a:	4381                	li	t2,0
20012c9c:	fe642423          	sw	t1,-24(s0)
20012ca0:	fe742623          	sw	t2,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:423

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    asm volatile ("csrr %0, mcycleh" : "=r"(hi));
20012ca4:	b8002573          	csrr	a0,mcycleh
20012ca8:	fea42223          	sw	a0,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:424
    asm volatile ("csrr %0, mcycle" : "=r"(lo));
20012cac:	b0002573          	csrr	a0,mcycle
20012cb0:	fea42023          	sw	a0,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:425
    asm volatile ("csrr %0, mcycleh" : "=r"(hi1));
20012cb4:	b8002573          	csrr	a0,mcycleh
20012cb8:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:426
    if (hi == hi1) {
20012cbc:	fe442883          	lw	a7,-28(s0)
20012cc0:	fdc42503          	lw	a0,-36(s0)
20012cc4:	02a89563          	bne	a7,a0,20012cee <__metal_driver_cpu_timer_get+0x60>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:427
        val = ((unsigned long long)hi << 32) | lo;
20012cc8:	fe442503          	lw	a0,-28(s0)
20012ccc:	85aa                	mv	a1,a0
20012cce:	4601                	li	a2,0
20012cd0:	00059813          	slli	a6,a1,0x0
20012cd4:	4781                	li	a5,0
20012cd6:	fe042603          	lw	a2,-32(s0)
20012cda:	86b2                	mv	a3,a2
20012cdc:	4701                	li	a4,0
20012cde:	00d7e633          	or	a2,a5,a3
20012ce2:	fec42423          	sw	a2,-24(s0)
20012ce6:	00e867b3          	or	a5,a6,a4
20012cea:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:433
    }
#else
    asm volatile ("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20012cee:	fe842783          	lw	a5,-24(s0)
20012cf2:	fec42803          	lw	a6,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:434
}
20012cf6:	853e                	mv	a0,a5
20012cf8:	85c2                	mv	a1,a6
20012cfa:	5472                	lw	s0,60(sp)
20012cfc:	6121                	addi	sp,sp,64
20012cfe:	8082                	ret

20012d00 <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:437

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu)
{
20012d00:	7179                	addi	sp,sp,-48
20012d02:	d622                	sw	s0,44(sp)
20012d04:	1800                	addi	s0,sp,48
20012d06:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:438
    struct __metal_driver_cpu *_cpu = (void *)(cpu);
20012d0a:	fdc42703          	lw	a4,-36(s0)
20012d0e:	fee42623          	sw	a4,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:439
    if (!_cpu) {
20012d12:	fec42703          	lw	a4,-20(s0)
20012d16:	e701                	bnez	a4,20012d1e <__metal_driver_cpu_timebase_get+0x1e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:440
        return 0;
20012d18:	4781                	li	a5,0
20012d1a:	4801                	li	a6,0
20012d1c:	a039                	j	20012d2a <__metal_driver_cpu_timebase_get+0x2a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:443
    }

    return _cpu->timebase;
20012d1e:	fec42703          	lw	a4,-20(s0)
20012d22:	4718                	lw	a4,8(a4)
20012d24:	87ba                	mv	a5,a4
20012d26:	877d                	srai	a4,a4,0x1f
20012d28:	883a                	mv	a6,a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:444
}
20012d2a:	853e                	mv	a0,a5
20012d2c:	85c2                	mv	a1,a6
20012d2e:	5432                	lw	s0,44(sp)
20012d30:	6145                	addi	sp,sp,48
20012d32:	8082                	ret

20012d34 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:447

unsigned long long  __metal_driver_cpu_mtime_get (struct metal_cpu *cpu)
{
20012d34:	7139                	addi	sp,sp,-64
20012d36:	de06                	sw	ra,60(sp)
20012d38:	dc22                	sw	s0,56(sp)
20012d3a:	0080                	addi	s0,sp,64
20012d3c:	fca42623          	sw	a0,-52(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:448
    unsigned long long time = 0;
20012d40:	4781                	li	a5,0
20012d42:	4801                	li	a6,0
20012d44:	fcf42c23          	sw	a5,-40(s0)
20012d48:	fd042e23          	sw	a6,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:451
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20012d4c:	fcc42783          	lw	a5,-52(s0)
20012d50:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:453

    if (_cpu->interrupt_controller) {
20012d54:	fec42783          	lw	a5,-20(s0)
20012d58:	47dc                	lw	a5,12(a5)
20012d5a:	cb95                	beqz	a5,20012d8e <__metal_driver_cpu_mtime_get+0x5a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:454
        intc = (void *)_cpu->interrupt_controller;
20012d5c:	fec42783          	lw	a5,-20(s0)
20012d60:	47dc                	lw	a5,12(a5)
20012d62:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:455
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20012d66:	fe842783          	lw	a5,-24(s0)
20012d6a:	1447a783          	lw	a5,324(a5)
20012d6e:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:456
        if (tmr_intc) {
20012d72:	fe442783          	lw	a5,-28(s0)
20012d76:	cf81                	beqz	a5,20012d8e <__metal_driver_cpu_mtime_get+0x5a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:457
            tmr_intc->vtable->command_request(tmr_intc,
20012d78:	fe442783          	lw	a5,-28(s0)
20012d7c:	439c                	lw	a5,0(a5)
20012d7e:	4f98                	lw	a4,24(a5)
20012d80:	fd840793          	addi	a5,s0,-40
20012d84:	863e                	mv	a2,a5
20012d86:	4585                	li	a1,1
20012d88:	fe442503          	lw	a0,-28(s0)
20012d8c:	9702                	jalr	a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:461
                                              METAL_TIMER_MTIME_GET, &time);
        }
    }
    return time;
20012d8e:	fd842783          	lw	a5,-40(s0)
20012d92:	fdc42803          	lw	a6,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:462
}
20012d96:	853e                	mv	a0,a5
20012d98:	85c2                	mv	a1,a6
20012d9a:	50f2                	lw	ra,60(sp)
20012d9c:	5462                	lw	s0,56(sp)
20012d9e:	6121                	addi	sp,sp,64
20012da0:	8082                	ret

20012da2 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:465

int __metal_driver_cpu_mtimecmp_set (struct metal_cpu *cpu, unsigned long long time)
{
20012da2:	7179                	addi	sp,sp,-48
20012da4:	d606                	sw	ra,44(sp)
20012da6:	d422                	sw	s0,40(sp)
20012da8:	1800                	addi	s0,sp,48
20012daa:	fca42e23          	sw	a0,-36(s0)
20012dae:	fcb42823          	sw	a1,-48(s0)
20012db2:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:466
    int rc = -1;
20012db6:	57fd                	li	a5,-1
20012db8:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:469
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20012dbc:	fdc42783          	lw	a5,-36(s0)
20012dc0:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:471

    if (_cpu->interrupt_controller) {
20012dc4:	fe842783          	lw	a5,-24(s0)
20012dc8:	47dc                	lw	a5,12(a5)
20012dca:	cf85                	beqz	a5,20012e02 <__metal_driver_cpu_mtimecmp_set+0x60>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:472
        intc = (void *)_cpu->interrupt_controller;
20012dcc:	fe842783          	lw	a5,-24(s0)
20012dd0:	47dc                	lw	a5,12(a5)
20012dd2:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:473
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20012dd6:	fe442783          	lw	a5,-28(s0)
20012dda:	1447a783          	lw	a5,324(a5)
20012dde:	fef42023          	sw	a5,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:474
        if (tmr_intc) {
20012de2:	fe042783          	lw	a5,-32(s0)
20012de6:	cf91                	beqz	a5,20012e02 <__metal_driver_cpu_mtimecmp_set+0x60>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:475
            rc = tmr_intc->vtable->command_request(tmr_intc,
20012de8:	fe042783          	lw	a5,-32(s0)
20012dec:	439c                	lw	a5,0(a5)
20012dee:	4f98                	lw	a4,24(a5)
20012df0:	fd040793          	addi	a5,s0,-48
20012df4:	863e                	mv	a2,a5
20012df6:	4589                	li	a1,2
20012df8:	fe042503          	lw	a0,-32(s0)
20012dfc:	9702                	jalr	a4
20012dfe:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:479
                                                   METAL_TIMER_MTIME_SET, &time);
        }
    }
    return rc;
20012e02:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:480
}
20012e06:	853e                	mv	a0,a5
20012e08:	50b2                	lw	ra,44(sp)
20012e0a:	5422                	lw	s0,40(sp)
20012e0c:	6145                	addi	sp,sp,48
20012e0e:	8082                	ret

20012e10 <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:484

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu)
{
20012e10:	1101                	addi	sp,sp,-32
20012e12:	ce22                	sw	s0,28(sp)
20012e14:	1000                	addi	s0,sp,32
20012e16:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:486
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20012e1a:	800017b7          	lui	a5,0x80001
20012e1e:	86878793          	addi	a5,a5,-1944 # 80000868 <metal_segment_heap_target_end+0xffffc868>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:495
#else
#warning "There is no interrupt controller for Timer interrupt"
    return NULL;
#endif
#endif
}
20012e22:	853e                	mv	a0,a5
20012e24:	4472                	lw	s0,28(sp)
20012e26:	6105                	addi	sp,sp,32
20012e28:	8082                	ret

20012e2a <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:498

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu)
{
20012e2a:	1101                	addi	sp,sp,-32
20012e2c:	ce22                	sw	s0,28(sp)
20012e2e:	1000                	addi	s0,sp,32
20012e30:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:499
    return METAL_INTERRUPT_ID_TMR;
20012e34:	479d                	li	a5,7
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:500
}
20012e36:	853e                	mv	a0,a5
20012e38:	4472                	lw	s0,28(sp)
20012e3a:	6105                	addi	sp,sp,32
20012e3c:	8082                	ret

20012e3e <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:504

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu)
{
20012e3e:	1101                	addi	sp,sp,-32
20012e40:	ce22                	sw	s0,28(sp)
20012e42:	1000                	addi	s0,sp,32
20012e44:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:506
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20012e48:	800017b7          	lui	a5,0x80001
20012e4c:	86878793          	addi	a5,a5,-1944 # 80000868 <metal_segment_heap_target_end+0xffffc868>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:515
#else
#warning "There is no interrupt controller for Software interrupt"
    return NULL;
#endif
#endif
}
20012e50:	853e                	mv	a0,a5
20012e52:	4472                	lw	s0,28(sp)
20012e54:	6105                	addi	sp,sp,32
20012e56:	8082                	ret

20012e58 <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:518

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu)
{
20012e58:	1101                	addi	sp,sp,-32
20012e5a:	ce22                	sw	s0,28(sp)
20012e5c:	1000                	addi	s0,sp,32
20012e5e:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:519
    return METAL_INTERRUPT_ID_SW;
20012e62:	478d                	li	a5,3
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:520
}
20012e64:	853e                	mv	a0,a5
20012e66:	4472                	lw	s0,28(sp)
20012e68:	6105                	addi	sp,sp,32
20012e6a:	8082                	ret

20012e6c <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:523

int __metal_driver_cpu_set_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20012e6c:	7179                	addi	sp,sp,-48
20012e6e:	d606                	sw	ra,44(sp)
20012e70:	d422                	sw	s0,40(sp)
20012e72:	1800                	addi	s0,sp,48
20012e74:	fca42e23          	sw	a0,-36(s0)
20012e78:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:524
    int rc = -1;
20012e7c:	57fd                	li	a5,-1
20012e7e:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:527
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20012e82:	fdc42783          	lw	a5,-36(s0)
20012e86:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:529

    if (_cpu->interrupt_controller) {
20012e8a:	fe842783          	lw	a5,-24(s0)
20012e8e:	47dc                	lw	a5,12(a5)
20012e90:	cf85                	beqz	a5,20012ec8 <__metal_driver_cpu_set_sw_ipi+0x5c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:530
        intc = (void *)_cpu->interrupt_controller;
20012e92:	fe842783          	lw	a5,-24(s0)
20012e96:	47dc                	lw	a5,12(a5)
20012e98:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:531
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20012e9c:	fe442783          	lw	a5,-28(s0)
20012ea0:	0e47a783          	lw	a5,228(a5)
20012ea4:	fef42023          	sw	a5,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:532
        if (sw_intc) {
20012ea8:	fe042783          	lw	a5,-32(s0)
20012eac:	cf91                	beqz	a5,20012ec8 <__metal_driver_cpu_set_sw_ipi+0x5c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:533
            rc = sw_intc->vtable->command_request(sw_intc,
20012eae:	fe042783          	lw	a5,-32(s0)
20012eb2:	439c                	lw	a5,0(a5)
20012eb4:	4f98                	lw	a4,24(a5)
20012eb6:	fd840793          	addi	a5,s0,-40
20012eba:	863e                	mv	a2,a5
20012ebc:	4591                	li	a1,4
20012ebe:	fe042503          	lw	a0,-32(s0)
20012ec2:	9702                	jalr	a4
20012ec4:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:537
                                                  METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20012ec8:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:538
}
20012ecc:	853e                	mv	a0,a5
20012ece:	50b2                	lw	ra,44(sp)
20012ed0:	5422                	lw	s0,40(sp)
20012ed2:	6145                	addi	sp,sp,48
20012ed4:	8082                	ret

20012ed6 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:541

int __metal_driver_cpu_clear_sw_ipi (struct metal_cpu *cpu, int hartid)
{
20012ed6:	7179                	addi	sp,sp,-48
20012ed8:	d606                	sw	ra,44(sp)
20012eda:	d422                	sw	s0,40(sp)
20012edc:	1800                	addi	s0,sp,48
20012ede:	fca42e23          	sw	a0,-36(s0)
20012ee2:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:542
    int rc = -1;
20012ee6:	57fd                	li	a5,-1
20012ee8:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:545
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20012eec:	fdc42783          	lw	a5,-36(s0)
20012ef0:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:547

    if (_cpu->interrupt_controller) {
20012ef4:	fe842783          	lw	a5,-24(s0)
20012ef8:	47dc                	lw	a5,12(a5)
20012efa:	cf85                	beqz	a5,20012f32 <__metal_driver_cpu_clear_sw_ipi+0x5c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:548
        intc = (void *)_cpu->interrupt_controller;
20012efc:	fe842783          	lw	a5,-24(s0)
20012f00:	47dc                	lw	a5,12(a5)
20012f02:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:549
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20012f06:	fe442783          	lw	a5,-28(s0)
20012f0a:	0e47a783          	lw	a5,228(a5)
20012f0e:	fef42023          	sw	a5,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:550
        if (sw_intc) {
20012f12:	fe042783          	lw	a5,-32(s0)
20012f16:	cf91                	beqz	a5,20012f32 <__metal_driver_cpu_clear_sw_ipi+0x5c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:551
            rc = sw_intc->vtable->command_request(sw_intc,
20012f18:	fe042783          	lw	a5,-32(s0)
20012f1c:	439c                	lw	a5,0(a5)
20012f1e:	4f98                	lw	a4,24(a5)
20012f20:	fd840793          	addi	a5,s0,-40
20012f24:	863e                	mv	a2,a5
20012f26:	458d                	li	a1,3
20012f28:	fe042503          	lw	a0,-32(s0)
20012f2c:	9702                	jalr	a4
20012f2e:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:555
                                                  METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20012f32:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:556
}
20012f36:	853e                	mv	a0,a5
20012f38:	50b2                	lw	ra,44(sp)
20012f3a:	5422                	lw	s0,40(sp)
20012f3c:	6145                	addi	sp,sp,48
20012f3e:	8082                	ret

20012f40 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:559

int __metal_driver_cpu_get_msip (struct metal_cpu *cpu, int hartid)
{
20012f40:	7179                	addi	sp,sp,-48
20012f42:	d606                	sw	ra,44(sp)
20012f44:	d422                	sw	s0,40(sp)
20012f46:	1800                	addi	s0,sp,48
20012f48:	fca42e23          	sw	a0,-36(s0)
20012f4c:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:560
    int rc = 0;
20012f50:	fe042623          	sw	zero,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:563
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *_cpu = (void *)cpu;
20012f54:	fdc42783          	lw	a5,-36(s0)
20012f58:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:565

    if (_cpu->interrupt_controller) {
20012f5c:	fe842783          	lw	a5,-24(s0)
20012f60:	47dc                	lw	a5,12(a5)
20012f62:	cf85                	beqz	a5,20012f9a <__metal_driver_cpu_get_msip+0x5a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:566
        intc = (void *)_cpu->interrupt_controller;
20012f64:	fe842783          	lw	a5,-24(s0)
20012f68:	47dc                	lw	a5,12(a5)
20012f6a:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:567
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20012f6e:	fe442783          	lw	a5,-28(s0)
20012f72:	0e47a783          	lw	a5,228(a5)
20012f76:	fef42023          	sw	a5,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:568
        if (sw_intc) {
20012f7a:	fe042783          	lw	a5,-32(s0)
20012f7e:	cf91                	beqz	a5,20012f9a <__metal_driver_cpu_get_msip+0x5a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:569
            rc = sw_intc->vtable->command_request(sw_intc,
20012f80:	fe042783          	lw	a5,-32(s0)
20012f84:	439c                	lw	a5,0(a5)
20012f86:	4f98                	lw	a4,24(a5)
20012f88:	fd840793          	addi	a5,s0,-40
20012f8c:	863e                	mv	a2,a5
20012f8e:	4595                	li	a1,5
20012f90:	fe042503          	lw	a0,-32(s0)
20012f94:	9702                	jalr	a4
20012f96:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:573
                                                  METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20012f9a:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:574
}
20012f9e:	853e                	mv	a0,a5
20012fa0:	50b2                	lw	ra,44(sp)
20012fa2:	5422                	lw	s0,40(sp)
20012fa4:	6145                	addi	sp,sp,48
20012fa6:	8082                	ret

20012fa8 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:578

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu)
{
20012fa8:	7179                	addi	sp,sp,-48
20012faa:	d622                	sw	s0,44(sp)
20012fac:	1800                	addi	s0,sp,48
20012fae:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:579
    struct __metal_driver_cpu *cpu0 = (void *)cpu;
20012fb2:	fdc42783          	lw	a5,-36(s0)
20012fb6:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:580
    return (struct metal_interrupt *)cpu0->interrupt_controller;
20012fba:	fec42783          	lw	a5,-20(s0)
20012fbe:	47dc                	lw	a5,12(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:581
}
20012fc0:	853e                	mv	a0,a5
20012fc2:	5432                	lw	s0,44(sp)
20012fc4:	6145                	addi	sp,sp,48
20012fc6:	8082                	ret

20012fc8 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:607
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
				        metal_exception_handler_t isr)
{
20012fc8:	7179                	addi	sp,sp,-48
20012fca:	d606                	sw	ra,44(sp)
20012fcc:	d422                	sw	s0,40(sp)
20012fce:	1800                	addi	s0,sp,48
20012fd0:	fca42e23          	sw	a0,-36(s0)
20012fd4:	fcb42c23          	sw	a1,-40(s0)
20012fd8:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:608
    struct __metal_driver_cpu *cpu0 = (void *)cpu;
20012fdc:	fdc42783          	lw	a5,-36(s0)
20012fe0:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:609
    if (cpu0->interrupt_controller) {
20012fe4:	fec42783          	lw	a5,-20(s0)
20012fe8:	47dc                	lw	a5,12(a5)
20012fea:	cf89                	beqz	a5,20013004 <__metal_driver_cpu_exception_register+0x3c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:610
	return __metal_exception_register(cpu0->interrupt_controller, ecode, isr);
20012fec:	fec42783          	lw	a5,-20(s0)
20012ff0:	47dc                	lw	a5,12(a5)
20012ff2:	fd442603          	lw	a2,-44(s0)
20012ff6:	fd842583          	lw	a1,-40(s0)
20012ffa:	853e                	mv	a0,a5
20012ffc:	8fdff0ef          	jal	ra,200128f8 <__metal_exception_register>
20013000:	87aa                	mv	a5,a0
20013002:	a011                	j	20013006 <__metal_driver_cpu_exception_register+0x3e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:612
    }
    return -1;
20013004:	57fd                	li	a5,-1
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:613
}
20013006:	853e                	mv	a0,a5
20013008:	50b2                	lw	ra,44(sp)
2001300a:	5422                	lw	s0,40(sp)
2001300c:	6145                	addi	sp,sp,48
2001300e:	8082                	ret

20013010 <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:616

int  __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu, uintptr_t epc)
{
20013010:	1101                	addi	sp,sp,-32
20013012:	ce22                	sw	s0,28(sp)
20013014:	1000                	addi	s0,sp,32
20013016:	fea42623          	sw	a0,-20(s0)
2001301a:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:618
    /* Per ISA compressed instruction has last two bits of opcode set */
    return (*(unsigned short*)epc & 3) ? 4 : 2;
2001301e:	fe842783          	lw	a5,-24(s0)
20013022:	0007d783          	lhu	a5,0(a5)
20013026:	8b8d                	andi	a5,a5,3
20013028:	c399                	beqz	a5,2001302e <__metal_driver_cpu_get_instruction_length+0x1e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:618 (discriminator 1)
2001302a:	4791                	li	a5,4
2001302c:	a011                	j	20013030 <__metal_driver_cpu_get_instruction_length+0x20>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:618 (discriminator 2)
2001302e:	4789                	li	a5,2
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:619 (discriminator 5)
}
20013030:	853e                	mv	a0,a5
20013032:	4472                	lw	s0,28(sp)
20013034:	6105                	addi	sp,sp,32
20013036:	8082                	ret

20013038 <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:622

uintptr_t  __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu)
{
20013038:	7179                	addi	sp,sp,-48
2001303a:	d622                	sw	s0,44(sp)
2001303c:	1800                	addi	s0,sp,48
2001303e:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:624
    uintptr_t mepc;
    asm volatile ("csrr %0, mepc" : "=r"(mepc));
20013042:	341027f3          	csrr	a5,mepc
20013046:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:625
    return mepc;
2001304a:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:626
}
2001304e:	853e                	mv	a0,a5
20013050:	5432                	lw	s0,44(sp)
20013052:	6145                	addi	sp,sp,48
20013054:	8082                	ret

20013056 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:629

int  __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc)
{
20013056:	1101                	addi	sp,sp,-32
20013058:	ce22                	sw	s0,28(sp)
2001305a:	1000                	addi	s0,sp,32
2001305c:	fea42623          	sw	a0,-20(s0)
20013060:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:630
    asm volatile ("csrw mepc, %0" :: "r"(mepc));
20013064:	fe842783          	lw	a5,-24(s0)
20013068:	34179073          	csrw	mepc,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:631
    return 0;
2001306c:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,cpu.c:632
}
2001306e:	853e                	mv	a0,a5
20013070:	4472                	lw	s0,28(sp)
20013072:	6105                	addi	sp,sp,32
20013074:	8082                	ret

20013076 <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:10
#include <metal/shutdown.h>
#include <metal/drivers/riscv,plic0.h>


unsigned int __metal_plic0_claim_interrupt (struct __metal_driver_riscv_plic0 *plic)
{
20013076:	1101                	addi	sp,sp,-32
20013078:	ce22                	sw	s0,28(sp)
2001307a:	1000                	addi	s0,sp,32
2001307c:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:11
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20013080:	fec42783          	lw	a5,-20(s0)
20013084:	4798                	lw	a4,8(a5)
20013086:	002007b7          	lui	a5,0x200
2001308a:	0791                	addi	a5,a5,4
2001308c:	97ba                	add	a5,a5,a4
2001308e:	439c                	lw	a5,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:13
					      METAL_PLIC_CLAIM_OFFSET));
}
20013090:	853e                	mv	a0,a5
20013092:	4472                	lw	s0,28(sp)
20013094:	6105                	addi	sp,sp,32
20013096:	8082                	ret

20013098 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:17

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
				    unsigned int id)
{
20013098:	1101                	addi	sp,sp,-32
2001309a:	ce22                	sw	s0,28(sp)
2001309c:	1000                	addi	s0,sp,32
2001309e:	fea42623          	sw	a0,-20(s0)
200130a2:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:18
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
200130a6:	fec42783          	lw	a5,-20(s0)
200130aa:	4798                	lw	a4,8(a5)
200130ac:	002007b7          	lui	a5,0x200
200130b0:	0791                	addi	a5,a5,4
200130b2:	97ba                	add	a5,a5,a4
200130b4:	873e                	mv	a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:19
				       METAL_PLIC_CLAIM_OFFSET)) = id;
200130b6:	fe842783          	lw	a5,-24(s0)
200130ba:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:20
}
200130bc:	0001                	nop
200130be:	4472                	lw	s0,28(sp)
200130c0:	6105                	addi	sp,sp,32
200130c2:	8082                	ret

200130c4 <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:24

void __metal_plic0_set_threshold(struct __metal_driver_riscv_plic0 *plic,
			       unsigned int threshold)
{
200130c4:	1101                	addi	sp,sp,-32
200130c6:	ce22                	sw	s0,28(sp)
200130c8:	1000                	addi	s0,sp,32
200130ca:	fea42623          	sw	a0,-20(s0)
200130ce:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:25
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
200130d2:	fec42783          	lw	a5,-20(s0)
200130d6:	4798                	lw	a4,8(a5)
200130d8:	002007b7          	lui	a5,0x200
200130dc:	97ba                	add	a5,a5,a4
200130de:	873e                	mv	a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:26
				       METAL_PLIC_THRESHOLD_OFFSET)) = threshold;
200130e0:	fe842783          	lw	a5,-24(s0)
200130e4:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:27
}
200130e6:	0001                	nop
200130e8:	4472                	lw	s0,28(sp)
200130ea:	6105                	addi	sp,sp,32
200130ec:	8082                	ret

200130ee <__metal_plic0_set_priority>:
__metal_plic0_set_priority():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:31

void __metal_plic0_set_priority(struct __metal_driver_riscv_plic0 *plic,
			      int id, unsigned int priority)
{
200130ee:	1101                	addi	sp,sp,-32
200130f0:	ce22                	sw	s0,28(sp)
200130f2:	1000                	addi	s0,sp,32
200130f4:	fea42623          	sw	a0,-20(s0)
200130f8:	feb42423          	sw	a1,-24(s0)
200130fc:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:32
    if ( (plic->max_priority) &&
20013100:	fec42783          	lw	a5,-20(s0)
20013104:	4f9c                	lw	a5,24(a5)
20013106:	c785                	beqz	a5,2001312e <__metal_plic0_set_priority+0x40>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:33 (discriminator 1)
	 (priority < plic->max_priority) ) {
20013108:	fec42783          	lw	a5,-20(s0)
2001310c:	4f9c                	lw	a5,24(a5)
2001310e:	873e                	mv	a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:32 (discriminator 1)
    if ( (plic->max_priority) &&
20013110:	fe442783          	lw	a5,-28(s0)
20013114:	00e7fd63          	bgeu	a5,a4,2001312e <__metal_plic0_set_priority+0x40>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:34
        __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20013118:	fec42783          	lw	a5,-20(s0)
2001311c:	479c                	lw	a5,8(a5)
2001311e:	fe842703          	lw	a4,-24(s0)
20013122:	070a                	slli	a4,a4,0x2
20013124:	97ba                	add	a5,a5,a4
20013126:	873e                	mv	a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:36
					   METAL_PLIC_PRIORITY_OFFSET +
					   (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) = priority;
20013128:	fe442783          	lw	a5,-28(s0)
2001312c:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:38
    }
}
2001312e:	0001                	nop
20013130:	4472                	lw	s0,28(sp)
20013132:	6105                	addi	sp,sp,32
20013134:	8082                	ret

20013136 <__metal_plic0_enable>:
__metal_plic0_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:41

void __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic, int id, int enable)
{
20013136:	7179                	addi	sp,sp,-48
20013138:	d606                	sw	ra,44(sp)
2001313a:	d422                	sw	s0,40(sp)
2001313c:	1800                	addi	s0,sp,48
2001313e:	fca42e23          	sw	a0,-36(s0)
20013142:	fcb42c23          	sw	a1,-40(s0)
20013146:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:43
    unsigned int current;
    unsigned long hartid = __metal_myhart_id();
2001314a:	a50ff0ef          	jal	ra,2001239a <__metal_myhart_id>
2001314e:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:45

    current = __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
20013152:	fdc42783          	lw	a5,-36(s0)
20013156:	479c                	lw	a5,8(a5)
20013158:	fd842703          	lw	a4,-40(s0)
2001315c:	8715                	srai	a4,a4,0x5
2001315e:	070a                	slli	a4,a4,0x2
20013160:	973e                	add	a4,a4,a5
20013162:	6789                	lui	a5,0x2
20013164:	97ba                	add	a5,a5,a4
20013166:	439c                	lw	a5,0(a5)
20013168:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:52
						(id >> METAL_PLIC_SOURCE_SHIFT) * 4));
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
					METAL_PLIC_ENABLE_OFFSET +
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2001316c:	fd442783          	lw	a5,-44(s0)
20013170:	cf81                	beqz	a5,20013188 <__metal_plic0_enable+0x52>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:51 (discriminator 1)
              enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
20013172:	fd842783          	lw	a5,-40(s0)
20013176:	8bfd                	andi	a5,a5,31
20013178:	4705                	li	a4,1
2001317a:	00f717b3          	sll	a5,a4,a5
2001317e:	873e                	mv	a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:52 (discriminator 1)
                     : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20013180:	fe842783          	lw	a5,-24(s0)
20013184:	8fd9                	or	a5,a5,a4
20013186:	a829                	j	200131a0 <__metal_plic0_enable+0x6a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:52 (discriminator 2)
20013188:	fd842783          	lw	a5,-40(s0)
2001318c:	8bfd                	andi	a5,a5,31
2001318e:	4705                	li	a4,1
20013190:	00f717b3          	sll	a5,a4,a5
20013194:	fff7c793          	not	a5,a5
20013198:	873e                	mv	a4,a5
2001319a:	fe842783          	lw	a5,-24(s0)
2001319e:	8ff9                	and	a5,a5,a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(plic->control_base +
200131a0:	fdc42703          	lw	a4,-36(s0)
200131a4:	4718                	lw	a4,8(a4)
200131a6:	fd842683          	lw	a3,-40(s0)
200131aa:	8695                	srai	a3,a3,0x5
200131ac:	068a                	slli	a3,a3,0x2
200131ae:	96ba                	add	a3,a3,a4
200131b0:	6709                	lui	a4,0x2
200131b2:	9736                	add	a4,a4,a3
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:50
					((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
200131b4:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:53
}
200131b6:	0001                	nop
200131b8:	50b2                	lw	ra,44(sp)
200131ba:	5422                	lw	s0,40(sp)
200131bc:	6145                	addi	sp,sp,48
200131be:	8082                	ret

200131c0 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:55

void __metal_plic0_default_handler (int id, void *priv) {
200131c0:	1101                	addi	sp,sp,-32
200131c2:	ce06                	sw	ra,28(sp)
200131c4:	cc22                	sw	s0,24(sp)
200131c6:	1000                	addi	s0,sp,32
200131c8:	fea42623          	sw	a0,-20(s0)
200131cc:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:56
    metal_shutdown(300);
200131d0:	12c00513          	li	a0,300
200131d4:	78b000ef          	jal	ra,2001415e <metal_shutdown>

200131d8 <__metal_plic0_handler>:
__metal_plic0_handler():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:60
}

void __metal_plic0_handler (int id, void *priv)
{
200131d8:	7179                	addi	sp,sp,-48
200131da:	d606                	sw	ra,44(sp)
200131dc:	d422                	sw	s0,40(sp)
200131de:	1800                	addi	s0,sp,48
200131e0:	fca42e23          	sw	a0,-36(s0)
200131e4:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:61
    struct __metal_driver_riscv_plic0 *plic = priv;
200131e8:	fd842783          	lw	a5,-40(s0)
200131ec:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:62
    unsigned int idx = __metal_plic0_claim_interrupt(plic);
200131f0:	fec42503          	lw	a0,-20(s0)
200131f4:	3549                	jal	20013076 <__metal_plic0_claim_interrupt>
200131f6:	fea42423          	sw	a0,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:64

    if ( (idx < plic->num_interrupts) &&
200131fa:	fec42783          	lw	a5,-20(s0)
200131fe:	4fdc                	lw	a5,28(a5)
20013200:	873e                	mv	a4,a5
20013202:	fe842783          	lw	a5,-24(s0)
20013206:	04e7f463          	bgeu	a5,a4,2001324e <__metal_plic0_handler+0x76>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:65 (discriminator 1)
	 (plic->metal_exint_table[idx]) ) {
2001320a:	fec42703          	lw	a4,-20(s0)
2001320e:	fe842783          	lw	a5,-24(s0)
20013212:	07a1                	addi	a5,a5,8
20013214:	078a                	slli	a5,a5,0x2
20013216:	97ba                	add	a5,a5,a4
20013218:	479c                	lw	a5,8(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:64 (discriminator 1)
    if ( (idx < plic->num_interrupts) &&
2001321a:	cb95                	beqz	a5,2001324e <__metal_plic0_handler+0x76>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:66
	plic->metal_exint_table[idx](idx,
2001321c:	fec42703          	lw	a4,-20(s0)
20013220:	fe842783          	lw	a5,-24(s0)
20013224:	07a1                	addi	a5,a5,8
20013226:	078a                	slli	a5,a5,0x2
20013228:	97ba                	add	a5,a5,a4
2001322a:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1c08>
2001322e:	fe842603          	lw	a2,-24(s0)
20013232:	fec42683          	lw	a3,-20(s0)
20013236:	fe842703          	lw	a4,-24(s0)
2001323a:	87ba                	mv	a5,a4
2001323c:	0786                	slli	a5,a5,0x1
2001323e:	97ba                	add	a5,a5,a4
20013240:	078e                	slli	a5,a5,0x3
20013242:	97b6                	add	a5,a5,a3
20013244:	0a87a783          	lw	a5,168(a5)
20013248:	85be                	mv	a1,a5
2001324a:	8532                	mv	a0,a2
2001324c:	9802                	jalr	a6
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:70
				  plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, idx);
2001324e:	fe842583          	lw	a1,-24(s0)
20013252:	fec42503          	lw	a0,-20(s0)
20013256:	3589                	jal	20013098 <__metal_plic0_complete_interrupt>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:71
}
20013258:	0001                	nop
2001325a:	50b2                	lw	ra,44(sp)
2001325c:	5422                	lw	s0,40(sp)
2001325e:	6145                	addi	sp,sp,48
20013260:	8082                	ret

20013262 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:74

void __metal_driver_riscv_plic0_init (struct metal_interrupt *controller)
{
20013262:	7179                	addi	sp,sp,-48
20013264:	d606                	sw	ra,44(sp)
20013266:	d422                	sw	s0,40(sp)
20013268:	1800                	addi	s0,sp,48
2001326a:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:75
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2001326e:	fdc42783          	lw	a5,-36(s0)
20013272:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:77

    if ( !plic->init_done ) {
20013276:	fe842783          	lw	a5,-24(s0)
2001327a:	539c                	lw	a5,32(a5)
2001327c:	0e079b63          	bnez	a5,20013372 <__metal_driver_riscv_plic0_init+0x110>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:80
        struct metal_interrupt *intc;

        intc = plic->interrupt_parent;
20013280:	fe842783          	lw	a5,-24(s0)
20013284:	4b9c                	lw	a5,16(a5)
20013286:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:83

	/* Initialize ist parent controller, aka cpu_intc. */
	intc->vtable->interrupt_init(intc);
2001328a:	fe442783          	lw	a5,-28(s0)
2001328e:	439c                	lw	a5,0(a5)
20013290:	439c                	lw	a5,0(a5)
20013292:	fe442503          	lw	a0,-28(s0)
20013296:	9782                	jalr	a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:85

	for (int i = 0; i < plic->num_interrupts; i++) {
20013298:	fe042623          	sw	zero,-20(s0)
2001329c:	a08d                	j	200132fe <__metal_driver_riscv_plic0_init+0x9c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:86 (discriminator 3)
	    __metal_plic0_enable(plic, i, METAL_DISABLE);
2001329e:	4601                	li	a2,0
200132a0:	fec42583          	lw	a1,-20(s0)
200132a4:	fe842503          	lw	a0,-24(s0)
200132a8:	3579                	jal	20013136 <__metal_plic0_enable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:87 (discriminator 3)
	    __metal_plic0_set_priority(plic, i, 0);
200132aa:	4601                	li	a2,0
200132ac:	fec42583          	lw	a1,-20(s0)
200132b0:	fe842503          	lw	a0,-24(s0)
200132b4:	3d2d                	jal	200130ee <__metal_plic0_set_priority>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:88 (discriminator 3)
	    plic->metal_exint_table[i] = NULL;
200132b6:	fe842703          	lw	a4,-24(s0)
200132ba:	fec42783          	lw	a5,-20(s0)
200132be:	07a1                	addi	a5,a5,8
200132c0:	078a                	slli	a5,a5,0x2
200132c2:	97ba                	add	a5,a5,a4
200132c4:	0007a423          	sw	zero,8(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:89 (discriminator 3)
	    plic->metal_exdata_table[i].sub_int = NULL;
200132c8:	fe842683          	lw	a3,-24(s0)
200132cc:	fec42703          	lw	a4,-20(s0)
200132d0:	87ba                	mv	a5,a4
200132d2:	0786                	slli	a5,a5,0x1
200132d4:	97ba                	add	a5,a5,a4
200132d6:	078e                	slli	a5,a5,0x3
200132d8:	97b6                	add	a5,a5,a3
200132da:	0a07a223          	sw	zero,164(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:90 (discriminator 3)
	    plic->metal_exdata_table[i].exint_data = NULL;
200132de:	fe842683          	lw	a3,-24(s0)
200132e2:	fec42703          	lw	a4,-20(s0)
200132e6:	87ba                	mv	a5,a4
200132e8:	0786                	slli	a5,a5,0x1
200132ea:	97ba                	add	a5,a5,a4
200132ec:	078e                	slli	a5,a5,0x3
200132ee:	97b6                	add	a5,a5,a3
200132f0:	0a07a423          	sw	zero,168(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:85 (discriminator 3)
	for (int i = 0; i < plic->num_interrupts; i++) {
200132f4:	fec42783          	lw	a5,-20(s0)
200132f8:	0785                	addi	a5,a5,1
200132fa:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:85 (discriminator 1)
200132fe:	fe842783          	lw	a5,-24(s0)
20013302:	4fdc                	lw	a5,28(a5)
20013304:	fec42703          	lw	a4,-20(s0)
20013308:	f8f74be3          	blt	a4,a5,2001329e <__metal_driver_riscv_plic0_init+0x3c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:93
	}

	__metal_plic0_set_threshold(plic, 0);
2001330c:	4581                	li	a1,0
2001330e:	fe842503          	lw	a0,-24(s0)
20013312:	3b4d                	jal	200130c4 <__metal_plic0_set_threshold>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:96

	/* Register plic (ext) interrupt with with parent controller */
        intc->vtable->interrupt_register(intc,
20013314:	fe442783          	lw	a5,-28(s0)
20013318:	439c                	lw	a5,0(a5)
2001331a:	43d8                	lw	a4,4(a5)
2001331c:	fe842783          	lw	a5,-24(s0)
20013320:	4bdc                	lw	a5,20(a5)
20013322:	fe842683          	lw	a3,-24(s0)
20013326:	4601                	li	a2,0
20013328:	85be                	mv	a1,a5
2001332a:	fe442503          	lw	a0,-28(s0)
2001332e:	9702                	jalr	a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:100
                                         plic->interrupt_line,
                                         NULL, plic);
	/* Register plic handler for dispatching its device interrupts */
	intc->vtable->interrupt_register(intc,
20013330:	fe442783          	lw	a5,-28(s0)
20013334:	439c                	lw	a5,0(a5)
20013336:	0047a803          	lw	a6,4(a5)
2001333a:	fe842783          	lw	a5,-24(s0)
2001333e:	4bd8                	lw	a4,20(a5)
20013340:	fe842683          	lw	a3,-24(s0)
20013344:	200137b7          	lui	a5,0x20013
20013348:	1d878613          	addi	a2,a5,472 # 200131d8 <__metal_plic0_handler>
2001334c:	85ba                	mv	a1,a4
2001334e:	fe442503          	lw	a0,-28(s0)
20013352:	9802                	jalr	a6
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:104
					 plic->interrupt_line,
					 __metal_plic0_handler, plic);
	/* Enable plic (ext) interrupt with with parent controller */
        intc->vtable->interrupt_enable(intc, plic->interrupt_line);
20013354:	fe442783          	lw	a5,-28(s0)
20013358:	439c                	lw	a5,0(a5)
2001335a:	4798                	lw	a4,8(a5)
2001335c:	fe842783          	lw	a5,-24(s0)
20013360:	4bdc                	lw	a5,20(a5)
20013362:	85be                	mv	a1,a5
20013364:	fe442503          	lw	a0,-28(s0)
20013368:	9702                	jalr	a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:105
        plic->init_done = 1;
2001336a:	fe842783          	lw	a5,-24(s0)
2001336e:	4705                	li	a4,1
20013370:	d398                	sw	a4,32(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:107
    }
}
20013372:	0001                	nop
20013374:	50b2                	lw	ra,44(sp)
20013376:	5422                	lw	s0,40(sp)
20013378:	6145                	addi	sp,sp,48
2001337a:	8082                	ret

2001337c <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:112

int __metal_driver_riscv_plic0_register (struct metal_interrupt *controller,
			               int id, metal_interrupt_handler_t isr,
			               void *priv)
{
2001337c:	7179                	addi	sp,sp,-48
2001337e:	d606                	sw	ra,44(sp)
20013380:	d422                	sw	s0,40(sp)
20013382:	1800                	addi	s0,sp,48
20013384:	fca42e23          	sw	a0,-36(s0)
20013388:	fcb42c23          	sw	a1,-40(s0)
2001338c:	fcc42a23          	sw	a2,-44(s0)
20013390:	fcd42823          	sw	a3,-48(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:113
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20013394:	fdc42783          	lw	a5,-36(s0)
20013398:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:115

    if (id >= plic->num_interrupts ) {
2001339c:	fec42783          	lw	a5,-20(s0)
200133a0:	4fdc                	lw	a5,28(a5)
200133a2:	fd842703          	lw	a4,-40(s0)
200133a6:	00f74463          	blt	a4,a5,200133ae <__metal_driver_riscv_plic0_register+0x32>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:116
        return -1;
200133aa:	57fd                	li	a5,-1
200133ac:	a051                	j	20013430 <__metal_driver_riscv_plic0_register+0xb4>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:119
    }
 
    if (isr) {
200133ae:	fd442783          	lw	a5,-44(s0)
200133b2:	cf9d                	beqz	a5,200133f0 <__metal_driver_riscv_plic0_register+0x74>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:120
        __metal_plic0_set_priority(plic ,id, 2);
200133b4:	4609                	li	a2,2
200133b6:	fd842583          	lw	a1,-40(s0)
200133ba:	fec42503          	lw	a0,-20(s0)
200133be:	3b05                	jal	200130ee <__metal_plic0_set_priority>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:121
	plic->metal_exint_table[id] = isr;
200133c0:	fec42703          	lw	a4,-20(s0)
200133c4:	fd842783          	lw	a5,-40(s0)
200133c8:	07a1                	addi	a5,a5,8
200133ca:	078a                	slli	a5,a5,0x2
200133cc:	97ba                	add	a5,a5,a4
200133ce:	fd442703          	lw	a4,-44(s0)
200133d2:	c798                	sw	a4,8(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:122
	plic->metal_exdata_table[id].exint_data = priv;
200133d4:	fec42683          	lw	a3,-20(s0)
200133d8:	fd842703          	lw	a4,-40(s0)
200133dc:	87ba                	mv	a5,a4
200133de:	0786                	slli	a5,a5,0x1
200133e0:	97ba                	add	a5,a5,a4
200133e2:	078e                	slli	a5,a5,0x3
200133e4:	97b6                	add	a5,a5,a3
200133e6:	fd042703          	lw	a4,-48(s0)
200133ea:	0ae7a423          	sw	a4,168(a5)
200133ee:	a081                	j	2001342e <__metal_driver_riscv_plic0_register+0xb2>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:124
    } else {
        __metal_plic0_set_priority(plic, id, 1);
200133f0:	4605                	li	a2,1
200133f2:	fd842583          	lw	a1,-40(s0)
200133f6:	fec42503          	lw	a0,-20(s0)
200133fa:	39d5                	jal	200130ee <__metal_plic0_set_priority>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:125
	plic->metal_exint_table[id] = __metal_plic0_default_handler;
200133fc:	fec42703          	lw	a4,-20(s0)
20013400:	fd842783          	lw	a5,-40(s0)
20013404:	07a1                	addi	a5,a5,8
20013406:	078a                	slli	a5,a5,0x2
20013408:	97ba                	add	a5,a5,a4
2001340a:	20013737          	lui	a4,0x20013
2001340e:	1c070713          	addi	a4,a4,448 # 200131c0 <__metal_plic0_default_handler>
20013412:	c798                	sw	a4,8(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:126
	plic->metal_exdata_table[id].sub_int = priv;
20013414:	fec42683          	lw	a3,-20(s0)
20013418:	fd842703          	lw	a4,-40(s0)
2001341c:	87ba                	mv	a5,a4
2001341e:	0786                	slli	a5,a5,0x1
20013420:	97ba                	add	a5,a5,a4
20013422:	078e                	slli	a5,a5,0x3
20013424:	97b6                	add	a5,a5,a3
20013426:	fd042703          	lw	a4,-48(s0)
2001342a:	0ae7a223          	sw	a4,164(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:129
    }

    return 0;
2001342e:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:130
}
20013430:	853e                	mv	a0,a5
20013432:	50b2                	lw	ra,44(sp)
20013434:	5422                	lw	s0,40(sp)
20013436:	6145                	addi	sp,sp,48
20013438:	8082                	ret

2001343a <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:133

int __metal_driver_riscv_plic0_enable (struct metal_interrupt *controller, int id)
{
2001343a:	7179                	addi	sp,sp,-48
2001343c:	d606                	sw	ra,44(sp)
2001343e:	d422                	sw	s0,40(sp)
20013440:	1800                	addi	s0,sp,48
20013442:	fca42e23          	sw	a0,-36(s0)
20013446:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:134
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2001344a:	fdc42783          	lw	a5,-36(s0)
2001344e:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:136

    if ( id >= plic->num_interrupts ) {
20013452:	fec42783          	lw	a5,-20(s0)
20013456:	4fdc                	lw	a5,28(a5)
20013458:	fd842703          	lw	a4,-40(s0)
2001345c:	00f74463          	blt	a4,a5,20013464 <__metal_driver_riscv_plic0_enable+0x2a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:137
        return -1;
20013460:	57fd                	li	a5,-1
20013462:	a801                	j	20013472 <__metal_driver_riscv_plic0_enable+0x38>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:140
    }

    __metal_plic0_enable(plic, id, METAL_ENABLE);
20013464:	4605                	li	a2,1
20013466:	fd842583          	lw	a1,-40(s0)
2001346a:	fec42503          	lw	a0,-20(s0)
2001346e:	31e1                	jal	20013136 <__metal_plic0_enable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:141
    return 0;
20013470:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:142
}
20013472:	853e                	mv	a0,a5
20013474:	50b2                	lw	ra,44(sp)
20013476:	5422                	lw	s0,40(sp)
20013478:	6145                	addi	sp,sp,48
2001347a:	8082                	ret

2001347c <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:145

int __metal_driver_riscv_plic0_disable (struct metal_interrupt *controller, int id)
{
2001347c:	7179                	addi	sp,sp,-48
2001347e:	d606                	sw	ra,44(sp)
20013480:	d422                	sw	s0,40(sp)
20013482:	1800                	addi	s0,sp,48
20013484:	fca42e23          	sw	a0,-36(s0)
20013488:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:146
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2001348c:	fdc42783          	lw	a5,-36(s0)
20013490:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:148

    if ( id >= plic->num_interrupts ) {
20013494:	fec42783          	lw	a5,-20(s0)
20013498:	4fdc                	lw	a5,28(a5)
2001349a:	fd842703          	lw	a4,-40(s0)
2001349e:	00f74463          	blt	a4,a5,200134a6 <__metal_driver_riscv_plic0_disable+0x2a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:149
        return -1;
200134a2:	57fd                	li	a5,-1
200134a4:	a801                	j	200134b4 <__metal_driver_riscv_plic0_disable+0x38>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:151
    }
    __metal_plic0_enable(plic, id, METAL_DISABLE);
200134a6:	4601                	li	a2,0
200134a8:	fd842583          	lw	a1,-40(s0)
200134ac:	fec42503          	lw	a0,-20(s0)
200134b0:	3159                	jal	20013136 <__metal_plic0_enable>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:152
    return 0;
200134b2:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/riscv,plic0.c:153
}
200134b4:	853e                	mv	a0,a5
200134b6:	50b2                	lw	ra,44(sp)
200134b8:	5422                	lw	s0,40(sp)
200134ba:	6145                	addi	sp,sp,48
200134bc:	8082                	ret

200134be <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:12
#define CONFIG_TRIM    0x001F0000UL
#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(const struct metal_clock *clock)
{
200134be:	7179                	addi	sp,sp,-48
200134c0:	d606                	sw	ra,44(sp)
200134c2:	d422                	sw	s0,40(sp)
200134c4:	1800                	addi	s0,sp,48
200134c6:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:13
    struct __metal_driver_sifive_fe310_g000_hfrosc *clk = (void *)clock;
200134ca:	fdc42783          	lw	a5,-36(s0)
200134ce:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:14
    long cfg = clk->config_base->vtable->get_reg(clk->config_base, clk->config_offset);
200134d2:	fec42783          	lw	a5,-20(s0)
200134d6:	4fdc                	lw	a5,28(a5)
200134d8:	439c                	lw	a5,0(a5)
200134da:	4394                	lw	a3,0(a5)
200134dc:	fec42783          	lw	a5,-20(s0)
200134e0:	4fd8                	lw	a4,28(a5)
200134e2:	fec42783          	lw	a5,-20(s0)
200134e6:	539c                	lw	a5,32(a5)
200134e8:	85be                	mv	a1,a5
200134ea:	853a                	mv	a0,a4
200134ec:	9682                	jalr	a3
200134ee:	fea42423          	sw	a0,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:19
    if (cfg & CONFIG_ENABLE == 0)
        return -1;
    if (cfg & CONFIG_READY == 0)
        return -1;
    return metal_clock_get_rate_hz(clk->ref) / ((cfg & CONFIG_DIVIDER) + 1);
200134f2:	fec42783          	lw	a5,-20(s0)
200134f6:	4f9c                	lw	a5,24(a5)
200134f8:	853e                	mv	a0,a5
200134fa:	37f000ef          	jal	ra,20014078 <metal_clock_get_rate_hz>
200134fe:	87aa                	mv	a5,a0
20013500:	873e                	mv	a4,a5
20013502:	fe842783          	lw	a5,-24(s0)
20013506:	03f7f793          	andi	a5,a5,63
2001350a:	0785                	addi	a5,a5,1
2001350c:	02f757b3          	divu	a5,a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:20
}
20013510:	853e                	mv	a0,a5
20013512:	50b2                	lw	ra,44(sp)
20013514:	5422                	lw	s0,40(sp)
20013516:	6145                	addi	sp,sp,48
20013518:	8082                	ret

2001351a <__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:23

long __metal_driver_sifive_fe310_g000_hfrosc_set_rate_hz(struct metal_clock *clock, long rate)
{
2001351a:	1101                	addi	sp,sp,-32
2001351c:	ce06                	sw	ra,28(sp)
2001351e:	cc22                	sw	s0,24(sp)
20013520:	1000                	addi	s0,sp,32
20013522:	fea42623          	sw	a0,-20(s0)
20013526:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:24
    return __metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz(clock);
2001352a:	fec42503          	lw	a0,-20(s0)
2001352e:	3f41                	jal	200134be <__metal_driver_sifive_fe310_g000_hfrosc_get_rate_hz>
20013530:	87aa                	mv	a5,a0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfrosc.c:25
}
20013532:	853e                	mv	a0,a5
20013534:	40f2                	lw	ra,28(sp)
20013536:	4462                	lw	s0,24(sp)
20013538:	6105                	addi	sp,sp,32
2001353a:	8082                	ret

2001353c <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:10

#define CONFIG_ENABLE  0x40000000UL
#define CONFIG_READY   0x80000000UL

long __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(const struct metal_clock *clock)
{
2001353c:	7179                	addi	sp,sp,-48
2001353e:	d606                	sw	ra,44(sp)
20013540:	d422                	sw	s0,40(sp)
20013542:	1800                	addi	s0,sp,48
20013544:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:11
    struct __metal_driver_sifive_fe310_g000_hfxosc *clk = (void *)clock;
20013548:	fdc42783          	lw	a5,-36(s0)
2001354c:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:12
    long cfg = clk->config_base->vtable->get_reg(clk->config_base, clk->config_offset);
20013550:	fec42783          	lw	a5,-20(s0)
20013554:	4fdc                	lw	a5,28(a5)
20013556:	439c                	lw	a5,0(a5)
20013558:	4394                	lw	a3,0(a5)
2001355a:	fec42783          	lw	a5,-20(s0)
2001355e:	4fd8                	lw	a4,28(a5)
20013560:	fec42783          	lw	a5,-20(s0)
20013564:	539c                	lw	a5,32(a5)
20013566:	85be                	mv	a1,a5
20013568:	853a                	mv	a0,a4
2001356a:	9682                	jalr	a3
2001356c:	fea42423          	sw	a0,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:17
    if (cfg & CONFIG_ENABLE == 0)
        return -1;
    if (cfg & CONFIG_READY == 0)
        return -1;
    return metal_clock_get_rate_hz(clk->ref);
20013570:	fec42783          	lw	a5,-20(s0)
20013574:	4f9c                	lw	a5,24(a5)
20013576:	853e                	mv	a0,a5
20013578:	301000ef          	jal	ra,20014078 <metal_clock_get_rate_hz>
2001357c:	87aa                	mv	a5,a0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:18
}
2001357e:	853e                	mv	a0,a5
20013580:	50b2                	lw	ra,44(sp)
20013582:	5422                	lw	s0,40(sp)
20013584:	6145                	addi	sp,sp,48
20013586:	8082                	ret

20013588 <__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz>:
__metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:21

long __metal_driver_sifive_fe310_g000_hfxosc_set_rate_hz(struct metal_clock *clock, long rate)
{
20013588:	1101                	addi	sp,sp,-32
2001358a:	ce06                	sw	ra,28(sp)
2001358c:	cc22                	sw	s0,24(sp)
2001358e:	1000                	addi	s0,sp,32
20013590:	fea42623          	sw	a0,-20(s0)
20013594:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:22
    return __metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz(clock);
20013598:	fec42503          	lw	a0,-20(s0)
2001359c:	3745                	jal	2001353c <__metal_driver_sifive_fe310_g000_hfxosc_get_rate_hz>
2001359e:	87aa                	mv	a5,a0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,hfxosc.c:23
}
200135a0:	853e                	mv	a0,a5
200135a2:	40f2                	lw	ra,28(sp)
200135a4:	4462                	lw	s0,24(sp)
200135a6:	6105                	addi	sp,sp,32
200135a8:	8082                	ret

200135aa <get_pll_config_freq>:
get_pll_config_freq():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:131
 *  - config the PLL configuration
 * Returns:
 *  - PLL_CONFIG_NOT_VALID if the configuration is not valid for the input frequency
 *  - the output frequency, in hertz */
static long get_pll_config_freq(long pll_input_rate, const struct pll_config_t *config)
{
200135aa:	1101                	addi	sp,sp,-32
200135ac:	ce22                	sw	s0,28(sp)
200135ae:	1000                	addi	s0,sp,32
200135b0:	fea42623          	sw	a0,-20(s0)
200135b4:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:132
    if(pll_input_rate < config->min_input_rate || pll_input_rate > config->max_input_rate)
200135b8:	fe842783          	lw	a5,-24(s0)
200135bc:	4798                	lw	a4,8(a5)
200135be:	fec42783          	lw	a5,-20(s0)
200135c2:	00e7e963          	bltu	a5,a4,200135d4 <get_pll_config_freq+0x2a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:132 (discriminator 1)
200135c6:	fe842783          	lw	a5,-24(s0)
200135ca:	47d8                	lw	a4,12(a5)
200135cc:	fec42783          	lw	a5,-20(s0)
200135d0:	00f77463          	bgeu	a4,a5,200135d8 <get_pll_config_freq+0x2e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:133
        return PLL_CONFIG_NOT_VALID;
200135d4:	57fd                	li	a5,-1
200135d6:	a829                	j	200135f0 <get_pll_config_freq+0x46>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:135

    return pll_input_rate * config->multiplier / config->divisor;
200135d8:	fe842783          	lw	a5,-24(s0)
200135dc:	4398                	lw	a4,0(a5)
200135de:	fec42783          	lw	a5,-20(s0)
200135e2:	02f70733          	mul	a4,a4,a5
200135e6:	fe842783          	lw	a5,-24(s0)
200135ea:	43dc                	lw	a5,4(a5)
200135ec:	02f757b3          	divu	a5,a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:136
}
200135f0:	853e                	mv	a0,a5
200135f2:	4472                	lw	s0,28(sp)
200135f4:	6105                	addi	sp,sp,32
200135f6:	8082                	ret

200135f8 <metal_sifive_fe310_g000_pll_init>:
metal_sifive_fe310_g000_pll_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:141

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE

static void metal_sifive_fe310_g000_pll_init(void) __attribute__((constructor));
static void metal_sifive_fe310_g000_pll_init(void) {
200135f8:	1141                	addi	sp,sp,-16
200135fa:	c606                	sw	ra,12(sp)
200135fc:	c422                	sw	s0,8(sp)
200135fe:	0800                	addi	s0,sp,16
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:143
    /* If the PLL init_rate is zero, don't initialize the PLL */
    if(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->init_rate != 0)
20013600:	800017b7          	lui	a5,0x80001
20013604:	05078793          	addi	a5,a5,80 # 80001050 <metal_segment_heap_target_end+0xffffd050>
20013608:	5b9c                	lw	a5,48(a5)
2001360a:	c791                	beqz	a5,20013616 <metal_sifive_fe310_g000_pll_init+0x1e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:144
        __metal_driver_sifive_fe310_g000_pll_init(__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE);
2001360c:	800017b7          	lui	a5,0x80001
20013610:	05078513          	addi	a0,a5,80 # 80001050 <metal_segment_heap_target_end+0xffffd050>
20013614:	2031                	jal	20013620 <__metal_driver_sifive_fe310_g000_pll_init>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:145
}
20013616:	0001                	nop
20013618:	40b2                	lw	ra,12(sp)
2001361a:	4422                	lw	s0,8(sp)
2001361c:	0141                	addi	sp,sp,16
2001361e:	8082                	ret

20013620 <__metal_driver_sifive_fe310_g000_pll_init>:
__metal_driver_sifive_fe310_g000_pll_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:149

#endif /* __METAL_DT_SIFIVE_FE310_G000__PLL_HANDLE */

void __metal_driver_sifive_fe310_g000_pll_init(struct __metal_driver_sifive_fe310_g000_pll *pll) {
20013620:	7179                	addi	sp,sp,-48
20013622:	d606                	sw	ra,44(sp)
20013624:	d422                	sw	s0,40(sp)
20013626:	1800                	addi	s0,sp,48
20013628:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:150
    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (pll->config_base->base + pll->config_offset);
2001362c:	fdc42783          	lw	a5,-36(s0)
20013630:	539c                	lw	a5,32(a5)
20013632:	43d8                	lw	a4,4(a5)
20013634:	fdc42783          	lw	a5,-36(s0)
20013638:	53dc                	lw	a5,36(a5)
2001363a:	97ba                	add	a5,a5,a4
2001363c:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:153

    /* If the PLL clock has had a _pre_rate_change_callback configured, call it */
    if(pll->clock._pre_rate_change_callback != NULL)
20013640:	fdc42783          	lw	a5,-36(s0)
20013644:	43dc                	lw	a5,4(a5)
20013646:	cb89                	beqz	a5,20013658 <__metal_driver_sifive_fe310_g000_pll_init+0x38>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:154
        pll->clock._pre_rate_change_callback(pll->clock._pre_rate_change_callback_priv);
20013648:	fdc42783          	lw	a5,-36(s0)
2001364c:	43d8                	lw	a4,4(a5)
2001364e:	fdc42783          	lw	a5,-36(s0)
20013652:	479c                	lw	a5,8(a5)
20013654:	853e                	mv	a0,a5
20013656:	9702                	jalr	a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:157

    /* If we're running off of the PLL, switch off before we start configuring it*/
    if((__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL) == 0)
20013658:	fec42783          	lw	a5,-20(s0)
2001365c:	4398                	lw	a4,0(a5)
2001365e:	67c1                	lui	a5,0x10
20013660:	8ff9                	and	a5,a5,a4
20013662:	eb91                	bnez	a5,20013676 <__metal_driver_sifive_fe310_g000_pll_init+0x56>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:158
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20013664:	fec42783          	lw	a5,-20(s0)
20013668:	4398                	lw	a4,0(a5)
2001366a:	77c1                	lui	a5,0xffff0
2001366c:	17fd                	addi	a5,a5,-1
2001366e:	8f7d                	and	a4,a4,a5
20013670:	fec42783          	lw	a5,-20(s0)
20013674:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:161

    /* Make sure we're running off of the external oscillator for stability */
    if(pll->pllref != NULL)
20013676:	fdc42783          	lw	a5,-36(s0)
2001367a:	4fdc                	lw	a5,28(a5)
2001367c:	cb91                	beqz	a5,20013690 <__metal_driver_sifive_fe310_g000_pll_init+0x70>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:162
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_REFSEL;
2001367e:	fec42783          	lw	a5,-20(s0)
20013682:	4398                	lw	a4,0(a5)
20013684:	000207b7          	lui	a5,0x20
20013688:	8f5d                	or	a4,a4,a5
2001368a:	fec42783          	lw	a5,-20(s0)
2001368e:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:167

    /* Configure the PLL to run at the requested init frequency.
     * Using the vtable instead of the user API because we want to control
     * when the callbacks occur. */
    pll->vtable->clock.set_rate_hz(&(pll->clock), pll->init_rate);
20013690:	fdc42783          	lw	a5,-36(s0)
20013694:	4bdc                	lw	a5,20(a5)
20013696:	4794                	lw	a3,8(a5)
20013698:	fdc42703          	lw	a4,-36(s0)
2001369c:	fdc42783          	lw	a5,-36(s0)
200136a0:	5b9c                	lw	a5,48(a5)
200136a2:	85be                	mv	a1,a5
200136a4:	853a                	mv	a0,a4
200136a6:	9682                	jalr	a3
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:170

    /* If the PLL clock has had a rate_change_callback configured, call it */
    if(pll->clock._post_rate_change_callback != NULL)
200136a8:	fdc42783          	lw	a5,-36(s0)
200136ac:	47dc                	lw	a5,12(a5)
200136ae:	cb89                	beqz	a5,200136c0 <__metal_driver_sifive_fe310_g000_pll_init+0xa0>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:171
        pll->clock._post_rate_change_callback(pll->clock._post_rate_change_callback_priv);
200136b0:	fdc42783          	lw	a5,-36(s0)
200136b4:	47d8                	lw	a4,12(a5)
200136b6:	fdc42783          	lw	a5,-36(s0)
200136ba:	4b9c                	lw	a5,16(a5)
200136bc:	853e                	mv	a0,a5
200136be:	9702                	jalr	a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:172
}
200136c0:	0001                	nop
200136c2:	50b2                	lw	ra,44(sp)
200136c4:	5422                	lw	s0,40(sp)
200136c6:	6145                	addi	sp,sp,48
200136c8:	8082                	ret

200136ca <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_get_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:175

long __metal_driver_sifive_fe310_g000_pll_get_rate_hz(const struct metal_clock *clock)
{
200136ca:	7139                	addi	sp,sp,-64
200136cc:	de06                	sw	ra,60(sp)
200136ce:	dc22                	sw	s0,56(sp)
200136d0:	0080                	addi	s0,sp,64
200136d2:	fca42623          	sw	a0,-52(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:176
    struct __metal_driver_sifive_fe310_g000_pll *clk = (void *)clock;
200136d6:	fcc42783          	lw	a5,-52(s0)
200136da:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:177
    long cfg = clk->config_base->vtable->get_reg(clk->config_base, clk->config_offset);
200136de:	fec42783          	lw	a5,-20(s0)
200136e2:	539c                	lw	a5,32(a5)
200136e4:	439c                	lw	a5,0(a5)
200136e6:	4394                	lw	a3,0(a5)
200136e8:	fec42783          	lw	a5,-20(s0)
200136ec:	5398                	lw	a4,32(a5)
200136ee:	fec42783          	lw	a5,-20(s0)
200136f2:	53dc                	lw	a5,36(a5)
200136f4:	85be                	mv	a1,a5
200136f6:	853a                	mv	a0,a4
200136f8:	9682                	jalr	a3
200136fa:	fea42423          	sw	a0,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:178
    long div = clk->config_base->vtable->get_reg(clk->divider_base, clk->divider_offset);
200136fe:	fec42783          	lw	a5,-20(s0)
20013702:	539c                	lw	a5,32(a5)
20013704:	439c                	lw	a5,0(a5)
20013706:	4394                	lw	a3,0(a5)
20013708:	fec42783          	lw	a5,-20(s0)
2001370c:	5798                	lw	a4,40(a5)
2001370e:	fec42783          	lw	a5,-20(s0)
20013712:	57dc                	lw	a5,44(a5)
20013714:	85be                	mv	a1,a5
20013716:	853a                	mv	a0,a4
20013718:	9682                	jalr	a3
2001371a:	fea42223          	sw	a0,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:182

    /* At the end of the PLL there's one big mux: it either selects the HFROSC
     * (bypassing the PLL entirely) or uses the PLL. */
    if (__METAL_GET_FIELD(cfg, PLL_SEL) == 0)
2001371e:	fe842703          	lw	a4,-24(s0)
20013722:	67c1                	lui	a5,0x10
20013724:	8f7d                	and	a4,a4,a5
20013726:	67c1                	lui	a5,0x10
20013728:	00f77a63          	bgeu	a4,a5,2001373c <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x72>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:183
        return metal_clock_get_rate_hz(clk->pllsel0);
2001372c:	fec42783          	lw	a5,-20(s0)
20013730:	4f9c                	lw	a5,24(a5)
20013732:	853e                	mv	a0,a5
20013734:	145000ef          	jal	ra,20014078 <metal_clock_get_rate_hz>
20013738:	87aa                	mv	a5,a0
2001373a:	a8f1                	j	20013816 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:187

    /* There's a clock mux before the PLL that selects between the HFROSC adn
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_GET_FIELD(cfg, PLL_REFSEL) ? clk->pllref : clk->pllsel0);
2001373c:	fe842703          	lw	a4,-24(s0)
20013740:	000207b7          	lui	a5,0x20
20013744:	8f7d                	and	a4,a4,a5
20013746:	000207b7          	lui	a5,0x20
2001374a:	00f76663          	bltu	a4,a5,20013756 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x8c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:187 (discriminator 1)
2001374e:	fec42783          	lw	a5,-20(s0)
20013752:	4fdc                	lw	a5,28(a5)
20013754:	a021                	j	2001375c <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x92>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:187 (discriminator 2)
20013756:	fec42783          	lw	a5,-20(s0)
2001375a:	4f9c                	lw	a5,24(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:187 (discriminator 4)
2001375c:	853e                	mv	a0,a5
2001375e:	11b000ef          	jal	ra,20014078 <metal_clock_get_rate_hz>
20013762:	fea42023          	sw	a0,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:191 (discriminator 4)

    /* It's possible to bypass the PLL, which is an internal bpyass.  This
     * still obays the PLL's input clock mu. */
    if (__METAL_GET_FIELD(cfg, PLL_BYPASS))
20013766:	fe842703          	lw	a4,-24(s0)
2001376a:	000407b7          	lui	a5,0x40
2001376e:	8f7d                	and	a4,a4,a5
20013770:	000407b7          	lui	a5,0x40
20013774:	00f76563          	bltu	a4,a5,2001377e <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xb4>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:192
        return ref_hz;
20013778:	fe042783          	lw	a5,-32(s0)
2001377c:	a869                	j	20013816 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:195

    /* Logically the PLL is a three stage div-mul-div. */
    long div_r = __METAL_GET_FIELD(cfg, PLL_R) + 1;
2001377e:	fe842783          	lw	a5,-24(s0)
20013782:	8b9d                	andi	a5,a5,7
20013784:	0785                	addi	a5,a5,1
20013786:	fcf42e23          	sw	a5,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:196
    long mul_f = 2 * (__METAL_GET_FIELD(cfg, PLL_F) + 1);
2001378a:	fe842783          	lw	a5,-24(s0)
2001378e:	3f07f793          	andi	a5,a5,1008
20013792:	8391                	srli	a5,a5,0x4
20013794:	0785                	addi	a5,a5,1
20013796:	0786                	slli	a5,a5,0x1
20013798:	fcf42c23          	sw	a5,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:197
    if (__METAL_GET_FIELD(cfg, PLL_Q) == 0)
2001379c:	fe842703          	lw	a4,-24(s0)
200137a0:	6785                	lui	a5,0x1
200137a2:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x800>
200137a6:	8f7d                	and	a4,a4,a5
200137a8:	3ff00793          	li	a5,1023
200137ac:	00e7e463          	bltu	a5,a4,200137b4 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0xea>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:198
        return -1;
200137b0:	57fd                	li	a5,-1
200137b2:	a095                	j	20013816 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:199
    long div_q = 1 << __METAL_GET_FIELD(cfg, PLL_Q);
200137b4:	fe842703          	lw	a4,-24(s0)
200137b8:	6785                	lui	a5,0x1
200137ba:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x800>
200137be:	8ff9                	and	a5,a5,a4
200137c0:	83a9                	srli	a5,a5,0xa
200137c2:	4705                	li	a4,1
200137c4:	00f717b3          	sll	a5,a4,a5
200137c8:	fcf42a23          	sw	a5,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:204

    /* In addition to the dividers inherent in the PLL, there's an additional
     * clock divider that lives after the PLL and lets us pick a more
     * interesting range of frequencies. */
    long pllout = (((ref_hz / div_r) * mul_f) / div_q);
200137cc:	fe042703          	lw	a4,-32(s0)
200137d0:	fdc42783          	lw	a5,-36(s0)
200137d4:	02f74733          	div	a4,a4,a5
200137d8:	fd842783          	lw	a5,-40(s0)
200137dc:	02f70733          	mul	a4,a4,a5
200137e0:	fd442783          	lw	a5,-44(s0)
200137e4:	02f747b3          	div	a5,a4,a5
200137e8:	fcf42823          	sw	a5,-48(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:205
    if (__METAL_GET_FIELD(div, DIV_1))
200137ec:	fe442783          	lw	a5,-28(s0)
200137f0:	1007f713          	andi	a4,a5,256
200137f4:	0ff00793          	li	a5,255
200137f8:	00e7f563          	bgeu	a5,a4,20013802 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x138>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:206
        return pllout;
200137fc:	fd042783          	lw	a5,-48(s0)
20013800:	a819                	j	20013816 <__metal_driver_sifive_fe310_g000_pll_get_rate_hz+0x14c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:208

    return pllout / (2 * (__METAL_GET_FIELD(div, DIV_DIV) + 1));
20013802:	fd042703          	lw	a4,-48(s0)
20013806:	fe442783          	lw	a5,-28(s0)
2001380a:	03f7f793          	andi	a5,a5,63
2001380e:	0785                	addi	a5,a5,1
20013810:	0786                	slli	a5,a5,0x1
20013812:	02f757b3          	divu	a5,a4,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:209
}
20013816:	853e                	mv	a0,a5
20013818:	50f2                	lw	ra,60(sp)
2001381a:	5462                	lw	s0,56(sp)
2001381c:	6121                	addi	sp,sp,64
2001381e:	8082                	ret

20013820 <find_closest_config>:
find_closest_config():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:220
 *  - rate desired PLL output frequency
 * Returns:
 *  -1 if no valid configuration is available
 *  the index into pll_configs of a valid configuration */
static int find_closest_config(long ref_hz, long rate)
{
20013820:	7139                	addi	sp,sp,-64
20013822:	de06                	sw	ra,60(sp)
20013824:	dc22                	sw	s0,56(sp)
20013826:	0080                	addi	s0,sp,64
20013828:	fca42623          	sw	a0,-52(s0)
2001382c:	fcb42423          	sw	a1,-56(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:221
    int closest_index = -1;
20013830:	57fd                	li	a5,-1
20013832:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:222
    long closest_diff = LONG_MAX;
20013836:	800007b7          	lui	a5,0x80000
2001383a:	fff7c793          	not	a5,a5
2001383e:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:226

    /* We're probably trying for a fast output frequency, so start from
     * the high end of the configs. */
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
20013842:	04300793          	li	a5,67
20013846:	fef42223          	sw	a5,-28(s0)
2001384a:	a0a5                	j	200138b2 <find_closest_config+0x92>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:228
    {
        long config_freq = get_pll_config_freq(ref_hz, &(pll_configs[i]));
2001384c:	fe442783          	lw	a5,-28(s0)
20013850:	00579713          	slli	a4,a5,0x5
20013854:	200147b7          	lui	a5,0x20014
20013858:	40c78793          	addi	a5,a5,1036 # 2001440c <pll_configs>
2001385c:	97ba                	add	a5,a5,a4
2001385e:	85be                	mv	a1,a5
20013860:	fcc42503          	lw	a0,-52(s0)
20013864:	3399                	jal	200135aa <get_pll_config_freq>
20013866:	fea42023          	sw	a0,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:229
        if(config_freq != PLL_CONFIG_NOT_VALID)
2001386a:	fe042703          	lw	a4,-32(s0)
2001386e:	57fd                	li	a5,-1
20013870:	02f70c63          	beq	a4,a5,200138a8 <find_closest_config+0x88>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:231
        {
            long freq_diff = abs(config_freq - rate);
20013874:	fe042703          	lw	a4,-32(s0)
20013878:	fc842783          	lw	a5,-56(s0)
2001387c:	8f1d                	sub	a4,a4,a5
2001387e:	41f75793          	srai	a5,a4,0x1f
20013882:	8f3d                	xor	a4,a4,a5
20013884:	40f707b3          	sub	a5,a4,a5
20013888:	fcf42e23          	sw	a5,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:232
            if(freq_diff < closest_diff)
2001388c:	fdc42703          	lw	a4,-36(s0)
20013890:	fe842783          	lw	a5,-24(s0)
20013894:	00f75a63          	bge	a4,a5,200138a8 <find_closest_config+0x88>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:234
            {
                closest_index = i;
20013898:	fe442783          	lw	a5,-28(s0)
2001389c:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:235
                closest_diff = freq_diff;
200138a0:	fdc42783          	lw	a5,-36(s0)
200138a4:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:226 (discriminator 2)
    for(int i = (sizeof(pll_configs) / sizeof(pll_configs[0])) - 1; i >= 0; i--)
200138a8:	fe442783          	lw	a5,-28(s0)
200138ac:	17fd                	addi	a5,a5,-1
200138ae:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:226 (discriminator 1)
200138b2:	fe442783          	lw	a5,-28(s0)
200138b6:	f807dbe3          	bgez	a5,2001384c <find_closest_config+0x2c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:240
            }
        }
    }

    return closest_index;
200138ba:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:241
}
200138be:	853e                	mv	a0,a5
200138c0:	50f2                	lw	ra,60(sp)
200138c2:	5462                	lw	s0,56(sp)
200138c4:	6121                	addi	sp,sp,64
200138c6:	8082                	ret

200138c8 <configure_pll>:
configure_pll():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:245

/* Configure the PLL and wait for it to lock */
static void configure_pll(__metal_io_u32 *pllcfg, __metal_io_u32 *plloutdiv, const struct pll_config_t *config)
{
200138c8:	1101                	addi	sp,sp,-32
200138ca:	ce22                	sw	s0,28(sp)
200138cc:	1000                	addi	s0,sp,32
200138ce:	fea42623          	sw	a0,-20(s0)
200138d2:	feb42423          	sw	a1,-24(s0)
200138d6:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:246
    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_R);
200138da:	fec42783          	lw	a5,-20(s0)
200138de:	439c                	lw	a5,0(a5)
200138e0:	ff87f713          	andi	a4,a5,-8
200138e4:	fec42783          	lw	a5,-20(s0)
200138e8:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:247
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_R_SHIFT(config->r);
200138ea:	fec42783          	lw	a5,-20(s0)
200138ee:	4398                	lw	a4,0(a5)
200138f0:	fe442783          	lw	a5,-28(s0)
200138f4:	4b9c                	lw	a5,16(a5)
200138f6:	8b9d                	andi	a5,a5,7
200138f8:	8f5d                	or	a4,a4,a5
200138fa:	fec42783          	lw	a5,-20(s0)
200138fe:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:249

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_F);
20013900:	fec42783          	lw	a5,-20(s0)
20013904:	439c                	lw	a5,0(a5)
20013906:	c0f7f713          	andi	a4,a5,-1009
2001390a:	fec42783          	lw	a5,-20(s0)
2001390e:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:250
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_F_SHIFT(config->f);
20013910:	fec42783          	lw	a5,-20(s0)
20013914:	4398                	lw	a4,0(a5)
20013916:	fe442783          	lw	a5,-28(s0)
2001391a:	4bdc                	lw	a5,20(a5)
2001391c:	0792                	slli	a5,a5,0x4
2001391e:	3f07f793          	andi	a5,a5,1008
20013922:	8f5d                	or	a4,a4,a5
20013924:	fec42783          	lw	a5,-20(s0)
20013928:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:252

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_Q);
2001392a:	fec42783          	lw	a5,-20(s0)
2001392e:	4398                	lw	a4,0(a5)
20013930:	77fd                	lui	a5,0xfffff
20013932:	3ff78793          	addi	a5,a5,1023 # fffff3ff <metal_segment_heap_target_end+0x7fffb3ff>
20013936:	8f7d                	and	a4,a4,a5
20013938:	fec42783          	lw	a5,-20(s0)
2001393c:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:253
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_Q_SHIFT(config->q);
2001393e:	fec42783          	lw	a5,-20(s0)
20013942:	4398                	lw	a4,0(a5)
20013944:	fe442783          	lw	a5,-28(s0)
20013948:	4f9c                	lw	a5,24(a5)
2001394a:	00a79693          	slli	a3,a5,0xa
2001394e:	6785                	lui	a5,0x1
20013950:	c0078793          	addi	a5,a5,-1024 # c00 <__heap_size+0x800>
20013954:	8ff5                	and	a5,a5,a3
20013956:	8f5d                	or	a4,a4,a5
20013958:	fec42783          	lw	a5,-20(s0)
2001395c:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:255

    if(config->d < 0)
2001395e:	fe442783          	lw	a5,-28(s0)
20013962:	4fdc                	lw	a5,28(a5)
20013964:	0207db63          	bgez	a5,2001399a <configure_pll+0xd2>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:258
    {
        /* disable final divider */
        __METAL_ACCESS_ONCE(plloutdiv) |= DIV_1;
20013968:	fe842783          	lw	a5,-24(s0)
2001396c:	439c                	lw	a5,0(a5)
2001396e:	1007e713          	ori	a4,a5,256
20013972:	fe842783          	lw	a5,-24(s0)
20013976:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:260

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
20013978:	fe842783          	lw	a5,-24(s0)
2001397c:	439c                	lw	a5,0(a5)
2001397e:	fc07f713          	andi	a4,a5,-64
20013982:	fe842783          	lw	a5,-24(s0)
20013986:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:261
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(1);
20013988:	fe842783          	lw	a5,-24(s0)
2001398c:	439c                	lw	a5,0(a5)
2001398e:	0017e713          	ori	a4,a5,1
20013992:	fe842783          	lw	a5,-24(s0)
20013996:	c398                	sw	a4,0(a5)
20013998:	a82d                	j	200139d2 <configure_pll+0x10a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:265
    }
    else
    {
        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_1);
2001399a:	fe842783          	lw	a5,-24(s0)
2001399e:	439c                	lw	a5,0(a5)
200139a0:	eff7f713          	andi	a4,a5,-257
200139a4:	fe842783          	lw	a5,-24(s0)
200139a8:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:267

        __METAL_ACCESS_ONCE(plloutdiv) &= ~(DIV_DIV);
200139aa:	fe842783          	lw	a5,-24(s0)
200139ae:	439c                	lw	a5,0(a5)
200139b0:	fc07f713          	andi	a4,a5,-64
200139b4:	fe842783          	lw	a5,-24(s0)
200139b8:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:268
        __METAL_ACCESS_ONCE(plloutdiv) |= PLL_DIV_SHIFT(config->d);
200139ba:	fe842783          	lw	a5,-24(s0)
200139be:	4398                	lw	a4,0(a5)
200139c0:	fe442783          	lw	a5,-28(s0)
200139c4:	4fdc                	lw	a5,28(a5)
200139c6:	03f7f793          	andi	a5,a5,63
200139ca:	8f5d                	or	a4,a4,a5
200139cc:	fe842783          	lw	a5,-24(s0)
200139d0:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:271
    }

    __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_BYPASS);
200139d2:	fec42783          	lw	a5,-20(s0)
200139d6:	4398                	lw	a4,0(a5)
200139d8:	fffc07b7          	lui	a5,0xfffc0
200139dc:	17fd                	addi	a5,a5,-1
200139de:	8f7d                	and	a4,a4,a5
200139e0:	fec42783          	lw	a5,-20(s0)
200139e4:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:274

    /* Wait for PLL to lock */
    while((__METAL_ACCESS_ONCE(pllcfg) & PLL_LOCK) == 0) ;
200139e6:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:274 (discriminator 1)
200139e8:	fec42783          	lw	a5,-20(s0)
200139ec:	439c                	lw	a5,0(a5)
200139ee:	fe07dde3          	bgez	a5,200139e8 <configure_pll+0x120>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:275
}
200139f2:	0001                	nop
200139f4:	4472                	lw	s0,28(sp)
200139f6:	6105                	addi	sp,sp,32
200139f8:	8082                	ret

200139fa <__metal_driver_sifive_fe310_g000_pll_set_rate_hz>:
__metal_driver_sifive_fe310_g000_pll_set_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:278

long __metal_driver_sifive_fe310_g000_pll_set_rate_hz(struct metal_clock *clock, long rate)
{
200139fa:	7139                	addi	sp,sp,-64
200139fc:	de06                	sw	ra,60(sp)
200139fe:	dc22                	sw	s0,56(sp)
20013a00:	0080                	addi	s0,sp,64
20013a02:	fca42623          	sw	a0,-52(s0)
20013a06:	fcb42423          	sw	a1,-56(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:279
    struct __metal_driver_sifive_fe310_g000_pll *clk = (void *)clock;
20013a0a:	fcc42783          	lw	a5,-52(s0)
20013a0e:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:280
    __metal_io_u32 *pllcfg = (__metal_io_u32 *) (clk->config_base->base + clk->config_offset);
20013a12:	fec42783          	lw	a5,-20(s0)
20013a16:	539c                	lw	a5,32(a5)
20013a18:	43d8                	lw	a4,4(a5)
20013a1a:	fec42783          	lw	a5,-20(s0)
20013a1e:	53dc                	lw	a5,36(a5)
20013a20:	97ba                	add	a5,a5,a4
20013a22:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:281
    __metal_io_u32 *plloutdiv = (__metal_io_u32 *) (clk->divider_base->base + clk->divider_offset);
20013a26:	fec42783          	lw	a5,-20(s0)
20013a2a:	579c                	lw	a5,40(a5)
20013a2c:	43d8                	lw	a4,4(a5)
20013a2e:	fec42783          	lw	a5,-20(s0)
20013a32:	57dc                	lw	a5,44(a5)
20013a34:	97ba                	add	a5,a5,a4
20013a36:	fef42223          	sw	a5,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:284

    /* We can't modify the PLL if coreclk is driven by it, so switch it off */
    if (__METAL_ACCESS_ONCE(pllcfg) & PLL_SEL)
20013a3a:	fe842783          	lw	a5,-24(s0)
20013a3e:	4398                	lw	a4,0(a5)
20013a40:	67c1                	lui	a5,0x10
20013a42:	8ff9                	and	a5,a5,a4
20013a44:	cb91                	beqz	a5,20013a58 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x5e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:285
        __METAL_ACCESS_ONCE(pllcfg) &= ~(PLL_SEL);
20013a46:	fe842783          	lw	a5,-24(s0)
20013a4a:	4398                	lw	a4,0(a5)
20013a4c:	77c1                	lui	a5,0xffff0
20013a4e:	17fd                	addi	a5,a5,-1
20013a50:	8f7d                	and	a4,a4,a5
20013a52:	fe842783          	lw	a5,-24(s0)
20013a56:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:289

    /* There's a clock mux before the PLL that selects between the HFROSC and
     * the HFXOSC as the PLL's input clock. */
    long ref_hz = metal_clock_get_rate_hz(__METAL_ACCESS_ONCE(pllcfg) & PLL_REFSEL ? clk->pllref : clk->pllsel0);
20013a58:	fe842783          	lw	a5,-24(s0)
20013a5c:	4398                	lw	a4,0(a5)
20013a5e:	000207b7          	lui	a5,0x20
20013a62:	8ff9                	and	a5,a5,a4
20013a64:	c789                	beqz	a5,20013a6e <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x74>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:289 (discriminator 1)
20013a66:	fec42783          	lw	a5,-20(s0)
20013a6a:	4fdc                	lw	a5,28(a5)
20013a6c:	a021                	j	20013a74 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x7a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:289 (discriminator 2)
20013a6e:	fec42783          	lw	a5,-20(s0)
20013a72:	4f9c                	lw	a5,24(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:289 (discriminator 4)
20013a74:	853e                	mv	a0,a5
20013a76:	2509                	jal	20014078 <metal_clock_get_rate_hz>
20013a78:	fea42023          	sw	a0,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:292 (discriminator 4)

    /* if the desired rate is within 75%-125% of the input clock, bypass the PLL */
    if((ref_hz * 3 / 4) <= rate && (ref_hz * 5 / 4) >= rate)
20013a7c:	fe042703          	lw	a4,-32(s0)
20013a80:	87ba                	mv	a5,a4
20013a82:	0786                	slli	a5,a5,0x1
20013a84:	97ba                	add	a5,a5,a4
20013a86:	41f7d713          	srai	a4,a5,0x1f
20013a8a:	8b0d                	andi	a4,a4,3
20013a8c:	97ba                	add	a5,a5,a4
20013a8e:	8789                	srai	a5,a5,0x2
20013a90:	873e                	mv	a4,a5
20013a92:	fc842783          	lw	a5,-56(s0)
20013a96:	02e7cb63          	blt	a5,a4,20013acc <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xd2>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:292 (discriminator 1)
20013a9a:	fe042703          	lw	a4,-32(s0)
20013a9e:	87ba                	mv	a5,a4
20013aa0:	078a                	slli	a5,a5,0x2
20013aa2:	97ba                	add	a5,a5,a4
20013aa4:	41f7d713          	srai	a4,a5,0x1f
20013aa8:	8b0d                	andi	a4,a4,3
20013aaa:	97ba                	add	a5,a5,a4
20013aac:	8789                	srai	a5,a5,0x2
20013aae:	873e                	mv	a4,a5
20013ab0:	fc842783          	lw	a5,-56(s0)
20013ab4:	00f74c63          	blt	a4,a5,20013acc <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0xd2>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:294
    {
        __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20013ab8:	fe842783          	lw	a5,-24(s0)
20013abc:	4398                	lw	a4,0(a5)
20013abe:	000407b7          	lui	a5,0x40
20013ac2:	8f5d                	or	a4,a4,a5
20013ac4:	fe842783          	lw	a5,-24(s0)
20013ac8:	c398                	sw	a4,0(a5)
20013aca:	a0b1                	j	20013b16 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x11c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:298
    }
    else
    {
        int config_index = find_closest_config(ref_hz, rate);
20013acc:	fc842583          	lw	a1,-56(s0)
20013ad0:	fe042503          	lw	a0,-32(s0)
20013ad4:	33b1                	jal	20013820 <find_closest_config>
20013ad6:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:299
        if(config_index != -1)
20013ada:	fdc42703          	lw	a4,-36(s0)
20013ade:	57fd                	li	a5,-1
20013ae0:	02f70263          	beq	a4,a5,20013b04 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x10a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:301
        {
            configure_pll(pllcfg, plloutdiv, &(pll_configs[config_index]));
20013ae4:	fdc42783          	lw	a5,-36(s0)
20013ae8:	00579713          	slli	a4,a5,0x5
20013aec:	200147b7          	lui	a5,0x20014
20013af0:	40c78793          	addi	a5,a5,1036 # 2001440c <pll_configs>
20013af4:	97ba                	add	a5,a5,a4
20013af6:	863e                	mv	a2,a5
20013af8:	fe442583          	lw	a1,-28(s0)
20013afc:	fe842503          	lw	a0,-24(s0)
20013b00:	33e1                	jal	200138c8 <configure_pll>
20013b02:	a811                	j	20013b16 <__metal_driver_sifive_fe310_g000_pll_set_rate_hz+0x11c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:306
        }
        else
        {
            /* unable to find a valid configuration */
            __METAL_ACCESS_ONCE(pllcfg) |= PLL_BYPASS;
20013b04:	fe842783          	lw	a5,-24(s0)
20013b08:	4398                	lw	a4,0(a5)
20013b0a:	000407b7          	lui	a5,0x40
20013b0e:	8f5d                	or	a4,a4,a5
20013b10:	fe842783          	lw	a5,-24(s0)
20013b14:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:311
        }
    }

    /* Enable the PLL */
    __METAL_ACCESS_ONCE(pllcfg) |= PLL_SEL;
20013b16:	fe842783          	lw	a5,-24(s0)
20013b1a:	4398                	lw	a4,0(a5)
20013b1c:	67c1                	lui	a5,0x10
20013b1e:	8f5d                	or	a4,a4,a5
20013b20:	fe842783          	lw	a5,-24(s0)
20013b24:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:313

    return __metal_driver_sifive_fe310_g000_pll_get_rate_hz(clock);
20013b26:	fcc42503          	lw	a0,-52(s0)
20013b2a:	3645                	jal	200136ca <__metal_driver_sifive_fe310_g000_pll_get_rate_hz>
20013b2c:	87aa                	mv	a5,a0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:314
}
20013b2e:	853e                	mv	a0,a5
20013b30:	50f2                	lw	ra,60(sp)
20013b32:	5462                	lw	s0,56(sp)
20013b34:	6121                	addi	sp,sp,64
20013b36:	8082                	ret

20013b38 <use_hfxosc>:
use_hfxosc():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:319

#ifdef __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE
static void use_hfxosc(void) __attribute__((constructor));
static void use_hfxosc(void)
{
20013b38:	1141                	addi	sp,sp,-16
20013b3a:	c606                	sw	ra,12(sp)
20013b3c:	c422                	sw	s0,8(sp)
20013b3e:	0800                	addi	s0,sp,16
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:320
    metal_clock_set_rate_hz(
20013b40:	800017b7          	lui	a5,0x80001
20013b44:	05078793          	addi	a5,a5,80 # 80001050 <metal_segment_heap_target_end+0xffffd050>
20013b48:	5b9c                	lw	a5,48(a5)
20013b4a:	85be                	mv	a1,a5
20013b4c:	800017b7          	lui	a5,0x80001
20013b50:	05078513          	addi	a0,a5,80 # 80001050 <metal_segment_heap_target_end+0xffffd050>
20013b54:	23a9                	jal	2001409e <metal_clock_set_rate_hz>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,pll.c:324
        &__METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->clock,
        __METAL_DT_SIFIVE_FE310_G000_PLL_HANDLE->init_rate
    );
}
20013b56:	0001                	nop
20013b58:	40b2                	lw	ra,12(sp)
20013b5a:	4422                	lw	s0,8(sp)
20013b5c:	0141                	addi	sp,sp,16
20013b5e:	8082                	ret

20013b60 <__metal_driver_sifive_fe310_g000_prci_get_reg>:
__metal_driver_sifive_fe310_g000_prci_get_reg():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:6
/* Copyright 2018 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#include <metal/drivers/sifive,fe310-g000,prci.h>

long __metal_driver_sifive_fe310_g000_prci_get_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset) {
20013b60:	1101                	addi	sp,sp,-32
20013b62:	ce22                	sw	s0,28(sp)
20013b64:	1000                	addi	s0,sp,32
20013b66:	fea42623          	sw	a0,-20(s0)
20013b6a:	feb42423          	sw	a1,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:7
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(prci->base + offset));
20013b6e:	fec42783          	lw	a5,-20(s0)
20013b72:	43d8                	lw	a4,4(a5)
20013b74:	fe842783          	lw	a5,-24(s0)
20013b78:	97ba                	add	a5,a5,a4
20013b7a:	439c                	lw	a5,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:8
}
20013b7c:	853e                	mv	a0,a5
20013b7e:	4472                	lw	s0,28(sp)
20013b80:	6105                	addi	sp,sp,32
20013b82:	8082                	ret

20013b84 <__metal_driver_sifive_fe310_g000_prci_set_reg>:
__metal_driver_sifive_fe310_g000_prci_set_reg():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:10

long __metal_driver_sifive_fe310_g000_prci_set_reg(const struct __metal_driver_sifive_fe310_g000_prci *prci, long offset, long value) {
20013b84:	1101                	addi	sp,sp,-32
20013b86:	ce22                	sw	s0,28(sp)
20013b88:	1000                	addi	s0,sp,32
20013b8a:	fea42623          	sw	a0,-20(s0)
20013b8e:	feb42423          	sw	a1,-24(s0)
20013b92:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:11
    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(prci->base + offset)) = value;
20013b96:	fec42783          	lw	a5,-20(s0)
20013b9a:	43d8                	lw	a4,4(a5)
20013b9c:	fe842783          	lw	a5,-24(s0)
20013ba0:	97ba                	add	a5,a5,a4
20013ba2:	873e                	mv	a4,a5
20013ba4:	fe442783          	lw	a5,-28(s0)
20013ba8:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,fe310-g000,prci.c:12
}
20013baa:	853e                	mv	a0,a5
20013bac:	4472                	lw	s0,28(sp)
20013bae:	6105                	addi	sp,sp,32
20013bb0:	8082                	ret

20013bb2 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:16

#define GPIO_IOF_EN     (0x38)
#define GPIO_IOF_SEL    (0x3C)

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio, long source)
{
20013bb2:	7179                	addi	sp,sp,-48
20013bb4:	d622                	sw	s0,44(sp)
20013bb6:	1800                	addi	s0,sp,48
20013bb8:	fca42e23          	sw	a0,-36(s0)
20013bbc:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:17
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20013bc0:	fdc42783          	lw	a5,-36(s0)
20013bc4:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:19

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_INPUT_EN))  &= ~source;
20013bc8:	fec42783          	lw	a5,-20(s0)
20013bcc:	479c                	lw	a5,8(a5)
20013bce:	0791                	addi	a5,a5,4
20013bd0:	439c                	lw	a5,0(a5)
20013bd2:	fd842703          	lw	a4,-40(s0)
20013bd6:	fff74713          	not	a4,a4
20013bda:	86ba                	mv	a3,a4
20013bdc:	fec42703          	lw	a4,-20(s0)
20013be0:	4718                	lw	a4,8(a4)
20013be2:	0711                	addi	a4,a4,4
20013be4:	8ff5                	and	a5,a5,a3
20013be6:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:21

    return 0;
20013be8:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:22
}
20013bea:	853e                	mv	a0,a5
20013bec:	5432                	lw	s0,44(sp)
20013bee:	6145                	addi	sp,sp,48
20013bf0:	8082                	ret

20013bf2 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:25

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio)
{
20013bf2:	7179                	addi	sp,sp,-48
20013bf4:	d622                	sw	s0,44(sp)
20013bf6:	1800                	addi	s0,sp,48
20013bf8:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:26
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20013bfc:	fdc42783          	lw	a5,-36(s0)
20013c00:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:28

    return __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL));
20013c04:	fec42783          	lw	a5,-20(s0)
20013c08:	479c                	lw	a5,8(a5)
20013c0a:	07b1                	addi	a5,a5,12
20013c0c:	439c                	lw	a5,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:29
}
20013c0e:	853e                	mv	a0,a5
20013c10:	5432                	lw	s0,44(sp)
20013c12:	6145                	addi	sp,sp,48
20013c14:	8082                	ret

20013c16 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:32

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio, long source)
{
20013c16:	7179                	addi	sp,sp,-48
20013c18:	d622                	sw	s0,44(sp)
20013c1a:	1800                	addi	s0,sp,48
20013c1c:	fca42e23          	sw	a0,-36(s0)
20013c20:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:33
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20013c24:	fdc42783          	lw	a5,-36(s0)
20013c28:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:35

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_EN))  |= source;
20013c2c:	fec42783          	lw	a5,-20(s0)
20013c30:	479c                	lw	a5,8(a5)
20013c32:	07a1                	addi	a5,a5,8
20013c34:	4398                	lw	a4,0(a5)
20013c36:	fd842783          	lw	a5,-40(s0)
20013c3a:	fec42683          	lw	a3,-20(s0)
20013c3e:	4694                	lw	a3,8(a3)
20013c40:	06a1                	addi	a3,a3,8
20013c42:	8fd9                	or	a5,a5,a4
20013c44:	c29c                	sw	a5,0(a3)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:37

    return 0;
20013c46:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:38
}
20013c48:	853e                	mv	a0,a5
20013c4a:	5432                	lw	s0,44(sp)
20013c4c:	6145                	addi	sp,sp,48
20013c4e:	8082                	ret

20013c50 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:41

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio, long value)
{
20013c50:	7179                	addi	sp,sp,-48
20013c52:	d622                	sw	s0,44(sp)
20013c54:	1800                	addi	s0,sp,48
20013c56:	fca42e23          	sw	a0,-36(s0)
20013c5a:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:42
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20013c5e:	fdc42783          	lw	a5,-36(s0)
20013c62:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:44

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) |= value;
20013c66:	fec42783          	lw	a5,-20(s0)
20013c6a:	479c                	lw	a5,8(a5)
20013c6c:	07b1                	addi	a5,a5,12
20013c6e:	4398                	lw	a4,0(a5)
20013c70:	fd842783          	lw	a5,-40(s0)
20013c74:	fec42683          	lw	a3,-20(s0)
20013c78:	4694                	lw	a3,8(a3)
20013c7a:	06b1                	addi	a3,a3,12
20013c7c:	8fd9                	or	a5,a5,a4
20013c7e:	c29c                	sw	a5,0(a3)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:46

    return 0;
20013c80:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:47
}
20013c82:	853e                	mv	a0,a5
20013c84:	5432                	lw	s0,44(sp)
20013c86:	6145                	addi	sp,sp,48
20013c88:	8082                	ret

20013c8a <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:50

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio, long value)
{
20013c8a:	7179                	addi	sp,sp,-48
20013c8c:	d622                	sw	s0,44(sp)
20013c8e:	1800                	addi	s0,sp,48
20013c90:	fca42e23          	sw	a0,-36(s0)
20013c94:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:51
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20013c98:	fdc42783          	lw	a5,-36(s0)
20013c9c:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:53

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) &= ~value;
20013ca0:	fec42783          	lw	a5,-20(s0)
20013ca4:	479c                	lw	a5,8(a5)
20013ca6:	07b1                	addi	a5,a5,12
20013ca8:	439c                	lw	a5,0(a5)
20013caa:	fd842703          	lw	a4,-40(s0)
20013cae:	fff74713          	not	a4,a4
20013cb2:	86ba                	mv	a3,a4
20013cb4:	fec42703          	lw	a4,-20(s0)
20013cb8:	4718                	lw	a4,8(a4)
20013cba:	0731                	addi	a4,a4,12
20013cbc:	8ff5                	and	a5,a5,a3
20013cbe:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:55

    return 0;
20013cc0:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:56
}
20013cc2:	853e                	mv	a0,a5
20013cc4:	5432                	lw	s0,44(sp)
20013cc6:	6145                	addi	sp,sp,48
20013cc8:	8082                	ret

20013cca <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:59

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio, long value)
{
20013cca:	7179                	addi	sp,sp,-48
20013ccc:	d622                	sw	s0,44(sp)
20013cce:	1800                	addi	s0,sp,48
20013cd0:	fca42e23          	sw	a0,-36(s0)
20013cd4:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:60
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20013cd8:	fdc42783          	lw	a5,-36(s0)
20013cdc:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:63

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) ^ value;
20013ce0:	fec42783          	lw	a5,-20(s0)
20013ce4:	479c                	lw	a5,8(a5)
20013ce6:	07b1                	addi	a5,a5,12
20013ce8:	4398                	lw	a4,0(a5)
20013cea:	fd842783          	lw	a5,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:62
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
20013cee:	fec42683          	lw	a3,-20(s0)
20013cf2:	4694                	lw	a3,8(a3)
20013cf4:	06b1                	addi	a3,a3,12
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:63
	__METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) ^ value;
20013cf6:	8fb9                	xor	a5,a5,a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:62
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_OUTPUT_VAL)) =
20013cf8:	c29c                	sw	a5,0(a3)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:65

    return 0;
20013cfa:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:66
}
20013cfc:	853e                	mv	a0,a5
20013cfe:	5432                	lw	s0,44(sp)
20013d00:	6145                	addi	sp,sp,48
20013d02:	8082                	ret

20013d04 <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:69

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source, long dest)
{
20013d04:	7179                	addi	sp,sp,-48
20013d06:	d622                	sw	s0,44(sp)
20013d08:	1800                	addi	s0,sp,48
20013d0a:	fca42e23          	sw	a0,-36(s0)
20013d0e:	fcb42c23          	sw	a1,-40(s0)
20013d12:	fcc42a23          	sw	a2,-44(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:70
    struct __metal_driver_sifive_gpio0 *gpio = (void *)ggpio;
20013d16:	fdc42783          	lw	a5,-36(s0)
20013d1a:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:72

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_IOF_SEL)) &= ~source;
20013d1e:	fec42783          	lw	a5,-20(s0)
20013d22:	479c                	lw	a5,8(a5)
20013d24:	03c78793          	addi	a5,a5,60
20013d28:	439c                	lw	a5,0(a5)
20013d2a:	fd842703          	lw	a4,-40(s0)
20013d2e:	fff74713          	not	a4,a4
20013d32:	86ba                	mv	a3,a4
20013d34:	fec42703          	lw	a4,-20(s0)
20013d38:	4718                	lw	a4,8(a4)
20013d3a:	03c70713          	addi	a4,a4,60
20013d3e:	8ff5                	and	a5,a5,a3
20013d40:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:73
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(gpio->base + GPIO_IOF_EN))  |= dest;
20013d42:	fec42783          	lw	a5,-20(s0)
20013d46:	479c                	lw	a5,8(a5)
20013d48:	03878793          	addi	a5,a5,56
20013d4c:	4398                	lw	a4,0(a5)
20013d4e:	fd442783          	lw	a5,-44(s0)
20013d52:	fec42683          	lw	a3,-20(s0)
20013d56:	4694                	lw	a3,8(a3)
20013d58:	03868693          	addi	a3,a3,56
20013d5c:	8fd9                	or	a5,a5,a4
20013d5e:	c29c                	sw	a5,0(a3)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:75

    return 0;
20013d60:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,gpio0.c:76
}
20013d62:	853e                	mv	a0,a5
20013d64:	5432                	lw	s0,44(sp)
20013d66:	6145                	addi	sp,sp,48
20013d68:	8082                	ret

20013d6a <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:37
#define UART_REGB(offset)  (__METAL_ACCESS_ONCE((__metal_io_u8  *)UART_REG(offset)))
#define UART_REGW(offset)  (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart)
{
20013d6a:	7179                	addi	sp,sp,-48
20013d6c:	d622                	sw	s0,44(sp)
20013d6e:	1800                	addi	s0,sp,48
20013d70:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:38
    struct __metal_driver_sifive_uart0 *uart0 = (void *)uart;
20013d74:	fdc42783          	lw	a5,-36(s0)
20013d78:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:39
    return (struct metal_interrupt *)uart0->interrupt_parent;
20013d7c:	fec42783          	lw	a5,-20(s0)
20013d80:	53dc                	lw	a5,36(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:40
}
20013d82:	853e                	mv	a0,a5
20013d84:	5432                	lw	s0,44(sp)
20013d86:	6145                	addi	sp,sp,48
20013d88:	8082                	ret

20013d8a <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:43

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart)
{
20013d8a:	7179                	addi	sp,sp,-48
20013d8c:	d622                	sw	s0,44(sp)
20013d8e:	1800                	addi	s0,sp,48
20013d90:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:44
    struct __metal_driver_sifive_uart0 *uart0 = (void *)uart;
20013d94:	fdc42783          	lw	a5,-36(s0)
20013d98:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:45
    return (uart0->interrupt_line + METAL_INTERRUPT_ID_GL0);
20013d9c:	fec42783          	lw	a5,-20(s0)
20013da0:	57dc                	lw	a5,44(a5)
20013da2:	02078793          	addi	a5,a5,32
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:46
}
20013da6:	853e                	mv	a0,a5
20013da8:	5432                	lw	s0,44(sp)
20013daa:	6145                	addi	sp,sp,48
20013dac:	8082                	ret

20013dae <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:49

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, unsigned char c)
{
20013dae:	1101                	addi	sp,sp,-32
20013db0:	ce22                	sw	s0,28(sp)
20013db2:	1000                	addi	s0,sp,32
20013db4:	fea42623          	sw	a0,-20(s0)
20013db8:	87ae                	mv	a5,a1
20013dba:	fef405a3          	sb	a5,-21(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:50
    while ((UART_REGW(UART_REG_TXDATA) & UART_TXFULL) != 0) { }
20013dbe:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:50 (discriminator 1)
20013dc0:	fec42783          	lw	a5,-20(s0)
20013dc4:	47dc                	lw	a5,12(a5)
20013dc6:	439c                	lw	a5,0(a5)
20013dc8:	fe07cce3          	bltz	a5,20013dc0 <__metal_driver_sifive_uart0_putc+0x12>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:51
    UART_REGW(UART_REG_TXDATA) = c;
20013dcc:	fec42783          	lw	a5,-20(s0)
20013dd0:	47dc                	lw	a5,12(a5)
20013dd2:	873e                	mv	a4,a5
20013dd4:	feb44783          	lbu	a5,-21(s0)
20013dd8:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:52
    return 0;
20013dda:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:53
}
20013ddc:	853e                	mv	a0,a5
20013dde:	4472                	lw	s0,28(sp)
20013de0:	6105                	addi	sp,sp,32
20013de2:	8082                	ret

20013de4 <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:56

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, unsigned char *c)
{
20013de4:	7179                	addi	sp,sp,-48
20013de6:	d622                	sw	s0,44(sp)
20013de8:	1800                	addi	s0,sp,48
20013dea:	fca42e23          	sw	a0,-36(s0)
20013dee:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:57
    uint32_t ch = UART_RXEMPTY;
20013df2:	800007b7          	lui	a5,0x80000
20013df6:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:58
    while (ch & UART_RXEMPTY) {
20013dfa:	a801                	j	20013e0a <__metal_driver_sifive_uart0_getc+0x26>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:59
        ch = UART_REGW(UART_REG_RXDATA);
20013dfc:	fdc42783          	lw	a5,-36(s0)
20013e00:	47dc                	lw	a5,12(a5)
20013e02:	0791                	addi	a5,a5,4
20013e04:	439c                	lw	a5,0(a5)
20013e06:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:58
    while (ch & UART_RXEMPTY) {
20013e0a:	fec42783          	lw	a5,-20(s0)
20013e0e:	fe07c7e3          	bltz	a5,20013dfc <__metal_driver_sifive_uart0_getc+0x18>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:61
    }
    *c = ch & 0xff;
20013e12:	fec42783          	lw	a5,-20(s0)
20013e16:	0ff7f713          	andi	a4,a5,255
20013e1a:	fd842783          	lw	a5,-40(s0)
20013e1e:	00e78023          	sb	a4,0(a5) # 80000000 <metal_segment_heap_target_end+0xffffc000>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:62
    return 0;
20013e22:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:63
}
20013e24:	853e                	mv	a0,a5
20013e26:	5432                	lw	s0,44(sp)
20013e28:	6145                	addi	sp,sp,48
20013e2a:	8082                	ret

20013e2c <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:66

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart)
{
20013e2c:	7179                	addi	sp,sp,-48
20013e2e:	d622                	sw	s0,44(sp)
20013e30:	1800                	addi	s0,sp,48
20013e32:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:67
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20013e36:	fdc42783          	lw	a5,-36(s0)
20013e3a:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:68
    return uart->baud_rate;
20013e3e:	fec42783          	lw	a5,-20(s0)
20013e42:	4bdc                	lw	a5,20(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:69
}
20013e44:	853e                	mv	a0,a5
20013e46:	5432                	lw	s0,44(sp)
20013e48:	6145                	addi	sp,sp,48
20013e4a:	8082                	ret

20013e4c <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:72

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart, int baud_rate)
{
20013e4c:	7179                	addi	sp,sp,-48
20013e4e:	d606                	sw	ra,44(sp)
20013e50:	d422                	sw	s0,40(sp)
20013e52:	1800                	addi	s0,sp,48
20013e54:	fca42e23          	sw	a0,-36(s0)
20013e58:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:73
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20013e5c:	fdc42783          	lw	a5,-36(s0)
20013e60:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:75

    uart->baud_rate = baud_rate;
20013e64:	fd842703          	lw	a4,-40(s0)
20013e68:	fec42783          	lw	a5,-20(s0)
20013e6c:	cbd8                	sw	a4,20(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:77

    if (uart->clock != NULL) {
20013e6e:	fec42783          	lw	a5,-20(s0)
20013e72:	479c                	lw	a5,8(a5)
20013e74:	c3b5                	beqz	a5,20013ed8 <__metal_driver_sifive_uart0_set_baud_rate+0x8c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:78
        long clock_rate = uart->clock->vtable->get_rate_hz(uart->clock);
20013e76:	fec42783          	lw	a5,-20(s0)
20013e7a:	479c                	lw	a5,8(a5)
20013e7c:	439c                	lw	a5,0(a5)
20013e7e:	4398                	lw	a4,0(a5)
20013e80:	fec42783          	lw	a5,-20(s0)
20013e84:	479c                	lw	a5,8(a5)
20013e86:	853e                	mv	a0,a5
20013e88:	9702                	jalr	a4
20013e8a:	fea42423          	sw	a0,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:79
        UART_REGW(UART_REG_DIV) = clock_rate / baud_rate - 1;
20013e8e:	fe842703          	lw	a4,-24(s0)
20013e92:	fd842783          	lw	a5,-40(s0)
20013e96:	02f747b3          	div	a5,a4,a5
20013e9a:	fff78713          	addi	a4,a5,-1
20013e9e:	fec42783          	lw	a5,-20(s0)
20013ea2:	47dc                	lw	a5,12(a5)
20013ea4:	07e1                	addi	a5,a5,24
20013ea6:	c398                	sw	a4,0(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:80
        UART_REGW(UART_REG_TXCTRL) |= UART_TXEN;
20013ea8:	fec42783          	lw	a5,-20(s0)
20013eac:	47dc                	lw	a5,12(a5)
20013eae:	07a1                	addi	a5,a5,8
20013eb0:	439c                	lw	a5,0(a5)
20013eb2:	fec42703          	lw	a4,-20(s0)
20013eb6:	4758                	lw	a4,12(a4)
20013eb8:	0721                	addi	a4,a4,8
20013eba:	0017e793          	ori	a5,a5,1
20013ebe:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:81
        UART_REGW(UART_REG_RXCTRL) |= UART_RXEN;
20013ec0:	fec42783          	lw	a5,-20(s0)
20013ec4:	47dc                	lw	a5,12(a5)
20013ec6:	07b1                	addi	a5,a5,12
20013ec8:	439c                	lw	a5,0(a5)
20013eca:	fec42703          	lw	a4,-20(s0)
20013ece:	4758                	lw	a4,12(a4)
20013ed0:	0731                	addi	a4,a4,12
20013ed2:	0017e793          	ori	a5,a5,1
20013ed6:	c31c                	sw	a5,0(a4)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:83
    }
    return 0;
20013ed8:	4781                	li	a5,0
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:84
}
20013eda:	853e                	mv	a0,a5
20013edc:	50b2                	lw	ra,44(sp)
20013ede:	5422                	lw	s0,40(sp)
20013ee0:	6145                	addi	sp,sp,48
20013ee2:	8082                	ret

20013ee4 <pre_rate_change_callback>:
pre_rate_change_callback():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:87

static void pre_rate_change_callback(void *priv)
{
20013ee4:	7139                	addi	sp,sp,-64
20013ee6:	de06                	sw	ra,60(sp)
20013ee8:	dc22                	sw	s0,56(sp)
20013eea:	0080                	addi	s0,sp,64
20013eec:	fca42623          	sw	a0,-52(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:88
    struct __metal_driver_sifive_uart0 *uart = priv;
20013ef0:	fcc42783          	lw	a5,-52(s0)
20013ef4:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:93

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(UART_REG_TXCTRL) &= ~(UART_TXCNT(0x7));
20013ef8:	fec42783          	lw	a5,-20(s0)
20013efc:	47dc                	lw	a5,12(a5)
20013efe:	07a1                	addi	a5,a5,8
20013f00:	4398                	lw	a4,0(a5)
20013f02:	fec42783          	lw	a5,-20(s0)
20013f06:	47dc                	lw	a5,12(a5)
20013f08:	07a1                	addi	a5,a5,8
20013f0a:	86be                	mv	a3,a5
20013f0c:	fff907b7          	lui	a5,0xfff90
20013f10:	17fd                	addi	a5,a5,-1
20013f12:	8ff9                	and	a5,a5,a4
20013f14:	c29c                	sw	a5,0(a3)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:94
    UART_REGW(UART_REG_TXCTRL) |= UART_TXCNT(1);
20013f16:	fec42783          	lw	a5,-20(s0)
20013f1a:	47dc                	lw	a5,12(a5)
20013f1c:	07a1                	addi	a5,a5,8
20013f1e:	4398                	lw	a4,0(a5)
20013f20:	fec42783          	lw	a5,-20(s0)
20013f24:	47dc                	lw	a5,12(a5)
20013f26:	07a1                	addi	a5,a5,8
20013f28:	86be                	mv	a3,a5
20013f2a:	67c1                	lui	a5,0x10
20013f2c:	8fd9                	or	a5,a5,a4
20013f2e:	c29c                	sw	a5,0(a3)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:96

    while((UART_REGW(UART_REG_IP) & UART_TXWM) == 0) ;
20013f30:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:96 (discriminator 1)
20013f32:	fec42783          	lw	a5,-20(s0)
20013f36:	47dc                	lw	a5,12(a5)
20013f38:	07d1                	addi	a5,a5,20
20013f3a:	439c                	lw	a5,0(a5)
20013f3c:	8b85                	andi	a5,a5,1
20013f3e:	dbf5                	beqz	a5,20013f32 <pre_rate_change_callback+0x4e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:102

    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol = (UART_REGW(UART_REG_TXCTRL) & (1 << 1)) ? 9 : 10;
20013f40:	fec42783          	lw	a5,-20(s0)
20013f44:	47dc                	lw	a5,12(a5)
20013f46:	07a1                	addi	a5,a5,8
20013f48:	439c                	lw	a5,0(a5)
20013f4a:	8b89                	andi	a5,a5,2
20013f4c:	c399                	beqz	a5,20013f52 <pre_rate_change_callback+0x6e>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 1)
20013f4e:	47a5                	li	a5,9
20013f50:	a011                	j	20013f54 <pre_rate_change_callback+0x70>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 2)
20013f52:	47a9                	li	a5,10
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:102 (discriminator 4)
20013f54:	fef42423          	sw	a5,-24(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:103 (discriminator 4)
    long clk_freq = uart->clock->vtable->get_rate_hz(uart->clock);
20013f58:	fec42783          	lw	a5,-20(s0)
20013f5c:	479c                	lw	a5,8(a5)
20013f5e:	439c                	lw	a5,0(a5)
20013f60:	4398                	lw	a4,0(a5)
20013f62:	fec42783          	lw	a5,-20(s0)
20013f66:	479c                	lw	a5,8(a5)
20013f68:	853e                	mv	a0,a5
20013f6a:	9702                	jalr	a4
20013f6c:	fea42223          	sw	a0,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:104 (discriminator 4)
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20013f70:	fe842703          	lw	a4,-24(s0)
20013f74:	fe442783          	lw	a5,-28(s0)
20013f78:	02f707b3          	mul	a5,a4,a5
20013f7c:	873e                	mv	a4,a5
20013f7e:	fec42783          	lw	a5,-20(s0)
20013f82:	4bdc                	lw	a5,20(a5)
20013f84:	02f757b3          	divu	a5,a4,a5
20013f88:	fef42023          	sw	a5,-32(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 4)

    for(volatile long x = 0; x < cycles_to_wait; x++)
20013f8c:	fc042e23          	sw	zero,-36(s0)
20013f90:	a039                	j	20013f9e <pre_rate_change_callback+0xba>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:107 (discriminator 3)
        asm("nop");
20013f92:	0001                	nop
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 3)
    for(volatile long x = 0; x < cycles_to_wait; x++)
20013f94:	fdc42783          	lw	a5,-36(s0)
20013f98:	0785                	addi	a5,a5,1
20013f9a:	fcf42e23          	sw	a5,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:106 (discriminator 1)
20013f9e:	fdc42783          	lw	a5,-36(s0)
20013fa2:	fe042703          	lw	a4,-32(s0)
20013fa6:	fee7c6e3          	blt	a5,a4,20013f92 <pre_rate_change_callback+0xae>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:108
}
20013faa:	0001                	nop
20013fac:	50f2                	lw	ra,60(sp)
20013fae:	5462                	lw	s0,56(sp)
20013fb0:	6121                	addi	sp,sp,64
20013fb2:	8082                	ret

20013fb4 <post_rate_change_callback>:
post_rate_change_callback():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:111

static void post_rate_change_callback(void *priv)
{
20013fb4:	7179                	addi	sp,sp,-48
20013fb6:	d606                	sw	ra,44(sp)
20013fb8:	d422                	sw	s0,40(sp)
20013fba:	1800                	addi	s0,sp,48
20013fbc:	fca42e23          	sw	a0,-36(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:112
    struct __metal_driver_sifive_uart0 *uart = priv;
20013fc0:	fdc42783          	lw	a5,-36(s0)
20013fc4:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:113
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20013fc8:	fec42703          	lw	a4,-20(s0)
20013fcc:	fec42783          	lw	a5,-20(s0)
20013fd0:	4bdc                	lw	a5,20(a5)
20013fd2:	85be                	mv	a1,a5
20013fd4:	853a                	mv	a0,a4
20013fd6:	fadfd0ef          	jal	ra,20011f82 <metal_uart_set_baud_rate>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:114
}
20013fda:	0001                	nop
20013fdc:	50b2                	lw	ra,44(sp)
20013fde:	5422                	lw	s0,40(sp)
20013fe0:	6145                	addi	sp,sp,48
20013fe2:	8082                	ret

20013fe4 <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:117

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate)
{
20013fe4:	7179                	addi	sp,sp,-48
20013fe6:	d606                	sw	ra,44(sp)
20013fe8:	d422                	sw	s0,40(sp)
20013fea:	1800                	addi	s0,sp,48
20013fec:	fca42e23          	sw	a0,-36(s0)
20013ff0:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:118
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
20013ff4:	fdc42783          	lw	a5,-36(s0)
20013ff8:	fef42623          	sw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:120

    if(uart->clock != NULL) {
20013ffc:	fec42783          	lw	a5,-20(s0)
20014000:	479c                	lw	a5,8(a5)
20014002:	c79d                	beqz	a5,20014030 <__metal_driver_sifive_uart0_init+0x4c>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:121
        metal_clock_register_pre_rate_change_callback(uart->clock, &pre_rate_change_callback, uart);
20014004:	fec42783          	lw	a5,-20(s0)
20014008:	4798                	lw	a4,8(a5)
2001400a:	fec42603          	lw	a2,-20(s0)
2001400e:	200147b7          	lui	a5,0x20014
20014012:	ee478593          	addi	a1,a5,-284 # 20013ee4 <pre_rate_change_callback>
20014016:	853a                	mv	a0,a4
20014018:	20ed                	jal	20014102 <metal_clock_register_pre_rate_change_callback>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:122
        metal_clock_register_post_rate_change_callback(uart->clock, &post_rate_change_callback, uart);
2001401a:	fec42783          	lw	a5,-20(s0)
2001401e:	4798                	lw	a4,8(a5)
20014020:	fec42603          	lw	a2,-20(s0)
20014024:	200147b7          	lui	a5,0x20014
20014028:	fb478593          	addi	a1,a5,-76 # 20013fb4 <post_rate_change_callback>
2001402c:	853a                	mv	a0,a4
2001402e:	2209                	jal	20014130 <metal_clock_register_post_rate_change_callback>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:125
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20014030:	fec42783          	lw	a5,-20(s0)
20014034:	fd842583          	lw	a1,-40(s0)
20014038:	853e                	mv	a0,a5
2001403a:	f49fd0ef          	jal	ra,20011f82 <metal_uart_set_baud_rate>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:127

    if (uart->pinmux != NULL) {
2001403e:	fec42783          	lw	a5,-20(s0)
20014042:	4f9c                	lw	a5,24(a5)
20014044:	c78d                	beqz	a5,2001406e <__metal_driver_sifive_uart0_init+0x8a>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
20014046:	fec42783          	lw	a5,-20(s0)
2001404a:	4f9c                	lw	a5,24(a5)
2001404c:	43dc                	lw	a5,4(a5)
2001404e:	0187a803          	lw	a6,24(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:129
            (struct metal_gpio *) uart->pinmux,
20014052:	fec42783          	lw	a5,-20(s0)
20014056:	4f98                	lw	a4,24(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:130
            uart->pinmux_output_selector,
20014058:	fec42783          	lw	a5,-20(s0)
2001405c:	4fdc                	lw	a5,28(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
2001405e:	86be                	mv	a3,a5
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:131
            uart->pinmux_source_selector
20014060:	fec42783          	lw	a5,-20(s0)
20014064:	539c                	lw	a5,32(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:128
        uart->pinmux->vtable->gpio.enable_io(
20014066:	863e                	mv	a2,a5
20014068:	85b6                	mv	a1,a3
2001406a:	853a                	mv	a0,a4
2001406c:	9802                	jalr	a6
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/drivers/sifive,uart0.c:134
        );
    }
}
2001406e:	0001                	nop
20014070:	50b2                	lw	ra,44(sp)
20014072:	5422                	lw	s0,40(sp)
20014074:	6145                	addi	sp,sp,48
20014076:	8082                	ret

20014078 <metal_clock_get_rate_hz>:
metal_clock_get_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:64
 * @brief Returns the current rate of the given clock
 *
 * @param clk The handle for the clock
 * @return The current rate of the clock in Hz
 */
inline long metal_clock_get_rate_hz(const struct metal_clock *clk) { return clk->vtable->get_rate_hz(clk); }
20014078:	1101                	addi	sp,sp,-32
2001407a:	ce06                	sw	ra,28(sp)
2001407c:	cc22                	sw	s0,24(sp)
2001407e:	1000                	addi	s0,sp,32
20014080:	fea42623          	sw	a0,-20(s0)
20014084:	fec42783          	lw	a5,-20(s0)
20014088:	439c                	lw	a5,0(a5)
2001408a:	439c                	lw	a5,0(a5)
2001408c:	fec42503          	lw	a0,-20(s0)
20014090:	9782                	jalr	a5
20014092:	87aa                	mv	a5,a0
20014094:	853e                	mv	a0,a5
20014096:	40f2                	lw	ra,28(sp)
20014098:	4462                	lw	s0,24(sp)
2001409a:	6105                	addi	sp,sp,32
2001409c:	8082                	ret

2001409e <metal_clock_set_rate_hz>:
metal_clock_set_rate_hz():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:81
 *
 * Prior to and after the rate change of the clock, this will call the registered
 * pre- and post-rate change callbacks.
 */
inline long metal_clock_set_rate_hz(struct metal_clock *clk, long hz)
{
2001409e:	7179                	addi	sp,sp,-48
200140a0:	d606                	sw	ra,44(sp)
200140a2:	d422                	sw	s0,40(sp)
200140a4:	1800                	addi	s0,sp,48
200140a6:	fca42e23          	sw	a0,-36(s0)
200140aa:	fcb42c23          	sw	a1,-40(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:82
    if(clk->_pre_rate_change_callback != NULL)
200140ae:	fdc42783          	lw	a5,-36(s0)
200140b2:	43dc                	lw	a5,4(a5)
200140b4:	cb89                	beqz	a5,200140c6 <metal_clock_set_rate_hz+0x28>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:83
        clk->_pre_rate_change_callback(clk->_pre_rate_change_callback_priv);
200140b6:	fdc42783          	lw	a5,-36(s0)
200140ba:	43d8                	lw	a4,4(a5)
200140bc:	fdc42783          	lw	a5,-36(s0)
200140c0:	479c                	lw	a5,8(a5)
200140c2:	853e                	mv	a0,a5
200140c4:	9702                	jalr	a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:85

    long out = clk->vtable->set_rate_hz(clk, hz);
200140c6:	fdc42783          	lw	a5,-36(s0)
200140ca:	439c                	lw	a5,0(a5)
200140cc:	43dc                	lw	a5,4(a5)
200140ce:	fd842583          	lw	a1,-40(s0)
200140d2:	fdc42503          	lw	a0,-36(s0)
200140d6:	9782                	jalr	a5
200140d8:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:87

    if (clk->_post_rate_change_callback != NULL)
200140dc:	fdc42783          	lw	a5,-36(s0)
200140e0:	47dc                	lw	a5,12(a5)
200140e2:	cb89                	beqz	a5,200140f4 <metal_clock_set_rate_hz+0x56>
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:88
        clk->_post_rate_change_callback(clk->_post_rate_change_callback_priv);
200140e4:	fdc42783          	lw	a5,-36(s0)
200140e8:	47d8                	lw	a4,12(a5)
200140ea:	fdc42783          	lw	a5,-36(s0)
200140ee:	4b9c                	lw	a5,16(a5)
200140f0:	853e                	mv	a0,a5
200140f2:	9702                	jalr	a4
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:90

    return out;
200140f4:	fec42783          	lw	a5,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:91
}
200140f8:	853e                	mv	a0,a5
200140fa:	50b2                	lw	ra,44(sp)
200140fc:	5422                	lw	s0,40(sp)
200140fe:	6145                	addi	sp,sp,48
20014100:	8082                	ret

20014102 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:101
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 * @param priv Private data for the callback handler
 */
inline void metal_clock_register_pre_rate_change_callback(struct metal_clock *clk, metal_clock_pre_rate_change_callback cb, void *priv)
{
20014102:	1101                	addi	sp,sp,-32
20014104:	ce22                	sw	s0,28(sp)
20014106:	1000                	addi	s0,sp,32
20014108:	fea42623          	sw	a0,-20(s0)
2001410c:	feb42423          	sw	a1,-24(s0)
20014110:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:102
    clk->_pre_rate_change_callback = cb;
20014114:	fec42783          	lw	a5,-20(s0)
20014118:	fe842703          	lw	a4,-24(s0)
2001411c:	c3d8                	sw	a4,4(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:103
    clk->_pre_rate_change_callback_priv = priv;
2001411e:	fec42783          	lw	a5,-20(s0)
20014122:	fe442703          	lw	a4,-28(s0)
20014126:	c798                	sw	a4,8(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:104
}
20014128:	0001                	nop
2001412a:	4472                	lw	s0,28(sp)
2001412c:	6105                	addi	sp,sp,32
2001412e:	8082                	ret

20014130 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:114
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 * @param priv Private data for the callback handler
 */
inline void metal_clock_register_post_rate_change_callback(struct metal_clock *clk, metal_clock_post_rate_change_callback cb, void *priv)
{
20014130:	1101                	addi	sp,sp,-32
20014132:	ce22                	sw	s0,28(sp)
20014134:	1000                	addi	s0,sp,32
20014136:	fea42623          	sw	a0,-20(s0)
2001413a:	feb42423          	sw	a1,-24(s0)
2001413e:	fec42223          	sw	a2,-28(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:115
    clk->_post_rate_change_callback = cb;
20014142:	fec42783          	lw	a5,-20(s0)
20014146:	fe842703          	lw	a4,-24(s0)
2001414a:	c7d8                	sw	a4,12(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:116
    clk->_post_rate_change_callback_priv = priv;
2001414c:	fec42783          	lw	a5,-20(s0)
20014150:	fe442703          	lw	a4,-28(s0)
20014154:	cb98                	sw	a4,16(a5)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/metal/clock.h:117
}
20014156:	0001                	nop
20014158:	4472                	lw	s0,28(sp)
2001415a:	6105                	addi	sp,sp,32
2001415c:	8082                	ret

2001415e <metal_shutdown>:
metal_shutdown():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
# warning "There is no defined shutdown mechanism, metal_shutdown() will spin."
void metal_shutdown(int code)
{
2001415e:	1101                	addi	sp,sp,-32
20014160:	ce22                	sw	s0,28(sp)
20014162:	1000                	addi	s0,sp,32
20014164:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
      __asm__ volatile ("nop");
20014168:	0001                	nop
2001416a:	bffd                	j	20014168 <metal_shutdown+0xa>

2001416c <_exit>:
_exit():
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_exit.c:5
#include <metal/shutdown.h>

void
_exit(int exit_status)
{
2001416c:	1101                	addi	sp,sp,-32
2001416e:	ce06                	sw	ra,28(sp)
20014170:	cc22                	sw	s0,24(sp)
20014172:	1000                	addi	s0,sp,32
20014174:	fea42623          	sw	a0,-20(s0)
C:/Users/miyazaki/wsFreedomStudio/sample/freedom-metal/gloss/sys_exit.c:6
  metal_shutdown(exit_status);
20014178:	fec42503          	lw	a0,-20(s0)
2001417c:	37cd                	jal	2001415e <metal_shutdown>
